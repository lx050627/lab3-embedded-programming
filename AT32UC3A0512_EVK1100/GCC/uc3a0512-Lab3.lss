
uc3a0512-Lab3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000095d0  80002024  80002024  00002424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000b600  8000b600  0000ba00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000b800  8000b800  0000bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000680  8000b818  8000b818  0000bc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  8000be98  0000c408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  8000bea0  0000c410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  8000bea8  0000c418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          0000000c  0000001c  8000beac  0000c41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000051c  00000028  8000beb8  0000c428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .balign       00000004  00000544  8000c3d4  0000c944  2**0
                  ALLOC
 14 .bss          00000160  00000548  00000548  00000000  2**2
                  ALLOC
 15 .heap         0000e958  000006a8  000006a8  00000000  2**0
                  ALLOC
 16 .comment      0000012b  00000000  00000000  0000c944  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 000011b0  00000000  00000000  0000ca6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000023b9  00000000  00000000  0000dc1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   000287ee  00000000  00000000  0000ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005cf1  00000000  00000000  000387c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0000a58a  00000000  00000000  0003e4b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  000030bc  00000000  00000000  00048a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00005062  00000000  00000000  0004bb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    0000c3a2  00000000  00000000  00050b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 26 .debug_ranges 00001238  00000000  00000000  0005cf04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	48 1f       	lddpc	pc,80002004 <program_start+0x4>
80002002:	00 00       	add	r0,r0
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	20 24       	sub	r4,2

Disassembly of section .init:

80002008 <_init>:
80002008:	eb cd 40 40 	pushm	r6,lr
8000200c:	48 26       	lddpc	r6,80002014 <_init+0xc>
8000200e:	1e 26       	rsub	r6,pc
80002010:	c0 48       	rjmp	80002018 <_init+0x10>
80002012:	00 00       	add	r0,r0
80002014:	80 00       	ld.sh	r0,r0[0x0]
80002016:	1f f2       	ld.ub	r2,pc[0x7]
80002018:	f0 16 00 01 	mcall	r6[4]
8000201c:	f0 16 00 00 	mcall	r6[0]
80002020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002024 <_stext>:
80002024:	30 07       	mov	r7,0
80002026:	49 5a       	lddpc	r10,80002078 <_stext+0x54>
80002028:	5b fa       	cp.w	r10,-1
8000202a:	f4 0d 17 10 	movne	sp,r10
8000202e:	49 4b       	lddpc	r11,8000207c <_stext+0x58>
80002030:	49 4c       	lddpc	r12,80002080 <_stext+0x5c>
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 60       	breq	80002040 <_stext+0x1c>
80002036:	49 4a       	lddpc	r10,80002084 <_stext+0x60>
80002038:	b7 09       	ld.d	r8,r11++
8000203a:	b9 28       	st.d	r12++,r8
8000203c:	14 3c       	cp.w	r12,r10
8000203e:	cf d5       	brlt	80002038 <_stext+0x14>
80002040:	49 2a       	lddpc	r10,80002088 <_stext+0x64>
80002042:	49 1c       	lddpc	r12,80002084 <_stext+0x60>
80002044:	30 08       	mov	r8,0
80002046:	30 09       	mov	r9,0
80002048:	b9 28       	st.d	r12++,r8
8000204a:	14 3c       	cp.w	r12,r10
8000204c:	cf e5       	brlt	80002048 <_stext+0x24>
8000204e:	f0 1f 00 10 	mcall	8000208c <_stext+0x68>
80002052:	49 0c       	lddpc	r12,80002090 <_stext+0x6c>
80002054:	f0 1f 00 10 	mcall	80002094 <_stext+0x70>
80002058:	f0 1f 00 10 	mcall	80002098 <_stext+0x74>
8000205c:	1a 9c       	mov	r12,sp
8000205e:	30 0b       	mov	r11,0
80002060:	f0 1f 00 0f 	mcall	8000209c <_stext+0x78>
80002064:	5b fc       	cp.w	r12,-1
80002066:	f9 bc 00 00 	moveq	r12,0
8000206a:	f9 ba 00 00 	moveq	r10,0
8000206e:	14 1d       	sub	sp,r10
80002070:	f0 1f 00 0c 	mcall	800020a0 <_stext+0x7c>
80002074:	f0 1f 00 0c 	mcall	800020a4 <_stext+0x80>
80002078:	00 01       	add	r1,r0
8000207a:	00 00       	add	r0,r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	be 98       	st.b	pc[0x1],r8
80002080:	00 00       	add	r0,r0
80002082:	00 08       	add	r8,r0
80002084:	00 00       	add	r0,r0
80002086:	05 48       	ld.w	r8,--r2
80002088:	00 00       	add	r0,r0
8000208a:	06 a8       	st.w	r3++,r8
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	4e e8       	lddpc	r8,80002244 <spi_selectionMode+0x38>
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	b8 00       	st.h	r12[0x0],r0
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	5e 58       	retlt	r8
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	20 08       	sub	r8,0
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	4f d8       	lddpc	r8,80002290 <spi_selectionMode+0x84>
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	49 60       	lddpc	r0,800020f8 <frame_dummy+0x8>
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	5e 78       	retpl	r8

800020a8 <__do_global_dtors_aux>:
800020a8:	eb cd 40 e0 	pushm	r5-r7,lr
800020ac:	48 e6       	lddpc	r6,800020e4 <__do_global_dtors_aux+0x3c>
800020ae:	30 08       	mov	r8,0
800020b0:	0d 89       	ld.ub	r9,r6[0x0]
800020b2:	f0 09 18 00 	cp.b	r9,r8
800020b6:	c1 41       	brne	800020de <__do_global_dtors_aux+0x36>
800020b8:	48 c5       	lddpc	r5,800020e8 <__do_global_dtors_aux+0x40>
800020ba:	48 d8       	lddpc	r8,800020ec <__do_global_dtors_aux+0x44>
800020bc:	6c 19       	ld.w	r9,r6[0x4]
800020be:	0a 18       	sub	r8,r5
800020c0:	a3 48       	asr	r8,0x2
800020c2:	f0 c7 00 01 	sub	r7,r8,1
800020c6:	0e 39       	cp.w	r9,r7
800020c8:	c0 92       	brcc	800020da <__do_global_dtors_aux+0x32>
800020ca:	2f f9       	sub	r9,-1
800020cc:	8d 19       	st.w	r6[0x4],r9
800020ce:	ea 09 03 28 	ld.w	r8,r5[r9<<0x2]
800020d2:	5d 18       	icall	r8
800020d4:	6c 19       	ld.w	r9,r6[0x4]
800020d6:	0e 39       	cp.w	r9,r7
800020d8:	cf 93       	brcs	800020ca <__do_global_dtors_aux+0x22>
800020da:	30 18       	mov	r8,1
800020dc:	ac 88       	st.b	r6[0x0],r8
800020de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800020e2:	00 00       	add	r0,r0
800020e4:	00 00       	add	r0,r0
800020e6:	05 48       	ld.w	r8,--r2
800020e8:	00 00       	add	r0,r0
800020ea:	00 10       	sub	r0,r0
800020ec:	00 00       	add	r0,r0
800020ee:	00 14       	sub	r4,r0

800020f0 <frame_dummy>:
800020f0:	d4 01       	pushm	lr
800020f2:	48 5c       	lddpc	r12,80002104 <frame_dummy+0x14>
800020f4:	78 08       	ld.w	r8,r12[0x0]
800020f6:	58 08       	cp.w	r8,0
800020f8:	c0 50       	breq	80002102 <frame_dummy+0x12>
800020fa:	48 48       	lddpc	r8,80002108 <frame_dummy+0x18>
800020fc:	58 08       	cp.w	r8,0
800020fe:	c0 20       	breq	80002102 <frame_dummy+0x12>
80002100:	5d 18       	icall	r8
80002102:	d8 02       	popm	pc
80002104:	00 00       	add	r0,r0
80002106:	00 18       	sub	r8,r0
80002108:	00 00       	add	r0,r0
	...

8000210c <getBaudDiv>:
 * \return Divider or error code.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
static int getBaudDiv(const spi_options_t *options, unsigned int pba_hz)
{
8000210c:	eb cd 40 80 	pushm	r7,lr
80002110:	1a 97       	mov	r7,sp
80002112:	20 4d       	sub	sp,16
80002114:	ef 4c ff f8 	st.w	r7[-8],r12
80002118:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + options->baudrate / 2) / options->baudrate;
8000211c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002120:	70 18       	ld.w	r8,r8[0x4]
80002122:	f0 09 16 01 	lsr	r9,r8,0x1
80002126:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000212a:	10 09       	add	r9,r8
8000212c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002130:	70 18       	ld.w	r8,r8[0x4]
80002132:	f2 08 0d 08 	divu	r8,r9,r8
80002136:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
8000213a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000213e:	58 08       	cp.w	r8,0
80002140:	e0 8a 00 08 	brle	80002150 <getBaudDiv+0x44>
80002144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002148:	e0 48 00 ff 	cp.w	r8,255
8000214c:	e0 8a 00 06 	brle	80002158 <getBaudDiv+0x4c>
    return -1;
80002150:	3f f8       	mov	r8,-1
80002152:	ef 48 ff f0 	st.w	r7[-16],r8
80002156:	c0 58       	rjmp	80002160 <getBaudDiv+0x54>
  }

  return baudDiv;
80002158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000215c:	ef 48 ff f0 	st.w	r7[-16],r8
80002160:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002164:	10 9c       	mov	r12,r8
80002166:	2f cd       	sub	sp,-16
80002168:	e3 cd 80 80 	ldm	sp++,r7,pc

8000216c <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
8000216c:	eb cd 40 80 	pushm	r7,lr
80002170:	1a 97       	mov	r7,sp
80002172:	20 4d       	sub	sp,16
80002174:	ef 4c ff f8 	st.w	r7[-8],r12
80002178:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
8000217c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002180:	f1 39 00 0d 	ld.ub	r9,r8[13]
80002184:	30 18       	mov	r8,1
80002186:	f0 09 18 00 	cp.b	r9,r8
8000218a:	e0 88 00 06 	brls	80002196 <spi_initMaster+0x2a>
    return SPI_ERROR_ARGUMENT;
8000218e:	30 28       	mov	r8,2
80002190:	ef 48 ff f0 	st.w	r7[-16],r8
80002194:	c3 68       	rjmp	80002200 <spi_initMaster+0x94>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002196:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000219a:	e0 68 00 80 	mov	r8,128
8000219e:	93 08       	st.w	r9[0x0],r8

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800021a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021a4:	70 18       	ld.w	r8,r8[0x4]
800021a6:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
800021aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021ae:	30 19       	mov	r9,1
800021b0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800021b4:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800021b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021bc:	f1 38 00 0d 	ld.ub	r8,r8[13]
800021c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021c4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800021c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021cc:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800021d0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
800021d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d8:	30 09       	mov	r9,0
800021da:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800021de:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800021e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021e6:	30 f9       	mov	r9,15
800021e8:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800021ec:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
800021f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021f8:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
800021fa:	30 08       	mov	r8,0
800021fc:	ef 48 ff f0 	st.w	r7[-16],r8
80002200:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002204:	10 9c       	mov	r12,r8
80002206:	2f cd       	sub	sp,-16
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc

8000220c <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
8000220c:	eb cd 40 80 	pushm	r7,lr
80002210:	1a 97       	mov	r7,sp
80002212:	20 6d       	sub	sp,24
80002214:	ef 4c ff f8 	st.w	r7[-8],r12
80002218:	16 98       	mov	r8,r11
8000221a:	ef 68 ff f4 	st.b	r7[-12],r8
8000221e:	14 98       	mov	r8,r10
80002220:	ef 68 ff f0 	st.b	r7[-16],r8
80002224:	12 98       	mov	r8,r9
80002226:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
8000222a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000222e:	30 18       	mov	r8,1
80002230:	f0 09 18 00 	cp.b	r9,r8
80002234:	e0 8b 00 09 	brhi	80002246 <spi_selectionMode+0x3a>
80002238:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000223c:	30 18       	mov	r8,1
8000223e:	f0 09 18 00 	cp.b	r9,r8
80002242:	e0 88 00 06 	brls	8000224e <spi_selectionMode+0x42>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
80002246:	30 28       	mov	r8,2
80002248:	ef 48 ff e8 	st.w	r7[-24],r8
8000224c:	c2 a8       	rjmp	800022a0 <spi_selectionMode+0x94>
  }

  u_avr32_spi_mr.mr = spi->mr;
8000224e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002252:	70 18       	ld.w	r8,r8[0x4]
80002254:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
80002258:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000225c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002260:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002264:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002268:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000226c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002270:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002274:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002278:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000227c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002280:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80002284:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
80002288:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000228c:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80002290:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002294:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002298:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
8000229a:	30 08       	mov	r8,0
8000229c:	ef 48 ff e8 	st.w	r7[-24],r8
800022a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
800022a4:	10 9c       	mov	r12,r8
800022a6:	2f ad       	sub	sp,-24
800022a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800022ac <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800022ac:	eb cd 40 80 	pushm	r7,lr
800022b0:	1a 97       	mov	r7,sp
800022b2:	20 3d       	sub	sp,12
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
800022b8:	16 98       	mov	r8,r11
800022ba:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800022be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022c2:	70 18       	ld.w	r8,r8[0x4]
800022c4:	10 99       	mov	r9,r8
800022c6:	ea 19 00 0f 	orh	r9,0xf
800022ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ce:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800022d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022d4:	70 18       	ld.w	r8,r8[0x4]
800022d6:	e2 18 00 04 	andl	r8,0x4,COH
800022da:	c1 b0       	breq	80002310 <spi_selectChip+0x64>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
800022dc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800022e0:	30 e8       	mov	r8,14
800022e2:	f0 09 18 00 	cp.b	r9,r8
800022e6:	e0 88 00 06 	brls	800022f2 <spi_selectChip+0x46>
      return SPI_ERROR_ARGUMENT;
800022ea:	30 28       	mov	r8,2
800022ec:	ef 48 ff f4 	st.w	r7[-12],r8
800022f0:	c2 e8       	rjmp	8000234c <spi_selectChip+0xa0>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
800022f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022f6:	70 19       	ld.w	r9,r8[0x4]
800022f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800022fc:	b1 68       	lsl	r8,0x10
800022fe:	ea 18 ff f0 	orh	r8,0xfff0
80002302:	e8 18 ff ff 	orl	r8,0xffff
80002306:	10 69       	and	r9,r8
80002308:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000230c:	91 19       	st.w	r8[0x4],r9
8000230e:	c1 c8       	rjmp	80002346 <spi_selectChip+0x9a>
  } else {
    if (chip > 3) {
80002310:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002314:	30 38       	mov	r8,3
80002316:	f0 09 18 00 	cp.b	r9,r8
8000231a:	e0 88 00 06 	brls	80002326 <spi_selectChip+0x7a>
      return SPI_ERROR_ARGUMENT;
8000231e:	30 28       	mov	r8,2
80002320:	ef 48 ff f4 	st.w	r7[-12],r8
80002324:	c1 48       	rjmp	8000234c <spi_selectChip+0xa0>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000232a:	70 1a       	ld.w	r10,r8[0x4]
8000232c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002330:	f0 c9 ff f0 	sub	r9,r8,-16
80002334:	30 18       	mov	r8,1
80002336:	f0 09 09 48 	lsl	r8,r8,r9
8000233a:	5c d8       	com	r8
8000233c:	f5 e8 00 09 	and	r9,r10,r8
80002340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002344:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
80002346:	30 08       	mov	r8,0
80002348:	ef 48 ff f4 	st.w	r7[-12],r8
8000234c:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80002350:	10 9c       	mov	r12,r8
80002352:	2f dd       	sub	sp,-12
80002354:	e3 cd 80 80 	ldm	sp++,r7,pc

80002358 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002358:	eb cd 40 80 	pushm	r7,lr
8000235c:	1a 97       	mov	r7,sp
8000235e:	20 4d       	sub	sp,16
80002360:	ef 4c ff f8 	st.w	r7[-8],r12
80002364:	16 98       	mov	r8,r11
80002366:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
8000236a:	e0 68 27 10 	mov	r8,10000
8000236e:	ef 48 ff fc 	st.w	r7[-4],r8
80002372:	c1 28       	rjmp	80002396 <spi_unselectChip+0x3e>

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002374:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002378:	58 08       	cp.w	r8,0
8000237a:	5f 08       	sreq	r8
8000237c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002384:	20 18       	sub	r8,1
80002386:	ef 48 ff fc 	st.w	r7[-4],r8
8000238a:	58 09       	cp.w	r9,0
8000238c:	c0 50       	breq	80002396 <spi_unselectChip+0x3e>
      return SPI_ERROR_TIMEOUT;
8000238e:	30 18       	mov	r8,1
80002390:	ef 48 ff f0 	st.w	r7[-16],r8
80002394:	c1 88       	rjmp	800023c4 <spi_unselectChip+0x6c>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000239a:	70 48       	ld.w	r8,r8[0x10]
8000239c:	e2 18 02 00 	andl	r8,0x200,COH
800023a0:	ce a0       	breq	80002374 <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800023a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a6:	70 18       	ld.w	r8,r8[0x4]
800023a8:	10 99       	mov	r9,r8
800023aa:	ea 19 00 0f 	orh	r9,0xf
800023ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b2:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800023b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b8:	fc 18 01 00 	movh	r8,0x100
800023bc:	93 08       	st.w	r9[0x0],r8

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
800023be:	30 08       	mov	r8,0
800023c0:	ef 48 ff f0 	st.w	r7[-16],r8
800023c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800023c8:	10 9c       	mov	r12,r8
800023ca:	2f cd       	sub	sp,-16
800023cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800023d0 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              unsigned int pba_hz)
{
800023d0:	eb cd 40 80 	pushm	r7,lr
800023d4:	1a 97       	mov	r7,sp
800023d6:	20 7d       	sub	sp,28
800023d8:	ef 4c ff f4 	st.w	r7[-12],r12
800023dc:	ef 4b ff f0 	st.w	r7[-16],r11
800023e0:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800023e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023e8:	f1 39 00 0c 	ld.ub	r9,r8[12]
800023ec:	30 38       	mov	r8,3
800023ee:	f0 09 18 00 	cp.b	r9,r8
800023f2:	e0 8b 00 1d 	brhi	8000242c <spi_setupChipReg+0x5c>
800023f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023fa:	f1 39 00 0b 	ld.ub	r9,r8[11]
800023fe:	30 18       	mov	r8,1
80002400:	f0 09 18 00 	cp.b	r9,r8
80002404:	e0 8b 00 14 	brhi	8000242c <spi_setupChipReg+0x5c>
80002408:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000240c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002410:	30 78       	mov	r8,7
80002412:	f0 09 18 00 	cp.b	r9,r8
80002416:	e0 88 00 0b 	brls	8000242c <spi_setupChipReg+0x5c>
8000241a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000241e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002422:	31 08       	mov	r8,16
80002424:	f0 09 18 00 	cp.b	r9,r8
80002428:	e0 88 00 06 	brls	80002434 <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
8000242c:	30 28       	mov	r8,2
8000242e:	ef 48 ff e4 	st.w	r7[-28],r8
80002432:	c9 e8       	rjmp	8000256e <spi_setupChipReg+0x19e>
  }

  int baudDiv = getBaudDiv(options, pba_hz);
80002434:	ee fb ff ec 	ld.w	r11,r7[-20]
80002438:	ee fc ff f0 	ld.w	r12,r7[-16]
8000243c:	f0 1f 00 50 	mcall	8000257c <spi_setupChipReg+0x1ac>
80002440:	18 98       	mov	r8,r12
80002442:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
80002446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000244a:	58 08       	cp.w	r8,0
8000244c:	c0 54       	brge	80002456 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
8000244e:	30 28       	mov	r8,2
80002450:	ef 48 ff e4 	st.w	r7[-28],r8
80002454:	c8 d8       	rjmp	8000256e <spi_setupChipReg+0x19e>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
80002456:	30 08       	mov	r8,0
80002458:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol = options->spi_mode >> 1;
8000245c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002460:	f1 38 00 0c 	ld.ub	r8,r8[12]
80002464:	a1 98       	lsr	r8,0x1
80002466:	5c 58       	castu.b	r8
80002468:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000246c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002470:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002474:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80002478:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha = (options->spi_mode & 0x1) ^ 0x1;
8000247c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002480:	f1 38 00 0c 	ld.ub	r8,r8[12]
80002484:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002488:	5f 08       	sreq	r8
8000248a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000248e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002492:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80002496:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat = options->stay_act;
8000249a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000249e:	f1 38 00 0b 	ld.ub	r8,r8[11]
800024a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800024a6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800024aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024ae:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
800024b2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits = options->bits - 8;
800024b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024ba:	f1 38 00 08 	ld.ub	r8,r8[8]
800024be:	20 88       	sub	r8,8
800024c0:	5c 58       	castu.b	r8
800024c2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800024c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800024ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024ce:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
800024d2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr = baudDiv;
800024d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024da:	5c 58       	castu.b	r8
800024dc:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs = options->spck_delay;
800024e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024e4:	f1 38 00 09 	ld.ub	r8,r8[9]
800024e8:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800024ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024f0:	f1 38 00 0a 	ld.ub	r8,r8[10]
800024f4:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
800024f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024fc:	11 88       	ld.ub	r8,r8[0x0]
800024fe:	ef 48 ff e8 	st.w	r7[-24],r8
80002502:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002506:	58 18       	cp.w	r8,1
80002508:	c1 a0       	breq	8000253c <spi_setupChipReg+0x16c>
8000250a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000250e:	58 18       	cp.w	r8,1
80002510:	e0 89 00 07 	brgt	8000251e <spi_setupChipReg+0x14e>
80002514:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002518:	58 08       	cp.w	r8,0
8000251a:	c0 b0       	breq	80002530 <spi_setupChipReg+0x160>
8000251c:	c2 28       	rjmp	80002560 <spi_setupChipReg+0x190>
8000251e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002522:	58 28       	cp.w	r8,2
80002524:	c1 20       	breq	80002548 <spi_setupChipReg+0x178>
80002526:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000252a:	58 38       	cp.w	r8,3
8000252c:	c1 40       	breq	80002554 <spi_setupChipReg+0x184>
8000252e:	c1 98       	rjmp	80002560 <spi_setupChipReg+0x190>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80002530:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002534:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002538:	91 c9       	st.w	r8[0x30],r9
8000253a:	c1 78       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
8000253c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002540:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002544:	91 d9       	st.w	r8[0x34],r9
80002546:	c1 18       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80002548:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000254c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002550:	91 e9       	st.w	r8[0x38],r9
80002552:	c0 b8       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80002554:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002558:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000255c:	91 f9       	st.w	r8[0x3c],r9
8000255e:	c0 58       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    default:
      return SPI_ERROR_ARGUMENT;
80002560:	30 28       	mov	r8,2
80002562:	ef 48 ff e4 	st.w	r7[-28],r8
80002566:	c0 48       	rjmp	8000256e <spi_setupChipReg+0x19e>
      while(1);
    }
  }
#endif

  return SPI_OK;
80002568:	30 08       	mov	r8,0
8000256a:	ef 48 ff e4 	st.w	r7[-28],r8
8000256e:	ee f8 ff e4 	ld.w	r8,r7[-28]
}
80002572:	10 9c       	mov	r12,r8
80002574:	2f 9d       	sub	sp,-28
80002576:	e3 cd 80 80 	ldm	sp++,r7,pc
8000257a:	00 00       	add	r0,r0
8000257c:	80 00       	ld.sh	r0,r0[0x0]
8000257e:	21 0c       	sub	r12,16

80002580 <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
80002580:	eb cd 40 80 	pushm	r7,lr
80002584:	1a 97       	mov	r7,sp
80002586:	20 1d       	sub	sp,4
80002588:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000258c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002590:	30 18       	mov	r8,1
80002592:	93 08       	st.w	r9[0x0],r8
}
80002594:	2f fd       	sub	sp,-4
80002596:	e3 cd 80 80 	ldm	sp++,r7,pc

8000259a <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, unsigned short data)
{
8000259a:	eb cd 40 80 	pushm	r7,lr
8000259e:	1a 97       	mov	r7,sp
800025a0:	20 4d       	sub	sp,16
800025a2:	ef 4c ff f8 	st.w	r7[-8],r12
800025a6:	16 98       	mov	r8,r11
800025a8:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
800025ac:	e0 68 27 10 	mov	r8,10000
800025b0:	ef 48 ff fc 	st.w	r7[-4],r8
800025b4:	c1 28       	rjmp	800025d8 <spi_write+0x3e>

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
800025b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025ba:	58 08       	cp.w	r8,0
800025bc:	5f 08       	sreq	r8
800025be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800025c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025c6:	20 18       	sub	r8,1
800025c8:	ef 48 ff fc 	st.w	r7[-4],r8
800025cc:	58 09       	cp.w	r9,0
800025ce:	c0 50       	breq	800025d8 <spi_write+0x3e>
      return SPI_ERROR_TIMEOUT;
800025d0:	30 18       	mov	r8,1
800025d2:	ef 48 ff f0 	st.w	r7[-16],r8
800025d6:	c0 f8       	rjmp	800025f4 <spi_write+0x5a>

spi_status_t spi_write(volatile avr32_spi_t *spi, unsigned short data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800025d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025dc:	70 48       	ld.w	r8,r8[0x10]
800025de:	e2 18 00 02 	andl	r8,0x2,COH
800025e2:	ce a0       	breq	800025b6 <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800025e4:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800025e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025ec:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
800025ee:	30 08       	mov	r8,0
800025f0:	ef 48 ff f0 	st.w	r7[-16],r8
800025f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800025f8:	10 9c       	mov	r12,r8
800025fa:	2f cd       	sub	sp,-16
800025fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80002600 <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80002600:	eb cd 40 80 	pushm	r7,lr
80002604:	1a 97       	mov	r7,sp
80002606:	20 4d       	sub	sp,16
80002608:	ef 4c ff f8 	st.w	r7[-8],r12
8000260c:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
80002610:	e0 68 27 10 	mov	r8,10000
80002614:	ef 48 ff fc 	st.w	r7[-4],r8
80002618:	c1 28       	rjmp	8000263c <spi_read+0x3c>

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8000261a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000261e:	58 08       	cp.w	r8,0
80002620:	5f 08       	sreq	r8
80002622:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000262a:	20 18       	sub	r8,1
8000262c:	ef 48 ff fc 	st.w	r7[-4],r8
80002630:	58 09       	cp.w	r9,0
80002632:	c0 50       	breq	8000263c <spi_read+0x3c>
      return SPI_ERROR_TIMEOUT;
80002634:	30 18       	mov	r8,1
80002636:	ef 48 ff f0 	st.w	r7[-16],r8
8000263a:	c1 38       	rjmp	80002660 <spi_read+0x60>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8000263c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002640:	70 48       	ld.w	r8,r8[0x10]
80002642:	e2 18 02 01 	andl	r8,0x201,COH
80002646:	e0 48 02 01 	cp.w	r8,513
8000264a:	ce 81       	brne	8000261a <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000264c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002650:	70 28       	ld.w	r8,r8[0x8]
80002652:	5c 88       	casts.h	r8
80002654:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002658:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
8000265a:	30 08       	mov	r8,0
8000265c:	ef 48 ff f0 	st.w	r7[-16],r8
80002660:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002664:	10 9c       	mov	r12,r8
80002666:	2f cd       	sub	sp,-16
80002668:	e3 cd 80 80 	ldm	sp++,r7,pc

8000266c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000266c:	eb cd 40 80 	pushm	r7,lr
80002670:	1a 97       	mov	r7,sp
80002672:	c0 08       	rjmp	80002672 <_unhandled_interrupt+0x6>

80002674 <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80002674:	eb cd 40 80 	pushm	r7,lr
80002678:	1a 97       	mov	r7,sp
8000267a:	20 4d       	sub	sp,16
8000267c:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002680:	fe 79 08 00 	mov	r9,-63488
80002684:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002688:	f0 08 11 03 	rsub	r8,r8,3
8000268c:	28 08       	sub	r8,-128
8000268e:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80002692:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80002696:	fe 79 08 00 	mov	r9,-63488
8000269a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000269e:	2c 08       	sub	r8,-64
800026a0:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800026a4:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800026a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026ac:	58 08       	cp.w	r8,0
800026ae:	c1 50       	breq	800026d8 <_get_interrupt_handler+0x64>
800026b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026b4:	48 e9       	lddpc	r9,800026ec <_get_interrupt_handler+0x78>
800026b6:	a1 78       	lsl	r8,0x1
800026b8:	2f f8       	sub	r8,-1
800026ba:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
800026be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026c2:	f0 08 12 00 	clz	r8,r8
800026c6:	f0 08 11 1f 	rsub	r8,r8,31
800026ca:	a3 68       	lsl	r8,0x2
800026cc:	f2 08 00 08 	add	r8,r9,r8
800026d0:	70 08       	ld.w	r8,r8[0x0]
800026d2:	ef 48 ff f0 	st.w	r7[-16],r8
800026d6:	c0 48       	rjmp	800026de <_get_interrupt_handler+0x6a>
800026d8:	30 08       	mov	r8,0
800026da:	ef 48 ff f0 	st.w	r7[-16],r8
800026de:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800026e2:	10 9c       	mov	r12,r8
800026e4:	2f cd       	sub	sp,-16
800026e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ea:	00 00       	add	r0,r0
800026ec:	80 00       	ld.sh	r0,r0[0x0]
800026ee:	b8 18       	st.h	r12[0x2],r8

800026f0 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
800026f0:	eb cd 40 80 	pushm	r7,lr
800026f4:	1a 97       	mov	r7,sp
800026f6:	20 2d       	sub	sp,8
  unsigned int int_grp, int_req;

  INTC_init_evba();
800026f8:	f0 1f 00 1e 	mcall	80002770 <INTC_init_interrupts+0x80>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800026fc:	30 08       	mov	r8,0
800026fe:	ef 48 ff f8 	st.w	r7[-8],r8
80002702:	c2 e8       	rjmp	8000275e <INTC_init_interrupts+0x6e>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002704:	30 08       	mov	r8,0
80002706:	ef 48 ff fc 	st.w	r7[-4],r8
8000270a:	c1 38       	rjmp	80002730 <INTC_init_interrupts+0x40>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000270c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002710:	49 99       	lddpc	r9,80002774 <INTC_init_interrupts+0x84>
80002712:	a1 78       	lsl	r8,0x1
80002714:	2f f8       	sub	r8,-1
80002716:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
8000271a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000271e:	a3 68       	lsl	r8,0x2
80002720:	10 09       	add	r9,r8
80002722:	49 68       	lddpc	r8,80002778 <INTC_init_interrupts+0x88>
80002724:	93 08       	st.w	r9[0x0],r8

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000272a:	2f f8       	sub	r8,-1
8000272c:	ef 48 ff fc 	st.w	r7[-4],r8
80002730:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002734:	49 08       	lddpc	r8,80002774 <INTC_init_interrupts+0x84>
80002736:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
8000273a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000273e:	10 39       	cp.w	r9,r8
80002740:	fe 9b ff e6 	brhi	8000270c <INTC_init_interrupts+0x1c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002744:	fe 7a 08 00 	mov	r10,-63488
80002748:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000274c:	48 c8       	lddpc	r8,8000277c <INTC_init_interrupts+0x8c>
8000274e:	70 08       	ld.w	r8,r8[0x0]
80002750:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002758:	2f f8       	sub	r8,-1
8000275a:	ef 48 ff f8 	st.w	r7[-8],r8
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	59 38       	cp.w	r8,19
80002764:	fe 98 ff d0 	brls	80002704 <INTC_init_interrupts+0x14>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
80002768:	2f ed       	sub	sp,-8
8000276a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000276e:	00 00       	add	r0,r0
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	27 80       	sub	r0,120
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	b8 18       	st.h	r12[0x2],r8
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	26 6c       	sub	r12,102
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	b7 3c       	mul	r12,r11

80002780 <INTC_init_evba>:
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
}

//! Init EVBA address. This sequence might also be done in the UTILS/STARTUP/GCC/crt0.S
static __inline__ void INTC_init_evba(void)
{
80002780:	eb cd 40 80 	pushm	r7,lr
80002784:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002786:	48 38       	lddpc	r8,80002790 <INTC_init_evba+0x10>
80002788:	e3 b8 00 01 	mtsr	0x4,r8
}
8000278c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002790:	80 00       	ld.sh	r0,r0[0x0]
80002792:	b6 00       	st.h	r11[0x0],r0

80002794 <INTC_register_interrupt>:
  }
}


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80002794:	eb cd 40 80 	pushm	r7,lr
80002798:	1a 97       	mov	r7,sp
8000279a:	20 4d       	sub	sp,16
8000279c:	ef 4c ff f8 	st.w	r7[-8],r12
800027a0:	ef 4b ff f4 	st.w	r7[-12],r11
800027a4:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800027a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800027ac:	a5 98       	lsr	r8,0x5
800027ae:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
800027b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027b6:	49 09       	lddpc	r9,800027f4 <INTC_register_interrupt+0x60>
800027b8:	a1 78       	lsl	r8,0x1
800027ba:	2f f8       	sub	r8,-1
800027bc:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
800027c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800027c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800027c8:	a3 68       	lsl	r8,0x2
800027ca:	10 09       	add	r9,r8
800027cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d0:	93 08       	st.w	r9[0x0],r8
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
800027d2:	fe 7b 08 00 	mov	r11,-63488
800027d6:	ee fa ff fc 	ld.w	r10,r7[-4]
800027da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027de:	f3 d8 c0 02 	bfextu	r9,r8,0x0,0x2
800027e2:	48 68       	lddpc	r8,800027f8 <INTC_register_interrupt+0x64>
800027e4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800027e8:	f6 0a 09 28 	st.w	r11[r10<<0x2],r8
}
800027ec:	2f cd       	sub	sp,-16
800027ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800027f2:	00 00       	add	r0,r0
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	b8 18       	st.h	r12[0x2],r8
800027f8:	80 00       	ld.sh	r0,r0[0x0]
800027fa:	b7 3c       	mul	r12,r11

800027fc <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
800027fc:	eb cd 40 80 	pushm	r7,lr
80002800:	1a 97       	mov	r7,sp
80002802:	20 5d       	sub	sp,20
80002804:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80002808:	fe 78 30 00 	mov	r8,-53248
8000280c:	ef 48 ff f8 	st.w	r7[-8],r8
  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002810:	e1 b8 00 00 	mfsr	r8,0x0
80002814:	e6 18 00 01 	andh	r8,0x1,COH
80002818:	5f 08       	sreq	r8
8000281a:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
8000281e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002822:	58 08       	cp.w	r8,0
80002824:	c0 51       	brne	8000282e <pwm_init+0x32>
    return PWM_INVALID_INPUT;
80002826:	30 18       	mov	r8,1
80002828:	ef 48 ff ec 	st.w	r7[-20],r8
8000282c:	c2 e8       	rjmp	80002888 <pwm_init+0x8c>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000282e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002832:	30 08       	mov	r8,0
80002834:	f0 09 18 00 	cp.b	r9,r8
80002838:	c0 20       	breq	8000283c <pwm_init+0x40>
8000283a:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000283c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002840:	37 f8       	mov	r8,127
80002842:	93 58       	st.w	r9[0x14],r8
  pwm->isr;
80002844:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002848:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000284a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000284e:	30 08       	mov	r8,0
80002850:	f0 09 18 00 	cp.b	r9,r8
80002854:	c0 20       	breq	80002858 <pwm_init+0x5c>
80002856:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
80002858:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000285c:	70 19       	ld.w	r9,r8[0x4]
8000285e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002862:	70 08       	ld.w	r8,r8[0x0]
80002864:	b1 68       	lsl	r8,0x10
80002866:	10 49       	or	r9,r8
80002868:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000286c:	70 38       	ld.w	r8,r8[0xc]
8000286e:	a9 68       	lsl	r8,0x8
80002870:	10 49       	or	r9,r8
80002872:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002876:	70 28       	ld.w	r8,r8[0x8]
80002878:	b9 68       	lsl	r8,0x18
8000287a:	10 49       	or	r9,r8
8000287c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002880:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
80002882:	30 08       	mov	r8,0
80002884:	ef 48 ff ec 	st.w	r7[-20],r8
80002888:	ee f8 ff ec 	ld.w	r8,r7[-20]
}
8000288c:	10 9c       	mov	r12,r8
8000288e:	2f bd       	sub	sp,-20
80002890:	e3 cd 80 80 	ldm	sp++,r7,pc

80002894 <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
80002894:	eb cd 40 80 	pushm	r7,lr
80002898:	1a 97       	mov	r7,sp
8000289a:	20 4d       	sub	sp,16
8000289c:	ef 4c ff f8 	st.w	r7[-8],r12
800028a0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
800028a4:	fe 78 30 00 	mov	r8,-53248
800028a8:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
800028ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b0:	58 08       	cp.w	r8,0
800028b2:	c0 51       	brne	800028bc <pwm_channel_init+0x28>
    return PWM_INVALID_ARGUMENT;
800028b4:	30 18       	mov	r8,1
800028b6:	ef 48 ff f0 	st.w	r7[-16],r8
800028ba:	c3 68       	rjmp	80002926 <pwm_channel_init+0x92>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800028bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028c0:	58 68       	cp.w	r8,6
800028c2:	e0 88 00 06 	brls	800028ce <pwm_channel_init+0x3a>
    return PWM_INVALID_INPUT;
800028c6:	30 18       	mov	r8,1
800028c8:	ef 48 ff f0 	st.w	r7[-16],r8
800028cc:	c2 d8       	rjmp	80002926 <pwm_channel_init+0x92>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800028ce:	ee fa ff f8 	ld.w	r10,r7[-8]
800028d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028d6:	70 0b       	ld.w	r11,r8[0x0]
800028d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800028dc:	f4 c8 ff f0 	sub	r8,r10,-16
800028e0:	a5 78       	lsl	r8,0x5
800028e2:	f2 08 00 08 	add	r8,r9,r8
800028e6:	91 0b       	st.w	r8[0x0],r11
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800028e8:	ee fa ff f8 	ld.w	r10,r7[-8]
800028ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028f0:	70 1b       	ld.w	r11,r8[0x4]
800028f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800028f6:	f4 08 15 05 	lsl	r8,r10,0x5
800028fa:	f2 08 00 08 	add	r8,r9,r8
800028fe:	f0 c8 fd fc 	sub	r8,r8,-516
80002902:	91 0b       	st.w	r8[0x0],r11
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002904:	ee fa ff f8 	ld.w	r10,r7[-8]
80002908:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000290c:	70 2b       	ld.w	r11,r8[0x8]
8000290e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002912:	f4 08 15 05 	lsl	r8,r10,0x5
80002916:	f2 08 00 08 	add	r8,r9,r8
8000291a:	f0 c8 fd f8 	sub	r8,r8,-520
8000291e:	91 0b       	st.w	r8[0x0],r11

  return PWM_SUCCESS;
80002920:	30 08       	mov	r8,0
80002922:	ef 48 ff f0 	st.w	r7[-16],r8
80002926:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000292a:	10 9c       	mov	r12,r8
8000292c:	2f cd       	sub	sp,-16
8000292e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002932 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
80002932:	eb cd 40 80 	pushm	r7,lr
80002936:	1a 97       	mov	r7,sp
80002938:	20 2d       	sub	sp,8
8000293a:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000293e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002942:	e0 18 ff 80 	andl	r8,0xff80
80002946:	c0 50       	breq	80002950 <pwm_start_channels+0x1e>
    return PWM_INVALID_INPUT;
80002948:	30 18       	mov	r8,1
8000294a:	ef 48 ff f8 	st.w	r7[-8],r8
8000294e:	c0 98       	rjmp	80002960 <pwm_start_channels+0x2e>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002950:	fe 79 30 00 	mov	r9,-53248
80002954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002958:	93 18       	st.w	r9[0x4],r8

  return PWM_SUCCESS;
8000295a:	30 08       	mov	r8,0
8000295c:	ef 48 ff f8 	st.w	r7[-8],r8
80002960:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80002964:	10 9c       	mov	r12,r8
80002966:	2f ed       	sub	sp,-8
80002968:	e3 cd 80 80 	ldm	sp++,r7,pc

8000296c <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
8000296c:	eb cd 40 80 	pushm	r7,lr
80002970:	1a 97       	mov	r7,sp
80002972:	20 3d       	sub	sp,12
80002974:	ef 4c ff f8 	st.w	r7[-8],r12
80002978:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000297c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002980:	70 a9       	ld.w	r9,r8[0x28]
80002982:	30 08       	mov	r8,0
80002984:	ef 48 ff fc 	st.w	r7[-4],r8
80002988:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
8000298c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002990:	5c 58       	castu.b	r8
80002992:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002996:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000299a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000299e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800029a2:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800029a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800029aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029ae:	91 a9       	st.w	r8[0x28],r9
}
800029b0:	2f dd       	sub	sp,-12
800029b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800029b6:	d7 03       	nop

800029b8 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800029b8:	eb cd 40 80 	pushm	r7,lr
800029bc:	1a 97       	mov	r7,sp
800029be:	20 5d       	sub	sp,20
800029c0:	ef 4c ff fc 	st.w	r7[-4],r12
800029c4:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800029c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029cc:	ec 58 bb 9f 	cp.w	r8,899999
800029d0:	e0 88 00 28 	brls	80002a20 <pm_enable_osc0_crystal+0x68>
800029d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029d8:	e0 69 c6 bf 	mov	r9,50879
800029dc:	ea 19 00 2d 	orh	r9,0x2d
800029e0:	12 38       	cp.w	r8,r9
800029e2:	e0 88 00 17 	brls	80002a10 <pm_enable_osc0_crystal+0x58>
800029e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029ea:	e0 69 11 ff 	mov	r9,4607
800029ee:	ea 19 00 7a 	orh	r9,0x7a
800029f2:	12 38       	cp.w	r8,r9
800029f4:	e0 8b 00 06 	brhi	80002a00 <pm_enable_osc0_crystal+0x48>
800029f8:	30 68       	mov	r8,6
800029fa:	ef 48 ff f4 	st.w	r7[-12],r8
800029fe:	c0 48       	rjmp	80002a06 <pm_enable_osc0_crystal+0x4e>
80002a00:	30 79       	mov	r9,7
80002a02:	ef 49 ff f4 	st.w	r7[-12],r9
80002a06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a0a:	ef 48 ff f0 	st.w	r7[-16],r8
80002a0e:	c0 48       	rjmp	80002a16 <pm_enable_osc0_crystal+0x5e>
80002a10:	30 59       	mov	r9,5
80002a12:	ef 49 ff f0 	st.w	r7[-16],r9
80002a16:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a1a:	ef 48 ff ec 	st.w	r7[-20],r8
80002a1e:	c0 48       	rjmp	80002a26 <pm_enable_osc0_crystal+0x6e>
80002a20:	30 49       	mov	r9,4
80002a22:	ef 49 ff ec 	st.w	r7[-20],r9
80002a26:	ee fb ff ec 	ld.w	r11,r7[-20]
80002a2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80002a2e:	f0 1f 00 03 	mcall	80002a38 <pm_enable_osc0_crystal+0x80>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002a32:	2f bd       	sub	sp,-20
80002a34:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a38:	80 00       	ld.sh	r0,r0[0x0]
80002a3a:	29 6c       	sub	r12,-106

80002a3c <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002a3c:	eb cd 40 80 	pushm	r7,lr
80002a40:	1a 97       	mov	r7,sp
80002a42:	20 2d       	sub	sp,8
80002a44:	ef 4c ff fc 	st.w	r7[-4],r12
80002a48:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
80002a4c:	ee fb ff f8 	ld.w	r11,r7[-8]
80002a50:	ee fc ff fc 	ld.w	r12,r7[-4]
80002a54:	f0 1f 00 05 	mcall	80002a68 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
80002a58:	ee fc ff fc 	ld.w	r12,r7[-4]
80002a5c:	f0 1f 00 04 	mcall	80002a6c <pm_enable_clk0+0x30>
}
80002a60:	2f ed       	sub	sp,-8
80002a62:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a66:	00 00       	add	r0,r0
80002a68:	80 00       	ld.sh	r0,r0[0x0]
80002a6a:	2a 70       	sub	r0,-89
80002a6c:	80 00       	ld.sh	r0,r0[0x0]
80002a6e:	2a ca       	sub	r10,-84

80002a70 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
80002a70:	eb cd 40 80 	pushm	r7,lr
80002a74:	1a 97       	mov	r7,sp
80002a76:	20 3d       	sub	sp,12
80002a78:	ef 4c ff f8 	st.w	r7[-8],r12
80002a7c:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002a80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a84:	70 a9       	ld.w	r9,r8[0x28]
80002a86:	30 08       	mov	r8,0
80002a88:	ef 48 ff fc 	st.w	r7[-4],r8
80002a8c:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002a90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a94:	5c 58       	castu.b	r8
80002a96:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002a9a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aa2:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80002aa6:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002aaa:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002aae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ab2:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002ab4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ab8:	70 08       	ld.w	r8,r8[0x0]
80002aba:	10 99       	mov	r9,r8
80002abc:	a3 a9       	sbr	r9,0x2
80002abe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ac2:	91 09       	st.w	r8[0x0],r9
}
80002ac4:	2f dd       	sub	sp,-12
80002ac6:	e3 cd 80 80 	ldm	sp++,r7,pc

80002aca <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
80002aca:	eb cd 40 80 	pushm	r7,lr
80002ace:	1a 97       	mov	r7,sp
80002ad0:	20 1d       	sub	sp,4
80002ad2:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002ad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ada:	71 58       	ld.w	r8,r8[0x54]
80002adc:	e2 18 00 80 	andl	r8,0x80,COH
80002ae0:	cf b0       	breq	80002ad6 <pm_wait_for_clk0_ready+0xc>
}
80002ae2:	2f fd       	sub	sp,-4
80002ae4:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ae8 <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80002ae8:	eb cd 40 80 	pushm	r7,lr
80002aec:	1a 97       	mov	r7,sp
80002aee:	20 6d       	sub	sp,24
80002af0:	ee ce ff f8 	sub	lr,r7,-8
80002af4:	ef 4c ff f8 	st.w	r7[-8],r12
80002af8:	ef 4b ff f4 	st.w	r7[-12],r11
80002afc:	ef 4a ff f0 	st.w	r7[-16],r10
80002b00:	ef 49 ff ec 	st.w	r7[-20],r9
80002b04:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
80002b08:	30 08       	mov	r8,0
80002b0a:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
80002b0e:	7c 18       	ld.w	r8,lr[0x4]
80002b10:	5c 58       	castu.b	r8
80002b12:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002b16:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b1e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80002b22:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
80002b26:	7c 08       	ld.w	r8,lr[0x0]
80002b28:	5c 58       	castu.b	r8
80002b2a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b2e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b36:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80002b3a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
80002b3e:	7c 18       	ld.w	r8,lr[0x4]
80002b40:	5c 58       	castu.b	r8
80002b42:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002b46:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b4e:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80002b52:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
80002b56:	7c 08       	ld.w	r8,lr[0x0]
80002b58:	5c 58       	castu.b	r8
80002b5a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b5e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b66:	f1 d9 d1 e1 	bfins	r8,r9,0xf,0x1
80002b6a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
80002b6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002b72:	5c 58       	castu.b	r8
80002b74:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002b78:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b80:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
80002b84:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
80002b88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b8c:	5c 58       	castu.b	r8
80002b8e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b92:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b9a:	f1 d9 d2 e1 	bfins	r8,r9,0x17,0x1
80002b9e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
80002ba2:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002ba6:	5c 58       	castu.b	r8
80002ba8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002bac:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002bb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bb4:	f1 d9 d3 03 	bfins	r8,r9,0x18,0x3
80002bb8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
80002bbc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002bc0:	5c 58       	castu.b	r8
80002bc2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002bc6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002bca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bce:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80002bd2:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->cksel = u_avr32_pm_cksel.cksel;
80002bd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002bde:	91 19       	st.w	r8[0x4],r9

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
80002be0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002be4:	71 58       	ld.w	r8,r8[0x54]
80002be6:	e2 18 00 20 	andl	r8,0x20,COH
80002bea:	cf b0       	breq	80002be0 <pm_cksel+0xf8>
}
80002bec:	2f ad       	sub	sp,-24
80002bee:	e3 cd 80 80 	ldm	sp++,r7,pc

80002bf2 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002bf2:	eb cd 40 80 	pushm	r7,lr
80002bf6:	1a 97       	mov	r7,sp
80002bf8:	20 6d       	sub	sp,24
80002bfa:	ee ce ff f8 	sub	lr,r7,-8
80002bfe:	ef 4c ff f8 	st.w	r7[-8],r12
80002c02:	ef 4b ff f4 	st.w	r7[-12],r11
80002c06:	ef 4a ff f0 	st.w	r7[-16],r10
80002c0a:	ef 49 ff ec 	st.w	r7[-20],r9
80002c0e:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80002c12:	30 08       	mov	r8,0
80002c14:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_pll.PLL.pllosc   = osc;
80002c18:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002c1c:	5c 58       	castu.b	r8
80002c1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002c22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002c26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c2a:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80002c2e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.plldiv   = div;
80002c32:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002c36:	5c 58       	castu.b	r8
80002c38:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002c3c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c44:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
80002c48:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllmul   = mul;
80002c4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c50:	5c 58       	castu.b	r8
80002c52:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002c56:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002c5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c5e:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80002c62:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllcount = lockcount;
80002c66:	7c 08       	ld.w	r8,lr[0x0]
80002c68:	5c 58       	castu.b	r8
80002c6a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002c6e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c76:	f1 d9 d3 06 	bfins	r8,r9,0x18,0x6
80002c7a:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002c7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c82:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c8a:	2f 88       	sub	r8,-8
80002c8c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002c90:	2f ad       	sub	sp,-24
80002c92:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c96 <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
80002c96:	eb cd 40 80 	pushm	r7,lr
80002c9a:	1a 97       	mov	r7,sp
80002c9c:	20 6d       	sub	sp,24
80002c9e:	ef 4c ff f8 	st.w	r7[-8],r12
80002ca2:	ef 4b ff f4 	st.w	r7[-12],r11
80002ca6:	ef 4a ff f0 	st.w	r7[-16],r10
80002caa:	ef 49 ff ec 	st.w	r7[-20],r9
80002cae:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002cb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002cb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cba:	2f 88       	sub	r8,-8
80002cbc:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80002cc0:	30 08       	mov	r8,0
80002cc2:	ef 48 ff fc 	st.w	r7[-4],r8
80002cc6:	ef 49 ff fc 	st.w	r7[-4],r9
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002cca:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002cce:	5c 58       	castu.b	r8
80002cd0:	a1 78       	lsl	r8,0x1
80002cd2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002cd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002cda:	5c 58       	castu.b	r8
80002cdc:	f3 e8 10 08 	or	r8,r9,r8
80002ce0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ce4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002ce8:	5c 58       	castu.b	r8
80002cea:	a3 68       	lsl	r8,0x2
80002cec:	5c 58       	castu.b	r8
80002cee:	f3 e8 10 08 	or	r8,r9,r8
80002cf2:	5c 58       	castu.b	r8
80002cf4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002cf8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002cfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d00:	f1 d9 d0 43 	bfins	r8,r9,0x2,0x3
80002d04:	ef 48 ff fc 	st.w	r7[-4],r8
  pm->pll[pll] = u_avr32_pm_pll.pll;
80002d08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d0c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002d10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d14:	2f 88       	sub	r8,-8
80002d16:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002d1a:	2f ad       	sub	sp,-24
80002d1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d20 <pm_pll_enable>:
}


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
80002d20:	eb cd 40 80 	pushm	r7,lr
80002d24:	1a 97       	mov	r7,sp
80002d26:	20 2d       	sub	sp,8
80002d28:	ef 4c ff fc 	st.w	r7[-4],r12
80002d2c:	ef 4b ff f8 	st.w	r7[-8],r11
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
80002d30:	ee fb ff f8 	ld.w	r11,r7[-8]
80002d34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d3c:	2f 88       	sub	r8,-8
80002d3e:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80002d42:	10 9a       	mov	r10,r8
80002d44:	a1 aa       	sbr	r10,0x0
80002d46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d4a:	f6 c8 ff f8 	sub	r8,r11,-8
80002d4e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002d52:	2f ed       	sub	sp,-8
80002d54:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d58 <pm_wait_for_pll0_locked>:
  pm->pll[pll] &= ~AVR32_PM_PLLEN_MASK;
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
80002d58:	eb cd 40 80 	pushm	r7,lr
80002d5c:	1a 97       	mov	r7,sp
80002d5e:	20 1d       	sub	sp,4
80002d60:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
80002d64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d68:	71 58       	ld.w	r8,r8[0x54]
80002d6a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d6e:	cf b0       	breq	80002d64 <pm_wait_for_pll0_locked+0xc>
}
80002d70:	2f fd       	sub	sp,-4
80002d72:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d76 <pm_switch_to_clock>:
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK1_MASK));
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
80002d76:	eb cd 40 80 	pushm	r7,lr
80002d7a:	1a 97       	mov	r7,sp
80002d7c:	20 3d       	sub	sp,12
80002d7e:	ef 4c ff f8 	st.w	r7[-8],r12
80002d82:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d8a:	70 09       	ld.w	r9,r8[0x0]
80002d8c:	30 08       	mov	r8,0
80002d8e:	ef 48 ff fc 	st.w	r7[-4],r8
80002d92:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002d96:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d9a:	5c 58       	castu.b	r8
80002d9c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002da0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002da4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002da8:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dac:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002db0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002db4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002db8:	91 09       	st.w	r8[0x0],r9
}
80002dba:	2f dd       	sub	sp,-12
80002dbc:	e3 cd 80 80 	ldm	sp++,r7,pc

80002dc0 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002dc0:	eb cd 40 80 	pushm	r7,lr
80002dc4:	1a 97       	mov	r7,sp
80002dc6:	20 3d       	sub	sp,12
80002dc8:	ef 4c ff fc 	st.w	r7[-4],r12
80002dcc:	ef 4b ff f8 	st.w	r7[-8],r11
80002dd0:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002dd4:	ee fb ff f8 	ld.w	r11,r7[-8]
80002dd8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002ddc:	f0 1f 00 08 	mcall	80002dfc <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002de0:	ee fb ff f4 	ld.w	r11,r7[-12]
80002de4:	ee fc ff fc 	ld.w	r12,r7[-4]
80002de8:	f0 1f 00 06 	mcall	80002e00 <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002dec:	30 1b       	mov	r11,1
80002dee:	ee fc ff fc 	ld.w	r12,r7[-4]
80002df2:	f0 1f 00 05 	mcall	80002e04 <pm_switch_to_osc0+0x44>
}
80002df6:	2f dd       	sub	sp,-12
80002df8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	29 b8       	sub	r8,-101
80002e00:	80 00       	ld.sh	r0,r0[0x0]
80002e02:	2a 3c       	sub	r12,-93
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	2d 76       	sub	r6,-41

80002e08 <pm_configure_clocks>:

#define PM_MAX_MUL                ((1 << AVR32_PM_PLL0_PLLMUL_SIZE) - 1)


int pm_configure_clocks(pm_freq_param_t *param)
{
80002e08:	eb cd 40 80 	pushm	r7,lr
80002e0c:	1a 97       	mov	r7,sp
80002e0e:	20 cd       	sub	sp,48
80002e10:	ef 4c ff d4 	st.w	r7[-44],r12
  //  12    8   1  108     1     54    27
  //  12    9   1  120     1     60    15
  //  12    9   1  120     1     60    30
  //  12   10   1  132     1     66    16.5
  //
  unsigned long in_cpu_f  = param->cpu_f;
80002e14:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002e18:	70 08       	ld.w	r8,r8[0x0]
80002e1a:	ef 48 ff d8 	st.w	r7[-40],r8
  unsigned long in_osc0_f = param->osc0_f;
80002e1e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002e22:	70 28       	ld.w	r8,r8[0x8]
80002e24:	ef 48 ff dc 	st.w	r7[-36],r8
  unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
80002e28:	30 08       	mov	r8,0
80002e2a:	ef 48 ff e8 	st.w	r7[-24],r8
80002e2e:	30 08       	mov	r8,0
80002e30:	ef 48 ff ec 	st.w	r7[-20],r8
80002e34:	30 08       	mov	r8,0
80002e36:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned long pll_freq, rest;
  Bool b_div2_pba, b_div2_cpu;

  // Switch to external Oscillator 0
  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
80002e3a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002e3e:	70 38       	ld.w	r8,r8[0xc]
80002e40:	10 9a       	mov	r10,r8
80002e42:	ee fb ff dc 	ld.w	r11,r7[-36]
80002e46:	fe 7c 0c 00 	mov	r12,-62464
80002e4a:	f0 1f 00 b0 	mcall	80003108 <pm_configure_clocks+0x300>

  // Start with CPU freq config
  if (in_cpu_f == in_osc0_f)
80002e4e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002e52:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002e56:	10 39       	cp.w	r9,r8
80002e58:	c0 f1       	brne	80002e76 <pm_configure_clocks+0x6e>
  {
    param->cpu_f = in_osc0_f;
80002e5a:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002e5e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002e62:	93 08       	st.w	r9[0x0],r8
    param->pba_f = in_osc0_f;
80002e64:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002e68:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002e6c:	93 18       	st.w	r9[0x4],r8
    return PM_FREQ_STATUS_OK;
80002e6e:	30 09       	mov	r9,0
80002e70:	ef 49 ff d0 	st.w	r7[-48],r9
80002e74:	c4 49       	rjmp	800030fc <pm_configure_clocks+0x2f4>
  else if (in_cpu_f < in_osc0_f)
  {
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;
80002e76:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002e7a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002e7e:	f2 08 0d 08 	divu	r8,r9,r8
80002e82:	12 98       	mov	r8,r9
80002e84:	ef 48 ff f8 	st.w	r7[-8],r8

  for (div = 1; div < 32; div++)
80002e88:	30 18       	mov	r8,1
80002e8a:	ef 48 ff e4 	st.w	r7[-28],r8
80002e8e:	c1 28       	rjmp	80002eb2 <pm_configure_clocks+0xaa>
  {
    if ((div * rest) % in_osc0_f == 0)
80002e90:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002e94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e98:	b1 39       	mul	r9,r8
80002e9a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002e9e:	f2 08 0d 08 	divu	r8,r9,r8
80002ea2:	12 98       	mov	r8,r9
80002ea4:	58 08       	cp.w	r8,0
80002ea6:	c0 b0       	breq	80002ebc <pm_configure_clocks+0xb4>
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;

  for (div = 1; div < 32; div++)
80002ea8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002eac:	2f f8       	sub	r8,-1
80002eae:	ef 48 ff e4 	st.w	r7[-28],r8
80002eb2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002eb6:	59 f8       	cp.w	r8,31
80002eb8:	fe 98 ff ec 	brls	80002e90 <pm_configure_clocks+0x88>
  {
    if ((div * rest) % in_osc0_f == 0)
      break;
  }
  if (div == 32)
80002ebc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002ec0:	e0 48 00 20 	cp.w	r8,32
80002ec4:	c0 51       	brne	80002ece <pm_configure_clocks+0xc6>
    return PM_FREQ_STATUS_FAIL;
80002ec6:	3f f8       	mov	r8,-1
80002ec8:	ef 48 ff d0 	st.w	r7[-48],r8
80002ecc:	c1 89       	rjmp	800030fc <pm_configure_clocks+0x2f4>

  mul = (in_cpu_f * div) / in_osc0_f;
80002ece:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002ed2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002ed6:	b1 39       	mul	r9,r8
80002ed8:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002edc:	f2 08 0d 08 	divu	r8,r9,r8
80002ee0:	ef 48 ff e0 	st.w	r7[-32],r8

  if (mul > PM_MAX_MUL)
80002ee4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002ee8:	58 f8       	cp.w	r8,15
80002eea:	e0 88 00 10 	brls	80002f0a <pm_configure_clocks+0x102>
    return PM_FREQ_STATUS_FAIL;
80002eee:	3f f9       	mov	r9,-1
80002ef0:	ef 49 ff d0 	st.w	r7[-48],r9
80002ef4:	c0 49       	rjmp	800030fc <pm_configure_clocks+0x2f4>

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
  {
    div /= 2;
80002ef6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002efa:	a1 98       	lsr	r8,0x1
80002efc:	ef 48 ff e4 	st.w	r7[-28],r8
    div2_cpu++;
80002f00:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f04:	2f f8       	sub	r8,-1
80002f06:	ef 48 ff ec 	st.w	r7[-20],r8

  if (mul > PM_MAX_MUL)
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80002f0a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002f0e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f12:	cf 20       	breq	80002ef6 <pm_configure_clocks+0xee>
80002f14:	c1 18       	rjmp	80002f36 <pm_configure_clocks+0x12e>
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
  {
    if (2 * mul > PM_MAX_MUL)
80002f16:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002f1a:	a1 78       	lsl	r8,0x1
80002f1c:	58 f8       	cp.w	r8,15
80002f1e:	e0 8b 00 1f 	brhi	80002f5c <pm_configure_clocks+0x154>
      break;
    mul *= 2;
80002f22:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002f26:	a1 78       	lsl	r8,0x1
80002f28:	ef 48 ff e0 	st.w	r7[-32],r8
    div2_cpu++;
80002f2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f30:	2f f8       	sub	r8,-1
80002f32:	ef 48 ff ec 	st.w	r7[-20],r8

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80002f36:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f3a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002f3e:	f2 08 02 48 	mul	r8,r9,r8
80002f42:	f0 09 15 01 	lsl	r9,r8,0x1
80002f46:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002f4a:	f2 08 0d 08 	divu	r8,r9,r8
80002f4e:	e0 69 1b ff 	mov	r9,7167
80002f52:	ea 19 0e 4e 	orh	r9,0xe4e
80002f56:	12 38       	cp.w	r8,r9
80002f58:	fe 98 ff df 	brls	80002f16 <pm_configure_clocks+0x10e>
      break;
    mul *= 2;
    div2_cpu++;
  }

  if (div2_cpu != 0)
80002f5c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f60:	58 08       	cp.w	r8,0
80002f62:	c0 90       	breq	80002f74 <pm_configure_clocks+0x16c>
  {
    div2_cpu--;
80002f64:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f68:	20 18       	sub	r8,1
80002f6a:	ef 48 ff ec 	st.w	r7[-20],r8
    div2_en = 1;
80002f6e:	30 18       	mov	r8,1
80002f70:	ef 48 ff e8 	st.w	r7[-24],r8
  }

  pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
80002f74:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f78:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002f7c:	f2 08 02 4a 	mul	r10,r9,r8
80002f80:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002f84:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002f88:	f0 09 09 48 	lsl	r8,r8,r9
80002f8c:	f4 08 0d 08 	divu	r8,r10,r8
80002f90:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update real CPU Frequency
  param->cpu_f = pll_freq / (1 << div2_cpu);
80002f94:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002f98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f9c:	f0 09 0a 49 	lsr	r9,r8,r9
80002fa0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fa4:	91 09       	st.w	r8[0x0],r9
  mul--;
80002fa6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002faa:	20 18       	sub	r8,1
80002fac:	ef 48 ff e0 	st.w	r7[-32],r8

  pm_pll_setup(&AVR32_PM
80002fb0:	31 08       	mov	r8,16
80002fb2:	1a d8       	st.w	--sp,r8
80002fb4:	30 08       	mov	r8,0
80002fb6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002fba:	ee fa ff e0 	ld.w	r10,r7[-32]
80002fbe:	30 0b       	mov	r11,0
80002fc0:	fe 7c 0c 00 	mov	r12,-62464
80002fc4:	f0 1f 00 52 	mcall	8000310c <pm_configure_clocks+0x304>
80002fc8:	2f fd       	sub	sp,-4
  , div // div
  , 0   // osc
  , 16  // lockcount
  );

  pm_pll_set_option(&AVR32_PM
80002fca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002fce:	e0 69 67 ff 	mov	r9,26623
80002fd2:	ea 19 09 89 	orh	r9,0x989
80002fd6:	12 38       	cp.w	r8,r9
80002fd8:	5f 8a       	srls	r10
80002fda:	30 08       	mov	r8,0
80002fdc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002fe0:	30 0b       	mov	r11,0
80002fe2:	fe 7c 0c 00 	mov	r12,-62464
80002fe6:	f0 1f 00 4b 	mcall	80003110 <pm_configure_clocks+0x308>
  , (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0 // pll_freq
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
80002fea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002fee:	ef 48 ff f8 	st.w	r7[-8],r8
80002ff2:	c1 68       	rjmp	8000301e <pm_configure_clocks+0x216>
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
         rest != param->pba_f)
  {
    div2_pba++;
80002ff4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ff8:	2f f8       	sub	r8,-1
80002ffa:	ef 48 ff f0 	st.w	r7[-16],r8
    rest = pll_freq / (1 << div2_pba);
80002ffe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003002:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003006:	f0 09 0a 48 	lsr	r8,r8,r9
8000300a:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rest < param->pba_f)
8000300e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003012:	70 19       	ld.w	r9,r8[0x4]
80003014:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003018:	10 39       	cp.w	r9,r8
8000301a:	e0 8b 00 12 	brhi	8000303e <pm_configure_clocks+0x236>
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
8000301e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003022:	e0 69 14 80 	mov	r9,5248
80003026:	ea 19 03 ef 	orh	r9,0x3ef
8000302a:	12 38       	cp.w	r8,r9
8000302c:	fe 9b ff e4 	brhi	80002ff4 <pm_configure_clocks+0x1ec>
80003030:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003034:	70 19       	ld.w	r9,r8[0x4]
80003036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000303a:	10 39       	cp.w	r9,r8
8000303c:	cd c1       	brne	80002ff4 <pm_configure_clocks+0x1ec>
    if (rest < param->pba_f)
      break;
  }

  // Update real PBA Frequency
  param->pba_f = pll_freq / (1 << div2_pba);
8000303e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003042:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003046:	f0 09 0a 49 	lsr	r9,r8,r9
8000304a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000304e:	91 19       	st.w	r8[0x4],r9

  // Enable PLL0
  pm_pll_enable(&AVR32_PM, 0);
80003050:	30 0b       	mov	r11,0
80003052:	fe 7c 0c 00 	mov	r12,-62464
80003056:	f0 1f 00 30 	mcall	80003114 <pm_configure_clocks+0x30c>

  // Wait for PLL0 locked
  pm_wait_for_pll0_locked(&AVR32_PM);
8000305a:	fe 7c 0c 00 	mov	r12,-62464
8000305e:	f0 1f 00 2f 	mcall	80003118 <pm_configure_clocks+0x310>

  if (div2_cpu)
80003062:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003066:	58 08       	cp.w	r8,0
80003068:	c0 a0       	breq	8000307c <pm_configure_clocks+0x274>
  {
    b_div2_cpu = TRUE;
8000306a:	30 18       	mov	r8,1
8000306c:	ef 68 ff ff 	st.b	r7[-1],r8
    div2_cpu--;
80003070:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003074:	20 18       	sub	r8,1
80003076:	ef 48 ff ec 	st.w	r7[-20],r8
8000307a:	c0 48       	rjmp	80003082 <pm_configure_clocks+0x27a>
  }
  else
    b_div2_cpu = FALSE;
8000307c:	30 08       	mov	r8,0
8000307e:	ef 68 ff ff 	st.b	r7[-1],r8

  if (div2_pba)
80003082:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003086:	58 08       	cp.w	r8,0
80003088:	c0 a0       	breq	8000309c <pm_configure_clocks+0x294>
  {
    b_div2_pba = TRUE;
8000308a:	30 18       	mov	r8,1
8000308c:	ef 68 ff fe 	st.b	r7[-2],r8
    div2_pba--;
80003090:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003094:	20 18       	sub	r8,1
80003096:	ef 48 ff f0 	st.w	r7[-16],r8
8000309a:	c0 48       	rjmp	800030a2 <pm_configure_clocks+0x29a>
  }
  else
    b_div2_pba = FALSE;
8000309c:	30 08       	mov	r8,0
8000309e:	ef 68 ff fe 	st.b	r7[-2],r8

  pm_cksel(&AVR32_PM
800030a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800030a6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800030aa:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800030ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800030b2:	1a d8       	st.w	--sp,r8
800030b4:	1a d9       	st.w	--sp,r9
800030b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800030ba:	14 99       	mov	r9,r10
800030bc:	ee fa ff f0 	ld.w	r10,r7[-16]
800030c0:	fe 7c 0c 00 	mov	r12,-62464
800030c4:	f0 1f 00 16 	mcall	8000311c <pm_configure_clocks+0x314>
800030c8:	2f ed       	sub	sp,-8
  , b_div2_pba, div2_pba // PBA
  , b_div2_cpu, div2_cpu // PBB
  , b_div2_cpu, div2_cpu // HSB
  );

  if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
800030ca:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030ce:	70 08       	ld.w	r8,r8[0x0]
800030d0:	e0 69 8a 40 	mov	r9,35392
800030d4:	ea 19 01 f7 	orh	r9,0x1f7
800030d8:	12 38       	cp.w	r8,r9
800030da:	e0 88 00 06 	brls	800030e6 <pm_configure_clocks+0x2de>
  {
    flashc_set_wait_state(1);
800030de:	30 1c       	mov	r12,1
800030e0:	f0 1f 00 10 	mcall	80003120 <pm_configure_clocks+0x318>
800030e4:	c0 48       	rjmp	800030ec <pm_configure_clocks+0x2e4>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }
  else
  {
    flashc_set_wait_state(0);
800030e6:	30 0c       	mov	r12,0
800030e8:	f0 1f 00 0e 	mcall	80003120 <pm_configure_clocks+0x318>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }

  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
800030ec:	30 2b       	mov	r11,2
800030ee:	fe 7c 0c 00 	mov	r12,-62464
800030f2:	f0 1f 00 0d 	mcall	80003124 <pm_configure_clocks+0x31c>

  return PM_FREQ_STATUS_OK;
800030f6:	30 08       	mov	r8,0
800030f8:	ef 48 ff d0 	st.w	r7[-48],r8
800030fc:	ee f8 ff d0 	ld.w	r8,r7[-48]
}
80003100:	10 9c       	mov	r12,r8
80003102:	2f 4d       	sub	sp,-48
80003104:	e3 cd 80 80 	ldm	sp++,r7,pc
80003108:	80 00       	ld.sh	r0,r0[0x0]
8000310a:	2d c0       	sub	r0,-36
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	2b f2       	sub	r2,-65
80003110:	80 00       	ld.sh	r0,r0[0x0]
80003112:	2c 96       	sub	r6,-55
80003114:	80 00       	ld.sh	r0,r0[0x0]
80003116:	2d 20       	sub	r0,-46
80003118:	80 00       	ld.sh	r0,r0[0x0]
8000311a:	2d 58       	sub	r8,-43
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	2a e8       	sub	r8,-82
80003120:	80 00       	ld.sh	r0,r0[0x0]
80003122:	31 28       	mov	r8,18
80003124:	80 00       	ld.sh	r0,r0[0x0]
80003126:	2d 76       	sub	r6,-41

80003128 <flashc_set_wait_state>:
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80003128:	eb cd 40 80 	pushm	r7,lr
8000312c:	1a 97       	mov	r7,sp
8000312e:	20 2d       	sub	sp,8
80003130:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003134:	fe 68 14 00 	mov	r8,-125952
80003138:	70 09       	ld.w	r9,r8[0x0]
8000313a:	30 08       	mov	r8,0
8000313c:	ef 48 ff fc 	st.w	r7[-4],r8
80003140:	ef 49 ff fc 	st.w	r7[-4],r9
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80003144:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003148:	5c 58       	castu.b	r8
8000314a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000314e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003156:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000315a:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000315e:	fe 69 14 00 	mov	r9,-125952
80003162:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003166:	93 08       	st.w	r9[0x0],r8
}
80003168:	2f ed       	sub	sp,-8
8000316a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000316e:	d7 03       	nop

80003170 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, unsigned int size)
{
80003170:	eb cd 40 80 	pushm	r7,lr
80003174:	1a 97       	mov	r7,sp
80003176:	20 4d       	sub	sp,16
80003178:	ef 4c ff f4 	st.w	r7[-12],r12
8000317c:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80003180:	30 08       	mov	r8,0
80003182:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int i;

  for (i = 0; i < size; i++)
80003186:	30 08       	mov	r8,0
80003188:	ef 48 ff fc 	st.w	r7[-4],r8
8000318c:	c1 c8       	rjmp	800031c4 <gpio_enable_module+0x54>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000318e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003192:	11 98       	ld.ub	r8,r8[0x1]
80003194:	10 99       	mov	r9,r8
80003196:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000319a:	11 88       	ld.ub	r8,r8[0x0]
8000319c:	12 9b       	mov	r11,r9
8000319e:	10 9c       	mov	r12,r8
800031a0:	f0 1f 00 0f 	mcall	800031dc <gpio_enable_module+0x6c>
800031a4:	18 99       	mov	r9,r12
800031a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031aa:	12 48       	or	r8,r9
800031ac:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
800031b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031b4:	2f e8       	sub	r8,-2
800031b6:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, unsigned int size)
{
  int status = GPIO_SUCCESS;
  unsigned int i;

  for (i = 0; i < size; i++)
800031ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031be:	2f f8       	sub	r8,-1
800031c0:	ef 48 ff fc 	st.w	r7[-4],r8
800031c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800031cc:	10 39       	cp.w	r9,r8
800031ce:	ce 03       	brcs	8000318e <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800031d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800031d4:	10 9c       	mov	r12,r8
800031d6:	2f cd       	sub	sp,-16
800031d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	31 e0       	mov	r0,30

800031e0 <gpio_enable_module_pin>:


int gpio_enable_module_pin(unsigned int pin, unsigned int function)
{
800031e0:	eb cd 40 80 	pushm	r7,lr
800031e4:	1a 97       	mov	r7,sp
800031e6:	20 5d       	sub	sp,20
800031e8:	ef 4c ff f8 	st.w	r7[-8],r12
800031ec:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800031f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031f4:	a5 98       	lsr	r8,0x5
800031f6:	a9 68       	lsl	r8,0x8
800031f8:	e0 28 f0 00 	sub	r8,61440
800031fc:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80003200:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003204:	ef 48 ff ec 	st.w	r7[-20],r8
80003208:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000320c:	58 18       	cp.w	r8,1
8000320e:	c2 50       	breq	80003258 <gpio_enable_module_pin+0x78>
80003210:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003214:	58 18       	cp.w	r8,1
80003216:	c0 a3       	brcs	8000322a <gpio_enable_module_pin+0x4a>
80003218:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000321c:	58 28       	cp.w	r8,2
8000321e:	c3 40       	breq	80003286 <gpio_enable_module_pin+0xa6>
80003220:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003224:	58 38       	cp.w	r8,3
80003226:	c4 70       	breq	800032b4 <gpio_enable_module_pin+0xd4>
80003228:	c5 d8       	rjmp	800032e2 <gpio_enable_module_pin+0x102>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000322a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000322e:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003232:	30 18       	mov	r8,1
80003234:	f0 09 09 48 	lsl	r8,r8,r9
80003238:	10 99       	mov	r9,r8
8000323a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000323e:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80003240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003244:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003248:	30 18       	mov	r8,1
8000324a:	f0 09 09 48 	lsl	r8,r8,r9
8000324e:	10 99       	mov	r9,r8
80003250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003254:	91 a9       	st.w	r8[0x28],r9
80003256:	c4 a8       	rjmp	800032ea <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80003258:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000325c:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003260:	30 18       	mov	r8,1
80003262:	f0 09 09 48 	lsl	r8,r8,r9
80003266:	10 99       	mov	r9,r8
80003268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000326c:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000326e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003272:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003276:	30 18       	mov	r8,1
80003278:	f0 09 09 48 	lsl	r8,r8,r9
8000327c:	10 99       	mov	r9,r8
8000327e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003282:	91 a9       	st.w	r8[0x28],r9
80003284:	c3 38       	rjmp	800032ea <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80003286:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000328a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000328e:	30 18       	mov	r8,1
80003290:	f0 09 09 48 	lsl	r8,r8,r9
80003294:	10 99       	mov	r9,r8
80003296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000329a:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000329c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032a0:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800032a4:	30 18       	mov	r8,1
800032a6:	f0 09 09 48 	lsl	r8,r8,r9
800032aa:	10 99       	mov	r9,r8
800032ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032b0:	91 99       	st.w	r8[0x24],r9
800032b2:	c1 c8       	rjmp	800032ea <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800032b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032b8:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800032bc:	30 18       	mov	r8,1
800032be:	f0 09 09 48 	lsl	r8,r8,r9
800032c2:	10 99       	mov	r9,r8
800032c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032c8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800032ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032ce:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800032d2:	30 18       	mov	r8,1
800032d4:	f0 09 09 48 	lsl	r8,r8,r9
800032d8:	10 99       	mov	r9,r8
800032da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032de:	91 99       	st.w	r8[0x24],r9
800032e0:	c0 58       	rjmp	800032ea <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
800032e2:	30 18       	mov	r8,1
800032e4:	ef 48 ff f0 	st.w	r7[-16],r8
800032e8:	c0 f8       	rjmp	80003306 <gpio_enable_module_pin+0x126>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800032ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032ee:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800032f2:	30 18       	mov	r8,1
800032f4:	f0 09 09 48 	lsl	r8,r8,r9
800032f8:	10 99       	mov	r9,r8
800032fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032fe:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80003300:	30 08       	mov	r8,0
80003302:	ef 48 ff f0 	st.w	r7[-16],r8
80003306:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000330a:	10 9c       	mov	r12,r8
8000330c:	2f bd       	sub	sp,-20
8000330e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003312 <gpio_enable_gpio_pin>:
  }
}


void gpio_enable_gpio_pin(unsigned int pin)
{
80003312:	eb cd 40 80 	pushm	r7,lr
80003316:	1a 97       	mov	r7,sp
80003318:	20 2d       	sub	sp,8
8000331a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000331e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003322:	a5 98       	lsr	r8,0x5
80003324:	a9 68       	lsl	r8,0x8
80003326:	e0 28 f0 00 	sub	r8,61440
8000332a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
8000332e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003332:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003336:	30 18       	mov	r8,1
80003338:	f0 09 09 48 	lsl	r8,r8,r9
8000333c:	10 99       	mov	r9,r8
8000333e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003342:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80003346:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000334a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000334e:	30 18       	mov	r8,1
80003350:	f0 09 09 48 	lsl	r8,r8,r9
80003354:	10 99       	mov	r9,r8
80003356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000335a:	91 19       	st.w	r8[0x4],r9
}
8000335c:	2f ed       	sub	sp,-8
8000335e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003362 <gpio_set_gpio_pin>:
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
}


void gpio_set_gpio_pin(unsigned int pin)
{
80003362:	eb cd 40 80 	pushm	r7,lr
80003366:	1a 97       	mov	r7,sp
80003368:	20 2d       	sub	sp,8
8000336a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000336e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003372:	a5 98       	lsr	r8,0x5
80003374:	a9 68       	lsl	r8,0x8
80003376:	e0 28 f0 00 	sub	r8,61440
8000337a:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000337e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003382:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003386:	30 18       	mov	r8,1
80003388:	f0 09 09 48 	lsl	r8,r8,r9
8000338c:	10 99       	mov	r9,r8
8000338e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003392:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80003396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000339a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000339e:	30 18       	mov	r8,1
800033a0:	f0 09 09 48 	lsl	r8,r8,r9
800033a4:	10 99       	mov	r9,r8
800033a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033aa:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800033ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033b2:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800033b6:	30 18       	mov	r8,1
800033b8:	f0 09 09 48 	lsl	r8,r8,r9
800033bc:	10 99       	mov	r9,r8
800033be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033c2:	91 19       	st.w	r8[0x4],r9
}
800033c4:	2f ed       	sub	sp,-8
800033c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800033ca <gpio_clr_gpio_pin>:


void gpio_clr_gpio_pin(unsigned int pin)
{
800033ca:	eb cd 40 80 	pushm	r7,lr
800033ce:	1a 97       	mov	r7,sp
800033d0:	20 2d       	sub	sp,8
800033d2:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800033d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033da:	a5 98       	lsr	r8,0x5
800033dc:	a9 68       	lsl	r8,0x8
800033de:	e0 28 f0 00 	sub	r8,61440
800033e2:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800033e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033ea:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800033ee:	30 18       	mov	r8,1
800033f0:	f0 09 09 48 	lsl	r8,r8,r9
800033f4:	10 99       	mov	r9,r8
800033f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033fa:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800033fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003402:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003406:	30 18       	mov	r8,1
80003408:	f0 09 09 48 	lsl	r8,r8,r9
8000340c:	10 99       	mov	r9,r8
8000340e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003412:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80003416:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000341a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000341e:	30 18       	mov	r8,1
80003420:	f0 09 09 48 	lsl	r8,r8,r9
80003424:	10 99       	mov	r9,r8
80003426:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000342a:	91 19       	st.w	r8[0x4],r9
}
8000342c:	2f ed       	sub	sp,-8
8000342e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003432 <gpio_enable_pin_glitch_filter>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}


void gpio_enable_pin_glitch_filter(unsigned int pin)
{
80003432:	eb cd 40 80 	pushm	r7,lr
80003436:	1a 97       	mov	r7,sp
80003438:	20 2d       	sub	sp,8
8000343a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000343e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003442:	a5 98       	lsr	r8,0x5
80003444:	a9 68       	lsl	r8,0x8
80003446:	e0 28 f0 00 	sub	r8,61440
8000344a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gfers = 1 << (pin & 0x1F);
8000344e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003452:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003456:	30 18       	mov	r8,1
80003458:	f0 09 09 48 	lsl	r8,r8,r9
8000345c:	10 99       	mov	r9,r8
8000345e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003462:	f1 49 00 c4 	st.w	r8[196],r9
}
80003466:	2f ed       	sub	sp,-8
80003468:	e3 cd 80 80 	ldm	sp++,r7,pc

8000346c <gpio_configure_edge_detector>:
 *             or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static int gpio_configure_edge_detector(unsigned int pin, unsigned int mode)
{
8000346c:	eb cd 40 80 	pushm	r7,lr
80003470:	1a 97       	mov	r7,sp
80003472:	20 5d       	sub	sp,20
80003474:	ef 4c ff f8 	st.w	r7[-8],r12
80003478:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000347c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003480:	a5 98       	lsr	r8,0x5
80003482:	a9 68       	lsl	r8,0x8
80003484:	e0 28 f0 00 	sub	r8,61440
80003488:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Configure the edge detector.
  switch (mode)
8000348c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003490:	ef 48 ff ec 	st.w	r7[-20],r8
80003494:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003498:	58 18       	cp.w	r8,1
8000349a:	c2 30       	breq	800034e0 <gpio_configure_edge_detector+0x74>
8000349c:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034a0:	58 18       	cp.w	r8,1
800034a2:	c0 63       	brcs	800034ae <gpio_configure_edge_detector+0x42>
800034a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034a8:	58 28       	cp.w	r8,2
800034aa:	c3 40       	breq	80003512 <gpio_configure_edge_detector+0xa6>
800034ac:	c4 c8       	rjmp	80003544 <gpio_configure_edge_detector+0xd8>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800034ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034b2:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800034b6:	30 18       	mov	r8,1
800034b8:	f0 09 09 48 	lsl	r8,r8,r9
800034bc:	10 99       	mov	r9,r8
800034be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034c2:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800034c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034ca:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800034ce:	30 18       	mov	r8,1
800034d0:	f0 09 09 48 	lsl	r8,r8,r9
800034d4:	10 99       	mov	r9,r8
800034d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034da:	f1 49 00 b8 	st.w	r8[184],r9
800034de:	c3 78       	rjmp	8000354c <gpio_configure_edge_detector+0xe0>
    break;

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
800034e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034e4:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800034e8:	30 18       	mov	r8,1
800034ea:	f0 09 09 48 	lsl	r8,r8,r9
800034ee:	10 99       	mov	r9,r8
800034f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034f4:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800034f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034fc:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003500:	30 18       	mov	r8,1
80003502:	f0 09 09 48 	lsl	r8,r8,r9
80003506:	10 99       	mov	r9,r8
80003508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000350c:	f1 49 00 b8 	st.w	r8[184],r9
80003510:	c1 e8       	rjmp	8000354c <gpio_configure_edge_detector+0xe0>
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80003512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003516:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000351a:	30 18       	mov	r8,1
8000351c:	f0 09 09 48 	lsl	r8,r8,r9
80003520:	10 99       	mov	r9,r8
80003522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003526:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
8000352a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000352e:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003532:	30 18       	mov	r8,1
80003534:	f0 09 09 48 	lsl	r8,r8,r9
80003538:	10 99       	mov	r9,r8
8000353a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000353e:	f1 49 00 b4 	st.w	r8[180],r9
80003542:	c0 58       	rjmp	8000354c <gpio_configure_edge_detector+0xe0>
    break;

  default:
    return GPIO_INVALID_ARGUMENT;
80003544:	30 18       	mov	r8,1
80003546:	ef 48 ff f0 	st.w	r7[-16],r8
8000354a:	c0 48       	rjmp	80003552 <gpio_configure_edge_detector+0xe6>
  }

  return GPIO_SUCCESS;
8000354c:	30 08       	mov	r8,0
8000354e:	ef 48 ff f0 	st.w	r7[-16],r8
80003552:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80003556:	10 9c       	mov	r12,r8
80003558:	2f bd       	sub	sp,-20
8000355a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000355e:	d7 03       	nop

80003560 <gpio_enable_pin_interrupt>:


int gpio_enable_pin_interrupt(unsigned int pin, unsigned int mode)
{
80003560:	eb cd 40 80 	pushm	r7,lr
80003564:	1a 97       	mov	r7,sp
80003566:	20 4d       	sub	sp,16
80003568:	ef 4c ff f8 	st.w	r7[-8],r12
8000356c:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80003570:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003574:	a5 98       	lsr	r8,0x5
80003576:	a9 68       	lsl	r8,0x8
80003578:	e0 28 f0 00 	sub	r8,61440
8000357c:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80003580:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003584:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003588:	30 18       	mov	r8,1
8000358a:	f0 09 09 48 	lsl	r8,r8,r9
8000358e:	10 99       	mov	r9,r8
80003590:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003594:	f1 49 00 c4 	st.w	r8[196],r9

  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
80003598:	ee fb ff f4 	ld.w	r11,r7[-12]
8000359c:	ee fc ff f8 	ld.w	r12,r7[-8]
800035a0:	f0 1f 00 0f 	mcall	800035dc <gpio_enable_pin_interrupt+0x7c>
800035a4:	18 98       	mov	r8,r12
800035a6:	58 18       	cp.w	r8,1
800035a8:	c0 51       	brne	800035b2 <gpio_enable_pin_interrupt+0x52>
    return(GPIO_INVALID_ARGUMENT);
800035aa:	30 18       	mov	r8,1
800035ac:	ef 48 ff f0 	st.w	r7[-16],r8
800035b0:	c1 08       	rjmp	800035d0 <gpio_enable_pin_interrupt+0x70>

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800035b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035b6:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800035ba:	30 18       	mov	r8,1
800035bc:	f0 09 09 48 	lsl	r8,r8,r9
800035c0:	10 99       	mov	r9,r8
800035c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035c6:	f1 49 00 94 	st.w	r8[148],r9

  return GPIO_SUCCESS;
800035ca:	30 08       	mov	r8,0
800035cc:	ef 48 ff f0 	st.w	r7[-16],r8
800035d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800035d4:	10 9c       	mov	r12,r8
800035d6:	2f cd       	sub	sp,-16
800035d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	34 6c       	mov	r12,70

800035e0 <gpio_get_pin_interrupt_flag>:
  gpio_port->ierc = 1 << (pin & 0x1F);
}


int gpio_get_pin_interrupt_flag(unsigned int pin)
{
800035e0:	eb cd 40 80 	pushm	r7,lr
800035e4:	1a 97       	mov	r7,sp
800035e6:	20 2d       	sub	sp,8
800035e8:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800035ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035f0:	a5 98       	lsr	r8,0x5
800035f2:	a9 68       	lsl	r8,0x8
800035f4:	e0 28 f0 00 	sub	r8,61440
800035f8:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800035fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003600:	f0 f9 00 d0 	ld.w	r9,r8[208]
80003604:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003608:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000360c:	f2 08 0a 48 	lsr	r8,r9,r8
80003610:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80003614:	10 9c       	mov	r12,r8
80003616:	2f ed       	sub	sp,-8
80003618:	e3 cd 80 80 	ldm	sp++,r7,pc

8000361c <gpio_clear_pin_interrupt_flag>:


void gpio_clear_pin_interrupt_flag(unsigned int pin)
{
8000361c:	eb cd 40 80 	pushm	r7,lr
80003620:	1a 97       	mov	r7,sp
80003622:	20 2d       	sub	sp,8
80003624:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80003628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000362c:	a5 98       	lsr	r8,0x5
8000362e:	a9 68       	lsl	r8,0x8
80003630:	e0 28 f0 00 	sub	r8,61440
80003634:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ifrc = 1 << (pin & 0x1F);
80003638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000363c:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003640:	30 18       	mov	r8,1
80003642:	f0 09 09 48 	lsl	r8,r8,r9
80003646:	10 99       	mov	r9,r8
80003648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000364c:	f1 49 00 d8 	st.w	r8[216],r9
}
80003650:	2f ed       	sub	sp,-8
80003652:	e3 cd 80 80 	ldm	sp++,r7,pc
80003656:	d7 03       	nop

80003658 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80003658:	eb cd 40 80 	pushm	r7,lr
8000365c:	1a 97       	mov	r7,sp
8000365e:	20 1d       	sub	sp,4
80003660:	ef 4c ff fc 	st.w	r7[-4],r12
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80003664:	ee fb ff fc 	ld.w	r11,r7[-4]
80003668:	e0 6c e1 00 	mov	r12,57600
8000366c:	f0 1f 00 03 	mcall	80003678 <init_dbg_rs232+0x20>
}
80003670:	2f fd       	sub	sp,-4
80003672:	e3 cd 80 80 	ldm	sp++,r7,pc
80003676:	00 00       	add	r0,r0
80003678:	80 00       	ld.sh	r0,r0[0x0]
8000367a:	36 7c       	mov	r12,103

8000367c <init_dbg_rs232_ex>:


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
8000367c:	eb cd 40 80 	pushm	r7,lr
80003680:	1a 97       	mov	r7,sp
80003682:	20 5d       	sub	sp,20
80003684:	ef 4c ff f0 	st.w	r7[-16],r12
80003688:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
8000368c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003690:	ef 48 ff f4 	st.w	r7[-12],r8
80003694:	30 88       	mov	r8,8
80003696:	ef 68 ff f8 	st.b	r7[-8],r8
8000369a:	30 48       	mov	r8,4
8000369c:	ef 68 ff f9 	st.b	r7[-7],r8
800036a0:	30 08       	mov	r8,0
800036a2:	ef 58 ff fa 	st.h	r7[-6],r8
800036a6:	30 08       	mov	r8,0
800036a8:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
800036ac:	30 2b       	mov	r11,2
800036ae:	48 8c       	lddpc	r12,800036cc <init_dbg_rs232_ex+0x50>
800036b0:	f0 1f 00 08 	mcall	800036d0 <init_dbg_rs232_ex+0x54>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
800036b4:	ee c8 00 0c 	sub	r8,r7,12
800036b8:	ee fa ff ec 	ld.w	r10,r7[-20]
800036bc:	10 9b       	mov	r11,r8
800036be:	fe 7c 18 00 	mov	r12,-59392
800036c2:	f0 1f 00 05 	mcall	800036d4 <init_dbg_rs232_ex+0x58>
}
800036c6:	2f bd       	sub	sp,-20
800036c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800036cc:	80 00       	ld.sh	r0,r0[0x0]
800036ce:	b8 b8       	st.b	r12[0x3],r8
800036d0:	80 00       	ld.sh	r0,r0[0x0]
800036d2:	31 70       	mov	r0,23
800036d4:	80 00       	ld.sh	r0,r0[0x0]
800036d6:	38 8c       	mov	r12,-120

800036d8 <print_dbg>:


void print_dbg(const char *str)
{
800036d8:	eb cd 40 80 	pushm	r7,lr
800036dc:	1a 97       	mov	r7,sp
800036de:	20 1d       	sub	sp,4
800036e0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(DBG_USART, str);
800036e4:	ee fb ff fc 	ld.w	r11,r7[-4]
800036e8:	fe 7c 18 00 	mov	r12,-59392
800036ec:	f0 1f 00 03 	mcall	800036f8 <print_dbg+0x20>
}
800036f0:	2f fd       	sub	sp,-4
800036f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800036f6:	00 00       	add	r0,r0
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	36 fc       	mov	r12,111

800036fc <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
800036fc:	eb cd 40 80 	pushm	r7,lr
80003700:	1a 97       	mov	r7,sp
80003702:	20 2d       	sub	sp,8
80003704:	ef 4c ff fc 	st.w	r7[-4],r12
80003708:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000370c:	ee fb ff f8 	ld.w	r11,r7[-8]
80003710:	ee fc ff fc 	ld.w	r12,r7[-4]
80003714:	f0 1f 00 03 	mcall	80003720 <print+0x24>
}
80003718:	2f ed       	sub	sp,-8
8000371a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000371e:	00 00       	add	r0,r0
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	3a fc       	mov	r12,-81

80003724 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003724:	eb cd 40 80 	pushm	r7,lr
80003728:	1a 97       	mov	r7,sp
8000372a:	20 bd       	sub	sp,44
8000372c:	ef 4c ff ec 	st.w	r7[-20],r12
80003730:	ef 4b ff e8 	st.w	r7[-24],r11
80003734:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003738:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000373c:	f0 09 15 04 	lsl	r9,r8,0x4
80003740:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003744:	10 39       	cp.w	r9,r8
80003746:	e0 8b 00 06 	brhi	80003752 <usart_set_async_baudrate+0x2e>
8000374a:	31 09       	mov	r9,16
8000374c:	ef 49 ff d4 	st.w	r7[-44],r9
80003750:	c0 48       	rjmp	80003758 <usart_set_async_baudrate+0x34>
80003752:	30 88       	mov	r8,8
80003754:	ef 48 ff d4 	st.w	r7[-44],r8
80003758:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000375c:	ef 49 ff f0 	st.w	r7[-16],r9
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003760:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003764:	f0 0a 15 03 	lsl	r10,r8,0x3
80003768:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000376c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003770:	f2 08 02 48 	mul	r8,r9,r8
80003774:	a1 98       	lsr	r8,0x1
80003776:	10 0a       	add	r10,r8
80003778:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000377c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003780:	f2 08 02 48 	mul	r8,r9,r8
80003784:	f4 08 0d 08 	divu	r8,r10,r8
80003788:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8000378c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003790:	a3 98       	lsr	r8,0x3
80003792:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80003796:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000379a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000379e:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800037a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037a6:	58 08       	cp.w	r8,0
800037a8:	c0 70       	breq	800037b6 <usart_set_async_baudrate+0x92>
800037aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037ae:	e0 48 ff ff 	cp.w	r8,65535
800037b2:	e0 88 00 06 	brls	800037be <usart_set_async_baudrate+0x9a>
    return USART_INVALID_INPUT;
800037b6:	30 18       	mov	r8,1
800037b8:	ef 48 ff d8 	st.w	r7[-40],r8
800037bc:	c2 c8       	rjmp	80003814 <usart_set_async_baudrate+0xf0>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800037be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800037c2:	70 18       	ld.w	r8,r8[0x4]
800037c4:	10 99       	mov	r9,r8
800037c6:	e4 19 ff f7 	andh	r9,0xfff7
800037ca:	e0 19 fe cf 	andl	r9,0xfecf
800037ce:	ef 49 ff dc 	st.w	r7[-36],r9
800037d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037d6:	59 08       	cp.w	r8,16
800037d8:	c0 60       	breq	800037e4 <usart_set_async_baudrate+0xc0>
800037da:	e8 68 00 00 	mov	r8,524288
800037de:	ef 48 ff e0 	st.w	r7[-32],r8
800037e2:	c0 48       	rjmp	800037ea <usart_set_async_baudrate+0xc6>
800037e4:	30 09       	mov	r9,0
800037e6:	ef 49 ff e0 	st.w	r7[-32],r9
800037ea:	ee f9 ff dc 	ld.w	r9,r7[-36]
800037ee:	ee f8 ff e0 	ld.w	r8,r7[-32]
800037f2:	10 49       	or	r9,r8
800037f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800037f8:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800037fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037fe:	f0 09 15 10 	lsl	r9,r8,0x10
80003802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003806:	10 49       	or	r9,r8
80003808:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000380c:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8000380e:	30 09       	mov	r9,0
80003810:	ef 49 ff d8 	st.w	r7[-40],r9
80003814:	ee f8 ff d8 	ld.w	r8,r7[-40]
}
80003818:	10 9c       	mov	r12,r8
8000381a:	2f 5d       	sub	sp,-44
8000381c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003820 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80003820:	eb cd 40 80 	pushm	r7,lr
80003824:	1a 97       	mov	r7,sp
80003826:	20 3d       	sub	sp,12
80003828:	ef 4c ff f8 	st.w	r7[-8],r12
  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000382c:	e1 b8 00 00 	mfsr	r8,0x0
80003830:	e6 18 00 01 	andh	r8,0x1,COH
80003834:	5f 08       	sreq	r8
80003836:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000383a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000383e:	30 08       	mov	r8,0
80003840:	f0 09 18 00 	cp.b	r9,r8
80003844:	c0 20       	breq	80003848 <usart_reset+0x28>
80003846:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003848:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000384c:	3f f8       	mov	r8,-1
8000384e:	93 38       	st.w	r9[0xc],r8
  usart->csr;
80003850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003854:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003856:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000385a:	30 08       	mov	r8,0
8000385c:	f0 09 18 00 	cp.b	r9,r8
80003860:	c0 20       	breq	80003864 <usart_reset+0x44>
80003862:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003864:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003868:	30 08       	mov	r8,0
8000386a:	93 18       	st.w	r9[0x4],r8
  usart->rtor = 0;
8000386c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003870:	30 08       	mov	r8,0
80003872:	93 98       	st.w	r9[0x24],r8
  usart->ttgr = 0;
80003874:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003878:	30 08       	mov	r8,0
8000387a:	93 a8       	st.w	r9[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000387c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003880:	ea 68 61 0c 	mov	r8,680204
80003884:	93 08       	st.w	r9[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003886:	2f dd       	sub	sp,-12
80003888:	e3 cd 80 80 	ldm	sp++,r7,pc

8000388c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000388c:	eb cd 40 80 	pushm	r7,lr
80003890:	1a 97       	mov	r7,sp
80003892:	20 4d       	sub	sp,16
80003894:	ef 4c ff fc 	st.w	r7[-4],r12
80003898:	ef 4b ff f8 	st.w	r7[-8],r11
8000389c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800038a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800038a4:	f0 1f 00 57 	mcall	80003a00 <usart_init_rs232+0x174>

  // Check input values.
  if (!opt || // Null pointer.
800038a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038ac:	58 08       	cp.w	r8,0
800038ae:	c3 90       	breq	80003920 <usart_init_rs232+0x94>
800038b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038b4:	11 c9       	ld.ub	r9,r8[0x4]
800038b6:	30 48       	mov	r8,4
800038b8:	f0 09 18 00 	cp.b	r9,r8
800038bc:	e0 88 00 32 	brls	80003920 <usart_init_rs232+0x94>
800038c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038c4:	11 c9       	ld.ub	r9,r8[0x4]
800038c6:	30 98       	mov	r8,9
800038c8:	f0 09 18 00 	cp.b	r9,r8
800038cc:	e0 8b 00 2a 	brhi	80003920 <usart_init_rs232+0x94>
800038d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038d4:	11 d9       	ld.ub	r9,r8[0x5]
800038d6:	30 78       	mov	r8,7
800038d8:	f0 09 18 00 	cp.b	r9,r8
800038dc:	e0 8b 00 22 	brhi	80003920 <usart_init_rs232+0x94>
800038e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038e4:	90 39       	ld.sh	r9,r8[0x6]
800038e6:	e0 68 01 01 	mov	r8,257
800038ea:	f0 09 19 00 	cp.h	r9,r8
800038ee:	e0 8b 00 19 	brhi	80003920 <usart_init_rs232+0x94>
800038f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038f6:	f1 39 00 08 	ld.ub	r9,r8[8]
800038fa:	30 38       	mov	r8,3
800038fc:	f0 09 18 00 	cp.b	r9,r8
80003900:	e0 8b 00 10 	brhi	80003920 <usart_init_rs232+0x94>
80003904:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000390c:	70 08       	ld.w	r8,r8[0x0]
8000390e:	12 9a       	mov	r10,r9
80003910:	10 9b       	mov	r11,r8
80003912:	ee fc ff fc 	ld.w	r12,r7[-4]
80003916:	f0 1f 00 3c 	mcall	80003a04 <usart_init_rs232+0x178>
8000391a:	18 98       	mov	r8,r12
8000391c:	58 18       	cp.w	r8,1
8000391e:	c0 51       	brne	80003928 <usart_init_rs232+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80003920:	30 18       	mov	r8,1
80003922:	ef 48 ff f0 	st.w	r7[-16],r8
80003926:	c6 78       	rjmp	800039f4 <usart_init_rs232+0x168>

  if (opt->charlength == 9)
80003928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000392c:	11 c9       	ld.ub	r9,r8[0x4]
8000392e:	30 98       	mov	r8,9
80003930:	f0 09 18 00 	cp.b	r9,r8
80003934:	c0 a1       	brne	80003948 <usart_init_rs232+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000393a:	70 18       	ld.w	r8,r8[0x4]
8000393c:	10 99       	mov	r9,r8
8000393e:	b1 b9       	sbr	r9,0x11
80003940:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003944:	91 19       	st.w	r8[0x4],r9
80003946:	c0 d8       	rjmp	80003960 <usart_init_rs232+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000394c:	70 19       	ld.w	r9,r8[0x4]
8000394e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003952:	11 c8       	ld.ub	r8,r8[0x4]
80003954:	20 58       	sub	r8,5
80003956:	a7 68       	lsl	r8,0x6
80003958:	10 49       	or	r9,r8
8000395a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000395e:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003960:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003964:	70 1a       	ld.w	r10,r8[0x4]
80003966:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000396a:	11 d8       	ld.ub	r8,r8[0x5]
8000396c:	f0 09 15 09 	lsl	r9,r8,0x9
80003970:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003974:	f1 38 00 08 	ld.ub	r8,r8[8]
80003978:	af 68       	lsl	r8,0xe
8000397a:	f3 e8 10 08 	or	r8,r9,r8
8000397e:	f5 e8 10 09 	or	r9,r10,r8
80003982:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003986:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000398c:	90 39       	ld.sh	r9,r8[0x6]
8000398e:	30 28       	mov	r8,2
80003990:	f0 09 19 00 	cp.h	r9,r8
80003994:	e0 88 00 14 	brls	800039bc <usart_init_rs232+0x130>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000399c:	70 18       	ld.w	r8,r8[0x4]
8000399e:	10 99       	mov	r9,r8
800039a0:	ad b9       	sbr	r9,0xd
800039a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039a6:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800039a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039ac:	90 38       	ld.sh	r8,r8[0x6]
800039ae:	5c 78       	castu.h	r8
800039b0:	20 28       	sub	r8,2
800039b2:	10 99       	mov	r9,r8
800039b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039b8:	91 a9       	st.w	r8[0x28],r9
800039ba:	c0 d8       	rjmp	800039d4 <usart_init_rs232+0x148>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800039bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039c0:	70 19       	ld.w	r9,r8[0x4]
800039c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039c6:	90 38       	ld.sh	r8,r8[0x6]
800039c8:	5c 78       	castu.h	r8
800039ca:	ad 68       	lsl	r8,0xc
800039cc:	10 49       	or	r9,r8
800039ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039d2:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800039d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039d8:	70 18       	ld.w	r8,r8[0x4]
800039da:	10 99       	mov	r9,r8
800039dc:	e0 19 ff f0 	andl	r9,0xfff0
800039e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039e4:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800039e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800039ea:	35 08       	mov	r8,80
800039ec:	93 08       	st.w	r9[0x0],r8
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800039ee:	30 08       	mov	r8,0
800039f0:	ef 48 ff f0 	st.w	r7[-16],r8
800039f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800039f8:	10 9c       	mov	r12,r8
800039fa:	2f cd       	sub	sp,-16
800039fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a00:	80 00       	ld.sh	r0,r0[0x0]
80003a02:	38 20       	mov	r0,-126
80003a04:	80 00       	ld.sh	r0,r0[0x0]
80003a06:	37 24       	mov	r4,114

80003a08 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80003a08:	eb cd 40 80 	pushm	r7,lr
80003a0c:	1a 97       	mov	r7,sp
80003a0e:	20 4d       	sub	sp,16
80003a10:	ef 4c ff f8 	st.w	r7[-8],r12
80003a14:	ef 4b ff f4 	st.w	r7[-12],r11
80003a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a1c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
extern __inline__ int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a24:	70 58       	ld.w	r8,r8[0x14]
80003a26:	e2 18 00 02 	andl	r8,0x2,COH
80003a2a:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80003a2c:	58 08       	cp.w	r8,0
80003a2e:	c0 c0       	breq	80003a46 <usart_write_char+0x3e>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003a30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a34:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80003a38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a3c:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80003a3e:	30 08       	mov	r8,0
80003a40:	ef 48 ff f0 	st.w	r7[-16],r8
80003a44:	c0 48       	rjmp	80003a4c <usart_write_char+0x44>
  }
  else
    return USART_TX_BUSY;
80003a46:	30 28       	mov	r8,2
80003a48:	ef 48 ff f0 	st.w	r7[-16],r8
80003a4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80003a50:	10 9c       	mov	r12,r8
80003a52:	2f cd       	sub	sp,-16
80003a54:	e3 cd 80 80 	ldm	sp++,r7,pc

80003a58 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003a58:	eb cd 40 80 	pushm	r7,lr
80003a5c:	1a 97       	mov	r7,sp
80003a5e:	20 4d       	sub	sp,16
80003a60:	ef 4c ff f8 	st.w	r7[-8],r12
80003a64:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80003a68:	e0 68 27 10 	mov	r8,10000
80003a6c:	ef 48 ff fc 	st.w	r7[-4],r8

  if (c == '\n')
80003a70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a74:	58 a8       	cp.w	r8,10
80003a76:	c1 e1       	brne	80003ab2 <usart_putchar+0x5a>
  {
    do
    {
      if (!timeout--) return USART_FAILURE;
80003a78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a7c:	58 08       	cp.w	r8,0
80003a7e:	5f 08       	sreq	r8
80003a80:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a88:	20 18       	sub	r8,1
80003a8a:	ef 48 ff fc 	st.w	r7[-4],r8
80003a8e:	58 09       	cp.w	r9,0
80003a90:	c0 50       	breq	80003a9a <usart_putchar+0x42>
80003a92:	3f f8       	mov	r8,-1
80003a94:	ef 48 ff f0 	st.w	r7[-16],r8
80003a98:	c2 a8       	rjmp	80003aec <usart_putchar+0x94>
    } while (usart_write_char(usart, '\r') != USART_SUCCESS);
80003a9a:	30 db       	mov	r11,13
80003a9c:	ee fc ff f8 	ld.w	r12,r7[-8]
80003aa0:	f0 1f 00 16 	mcall	80003af8 <usart_putchar+0xa0>
80003aa4:	18 98       	mov	r8,r12
80003aa6:	58 08       	cp.w	r8,0
80003aa8:	ce 81       	brne	80003a78 <usart_putchar+0x20>

    timeout = USART_DEFAULT_TIMEOUT;
80003aaa:	e0 68 27 10 	mov	r8,10000
80003aae:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  do
  {
    if (!timeout--) return USART_FAILURE;
80003ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ab6:	58 08       	cp.w	r8,0
80003ab8:	5f 08       	sreq	r8
80003aba:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003abe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ac2:	20 18       	sub	r8,1
80003ac4:	ef 48 ff fc 	st.w	r7[-4],r8
80003ac8:	58 09       	cp.w	r9,0
80003aca:	c0 50       	breq	80003ad4 <usart_putchar+0x7c>
80003acc:	3f f8       	mov	r8,-1
80003ace:	ef 48 ff f0 	st.w	r7[-16],r8
80003ad2:	c0 d8       	rjmp	80003aec <usart_putchar+0x94>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003ad4:	ee fb ff f4 	ld.w	r11,r7[-12]
80003ad8:	ee fc ff f8 	ld.w	r12,r7[-8]
80003adc:	f0 1f 00 07 	mcall	80003af8 <usart_putchar+0xa0>
80003ae0:	18 98       	mov	r8,r12
80003ae2:	58 08       	cp.w	r8,0
80003ae4:	ce 71       	brne	80003ab2 <usart_putchar+0x5a>

  return USART_SUCCESS;
80003ae6:	30 08       	mov	r8,0
80003ae8:	ef 48 ff f0 	st.w	r7[-16],r8
80003aec:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80003af0:	10 9c       	mov	r12,r8
80003af2:	2f cd       	sub	sp,-16
80003af4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003af8:	80 00       	ld.sh	r0,r0[0x0]
80003afa:	3a 08       	mov	r8,-96

80003afc <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003afc:	eb cd 40 80 	pushm	r7,lr
80003b00:	1a 97       	mov	r7,sp
80003b02:	20 2d       	sub	sp,8
80003b04:	ef 4c ff fc 	st.w	r7[-4],r12
80003b08:	ef 4b ff f8 	st.w	r7[-8],r11
80003b0c:	c0 f8       	rjmp	80003b2a <usart_write_line+0x2e>
  while (*string != '\0')
    usart_putchar(usart, *string++);
80003b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b12:	11 88       	ld.ub	r8,r8[0x0]
80003b14:	10 99       	mov	r9,r8
80003b16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b1a:	2f f8       	sub	r8,-1
80003b1c:	ef 48 ff f8 	st.w	r7[-8],r8
80003b20:	12 9b       	mov	r11,r9
80003b22:	ee fc ff fc 	ld.w	r12,r7[-4]
80003b26:	f0 1f 00 06 	mcall	80003b3c <usart_write_line+0x40>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b2e:	11 88       	ld.ub	r8,r8[0x0]
80003b30:	58 08       	cp.w	r8,0
80003b32:	ce e1       	brne	80003b0e <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
80003b34:	2f ed       	sub	sp,-8
80003b36:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b3a:	00 00       	add	r0,r0
80003b3c:	80 00       	ld.sh	r0,r0[0x0]
80003b3e:	3a 58       	mov	r8,-91

80003b40 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, Bool backlight_on)
{
80003b40:	eb cd 40 80 	pushm	r7,lr
80003b44:	1a 97       	mov	r7,sp
80003b46:	20 7d       	sub	sp,28
80003b48:	ef 4c ff ec 	st.w	r7[-20],r12
80003b4c:	16 98       	mov	r8,r11
80003b4e:	ef 68 ff e8 	st.b	r7[-24],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80003b52:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003b56:	58 18       	cp.w	r8,1
80003b58:	c5 e1       	brne	80003c14 <dip204_init+0xd4>
  {
    channel_id = DIP204_PWM_CHANNEL;
80003b5a:	4d 09       	lddpc	r9,80003c98 <dip204_init+0x158>
80003b5c:	30 68       	mov	r8,6
80003b5e:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(AVR32_PWM_6_PIN, AVR32_PWM_6_FUNCTION);
80003b60:	30 2b       	mov	r11,2
80003b62:	33 2c       	mov	r12,50
80003b64:	f0 1f 00 4e 	mcall	80003c9c <dip204_init+0x15c>

    // PWM controller configuration
    pwm_opt.diva=0;
80003b68:	30 08       	mov	r8,0
80003b6a:	ef 48 ff f4 	st.w	r7[-12],r8
    pwm_opt.divb=0;
80003b6e:	30 08       	mov	r8,0
80003b70:	ef 48 ff f0 	st.w	r7[-16],r8
    pwm_opt.prea=0;
80003b74:	30 08       	mov	r8,0
80003b76:	ef 48 ff fc 	st.w	r7[-4],r8
    pwm_opt.preb=0;
80003b7a:	30 08       	mov	r8,0
80003b7c:	ef 48 ff f8 	st.w	r7[-8],r8

    pwm_init(&pwm_opt);
80003b80:	ee c8 00 10 	sub	r8,r7,16
80003b84:	10 9c       	mov	r12,r8
80003b86:	f0 1f 00 47 	mcall	80003ca0 <dip204_init+0x160>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80003b8a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80003b8e:	30 08       	mov	r8,0
80003b90:	f0 09 18 00 	cp.b	r9,r8
80003b94:	c0 50       	breq	80003b9e <dip204_init+0x5e>
80003b96:	33 1a       	mov	r10,49
80003b98:	ef 4a ff e4 	st.w	r7[-28],r10
80003b9c:	c0 48       	rjmp	80003ba4 <dip204_init+0x64>
80003b9e:	30 18       	mov	r8,1
80003ba0:	ef 48 ff e4 	st.w	r7[-28],r8
80003ba4:	4c 09       	lddpc	r9,80003ca4 <dip204_init+0x164>
80003ba6:	ee fa ff e4 	ld.w	r10,r7[-28]
80003baa:	14 98       	mov	r8,r10
80003bac:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80003bae:	4b fa       	lddpc	r10,80003ca8 <dip204_init+0x168>
80003bb0:	74 08       	ld.w	r8,r10[0x0]
80003bb2:	30 09       	mov	r9,0
80003bb4:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80003bb8:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
80003bba:	4b ca       	lddpc	r10,80003ca8 <dip204_init+0x168>
80003bbc:	74 08       	ld.w	r8,r10[0x0]
80003bbe:	30 09       	mov	r9,0
80003bc0:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
80003bc4:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80003bc6:	4b 9a       	lddpc	r10,80003ca8 <dip204_init+0x168>
80003bc8:	74 08       	ld.w	r8,r10[0x0]
80003bca:	30 19       	mov	r9,1
80003bcc:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
80003bd0:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80003bd2:	4b 6a       	lddpc	r10,80003ca8 <dip204_init+0x168>
80003bd4:	74 08       	ld.w	r8,r10[0x0]
80003bd6:	30 89       	mov	r9,8
80003bd8:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80003bdc:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80003bde:	4b 28       	lddpc	r8,80003ca4 <dip204_init+0x164>
80003be0:	90 08       	ld.sh	r8,r8[0x0]
80003be2:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003be6:	4b 18       	lddpc	r8,80003ca8 <dip204_init+0x168>
80003be8:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80003bea:	4b 09       	lddpc	r9,80003ca8 <dip204_init+0x168>
80003bec:	33 28       	mov	r8,50
80003bee:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80003bf0:	4a e9       	lddpc	r9,80003ca8 <dip204_init+0x168>
80003bf2:	30 08       	mov	r8,0
80003bf4:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80003bf6:	4a 98       	lddpc	r8,80003c98 <dip204_init+0x158>
80003bf8:	70 08       	ld.w	r8,r8[0x0]
80003bfa:	4a cb       	lddpc	r11,80003ca8 <dip204_init+0x168>
80003bfc:	10 9c       	mov	r12,r8
80003bfe:	f0 1f 00 2c 	mcall	80003cac <dip204_init+0x16c>
    // start PWM
    pwm_start_channels(1 << channel_id);
80003c02:	4a 68       	lddpc	r8,80003c98 <dip204_init+0x158>
80003c04:	70 09       	ld.w	r9,r8[0x0]
80003c06:	30 18       	mov	r8,1
80003c08:	f0 09 09 48 	lsl	r8,r8,r9
80003c0c:	10 9c       	mov	r12,r8
80003c0e:	f0 1f 00 29 	mcall	80003cb0 <dip204_init+0x170>
80003c12:	c0 e8       	rjmp	80003c2e <dip204_init+0xee>
  }
  else
  {
    if (backlight_on)
80003c14:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80003c18:	30 08       	mov	r8,0
80003c1a:	f0 09 18 00 	cp.b	r9,r8
80003c1e:	c0 50       	breq	80003c28 <dip204_init+0xe8>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
80003c20:	33 2c       	mov	r12,50
80003c22:	f0 1f 00 25 	mcall	80003cb4 <dip204_init+0x174>
80003c26:	c0 48       	rjmp	80003c2e <dip204_init+0xee>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80003c28:	33 2c       	mov	r12,50
80003c2a:	f0 1f 00 24 	mcall	80003cb8 <dip204_init+0x178>
    }
  }
  // delay for power on
  delay_ms(20);
80003c2e:	31 4c       	mov	r12,20
80003c30:	f0 1f 00 23 	mcall	80003cbc <dip204_init+0x17c>
  // select the LCD chip
  dip204_select();
80003c34:	f0 1f 00 23 	mcall	80003cc0 <dip204_init+0x180>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003c38:	e0 6c 00 f8 	mov	r12,248
80003c3c:	f0 1f 00 22 	mcall	80003cc4 <dip204_init+0x184>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80003c40:	33 4c       	mov	r12,52
80003c42:	f0 1f 00 21 	mcall	80003cc4 <dip204_init+0x184>
  // Wait for command execution
  delay_ms(1);
80003c46:	30 1c       	mov	r12,1
80003c48:	f0 1f 00 1d 	mcall	80003cbc <dip204_init+0x17c>
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80003c4c:	30 9c       	mov	r12,9
80003c4e:	f0 1f 00 1e 	mcall	80003cc4 <dip204_init+0x184>
  // Wait for command execution
  delay_ms(1);
80003c52:	30 1c       	mov	r12,1
80003c54:	f0 1f 00 1a 	mcall	80003cbc <dip204_init+0x17c>
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80003c58:	33 0c       	mov	r12,48
80003c5a:	f0 1f 00 1b 	mcall	80003cc4 <dip204_init+0x184>
  // Wait for command execution
  delay_ms(1);
80003c5e:	30 1c       	mov	r12,1
80003c60:	f0 1f 00 17 	mcall	80003cbc <dip204_init+0x17c>
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80003c64:	30 fc       	mov	r12,15
80003c66:	f0 1f 00 18 	mcall	80003cc4 <dip204_init+0x184>
  // Wait for command execution
  delay_ms(1);
80003c6a:	30 1c       	mov	r12,1
80003c6c:	f0 1f 00 14 	mcall	80003cbc <dip204_init+0x17c>
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80003c70:	30 1c       	mov	r12,1
80003c72:	f0 1f 00 15 	mcall	80003cc4 <dip204_init+0x184>
  // Wait for command execution
  delay_ms(5);
80003c76:	30 5c       	mov	r12,5
80003c78:	f0 1f 00 11 	mcall	80003cbc <dip204_init+0x17c>
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80003c7c:	30 6c       	mov	r12,6
80003c7e:	f0 1f 00 12 	mcall	80003cc4 <dip204_init+0x184>
  // Wait for command execution
  delay_ms(1);
80003c82:	30 1c       	mov	r12,1
80003c84:	f0 1f 00 0e 	mcall	80003cbc <dip204_init+0x17c>
  dip204_wait_busy();
80003c88:	f0 1f 00 10 	mcall	80003cc8 <dip204_init+0x188>
  // unselect chip
  dip204_unselect();
80003c8c:	f0 1f 00 10 	mcall	80003ccc <dip204_init+0x18c>
}
80003c90:	2f 9d       	sub	sp,-28
80003c92:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c96:	00 00       	add	r0,r0
80003c98:	00 00       	add	r0,r0
80003c9a:	00 28       	rsub	r8,r0
80003c9c:	80 00       	ld.sh	r0,r0[0x0]
80003c9e:	31 e0       	mov	r0,30
80003ca0:	80 00       	ld.sh	r0,r0[0x0]
80003ca2:	27 fc       	sub	r12,127
80003ca4:	00 00       	add	r0,r0
80003ca6:	06 3c       	cp.w	r12,r3
80003ca8:	00 00       	add	r0,r0
80003caa:	06 40       	or	r0,r3
80003cac:	80 00       	ld.sh	r0,r0[0x0]
80003cae:	28 94       	sub	r4,-119
80003cb0:	80 00       	ld.sh	r0,r0[0x0]
80003cb2:	29 32       	sub	r2,-109
80003cb4:	80 00       	ld.sh	r0,r0[0x0]
80003cb6:	33 ca       	mov	r10,60
80003cb8:	80 00       	ld.sh	r0,r0[0x0]
80003cba:	33 62       	mov	r2,54
80003cbc:	80 00       	ld.sh	r0,r0[0x0]
80003cbe:	3f cc       	mov	r12,-4
80003cc0:	80 00       	ld.sh	r0,r0[0x0]
80003cc2:	3e 50       	mov	r0,-27
80003cc4:	80 00       	ld.sh	r0,r0[0x0]
80003cc6:	3e 80       	mov	r0,-24
80003cc8:	80 00       	ld.sh	r0,r0[0x0]
80003cca:	3f 70       	mov	r0,-9
80003ccc:	80 00       	ld.sh	r0,r0[0x0]
80003cce:	3e 68       	mov	r8,-26

80003cd0 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80003cd0:	eb cd 40 80 	pushm	r7,lr
80003cd4:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80003cd6:	f0 1f 00 08 	mcall	80003cf4 <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003cda:	e0 6c 00 f8 	mov	r12,248
80003cde:	f0 1f 00 07 	mcall	80003cf8 <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80003ce2:	30 cc       	mov	r12,12
80003ce4:	f0 1f 00 05 	mcall	80003cf8 <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80003ce8:	f0 1f 00 05 	mcall	80003cfc <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80003cec:	f0 1f 00 05 	mcall	80003d00 <dip204_hide_cursor+0x30>
}
80003cf0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cf4:	80 00       	ld.sh	r0,r0[0x0]
80003cf6:	3e 50       	mov	r0,-27
80003cf8:	80 00       	ld.sh	r0,r0[0x0]
80003cfa:	3e 80       	mov	r0,-24
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	3f 70       	mov	r0,-9
80003d00:	80 00       	ld.sh	r0,r0[0x0]
80003d02:	3e 68       	mov	r8,-26

80003d04 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80003d04:	eb cd 40 80 	pushm	r7,lr
80003d08:	1a 97       	mov	r7,sp
80003d0a:	20 3d       	sub	sp,12
80003d0c:	18 98       	mov	r8,r12
80003d0e:	16 99       	mov	r9,r11
80003d10:	ef 68 ff f8 	st.b	r7[-8],r8
80003d14:	12 98       	mov	r8,r9
80003d16:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80003d1a:	30 08       	mov	r8,0
80003d1c:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80003d20:	f0 1f 00 17 	mcall	80003d7c <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80003d24:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003d28:	31 48       	mov	r8,20
80003d2a:	f0 09 18 00 	cp.b	r9,r8
80003d2e:	e0 8b 00 16 	brhi	80003d5a <dip204_set_cursor_position+0x56>
80003d32:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003d36:	30 48       	mov	r8,4
80003d38:	f0 09 18 00 	cp.b	r9,r8
80003d3c:	e0 8b 00 0f 	brhi	80003d5a <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80003d40:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003d44:	20 18       	sub	r8,1
80003d46:	a5 78       	lsl	r8,0x5
80003d48:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003d4c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003d50:	12 08       	add	r8,r9
80003d52:	5c 58       	castu.b	r8
80003d54:	28 18       	sub	r8,-127
80003d56:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003d5a:	e0 6c 00 f8 	mov	r12,248
80003d5e:	f0 1f 00 09 	mcall	80003d80 <dip204_set_cursor_position+0x7c>
  /* Send Adress lower Nibble */
  dip204_write_byte(address);
80003d62:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003d66:	10 9c       	mov	r12,r8
80003d68:	f0 1f 00 06 	mcall	80003d80 <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80003d6c:	f0 1f 00 06 	mcall	80003d84 <dip204_set_cursor_position+0x80>
  dip204_unselect();
80003d70:	f0 1f 00 06 	mcall	80003d88 <dip204_set_cursor_position+0x84>
}
80003d74:	2f dd       	sub	sp,-12
80003d76:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d7a:	00 00       	add	r0,r0
80003d7c:	80 00       	ld.sh	r0,r0[0x0]
80003d7e:	3e 50       	mov	r0,-27
80003d80:	80 00       	ld.sh	r0,r0[0x0]
80003d82:	3e 80       	mov	r0,-24
80003d84:	80 00       	ld.sh	r0,r0[0x0]
80003d86:	3f 70       	mov	r0,-9
80003d88:	80 00       	ld.sh	r0,r0[0x0]
80003d8a:	3e 68       	mov	r8,-26

80003d8c <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80003d8c:	eb cd 40 80 	pushm	r7,lr
80003d90:	1a 97       	mov	r7,sp
80003d92:	20 9d       	sub	sp,36
80003d94:	ee c9 ff f8 	sub	r9,r7,-8
80003d98:	ef 4c ff dc 	st.w	r7[-36],r12
  va_list arg;
  char string[21];
  unsigned char i=0;
80003d9c:	30 08       	mov	r8,0
80003d9e:	ef 68 ff ff 	st.b	r7[-1],r8

  va_start(arg, format);
80003da2:	f2 c8 00 00 	sub	r8,r9,0
80003da6:	ef 48 ff f8 	st.w	r7[-8],r8
  i = vsprintf(string, format, arg);
80003daa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dae:	ee c9 00 20 	sub	r9,r7,32
80003db2:	10 9a       	mov	r10,r8
80003db4:	ee fb ff dc 	ld.w	r11,r7[-36]
80003db8:	12 9c       	mov	r12,r9
80003dba:	f0 1f 00 21 	mcall	80003e3c <dip204_printf_string+0xb0>
80003dbe:	18 98       	mov	r8,r12
80003dc0:	ef 68 ff ff 	st.b	r7[-1],r8
80003dc4:	c0 d8       	rjmp	80003dde <dip204_printf_string+0x52>
  while (i < sizeof(string) - 1) string[i++] = '\0';
80003dc6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003dca:	ee 08 00 09 	add	r9,r7,r8
80003dce:	30 08       	mov	r8,0
80003dd0:	f3 68 ff e0 	st.b	r9[-32],r8
80003dd4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003dd8:	2f f8       	sub	r8,-1
80003dda:	ef 68 ff ff 	st.b	r7[-1],r8
80003dde:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003de2:	31 38       	mov	r8,19
80003de4:	f0 09 18 00 	cp.b	r9,r8
80003de8:	fe 98 ff ef 	brls	80003dc6 <dip204_printf_string+0x3a>
  va_end(arg);
  dip204_select();
80003dec:	f0 1f 00 15 	mcall	80003e40 <dip204_printf_string+0xb4>
  /* for all chars in string */
  i = 0;
80003df0:	30 08       	mov	r8,0
80003df2:	ef 68 ff ff 	st.b	r7[-1],r8
80003df6:	c1 58       	rjmp	80003e20 <dip204_printf_string+0x94>
  while(string[i]!='\0')
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80003df8:	e0 6c 00 fa 	mov	r12,250
80003dfc:	f0 1f 00 12 	mcall	80003e44 <dip204_printf_string+0xb8>
    /* Send byte */
    dip204_write_byte(string[i]);
80003e00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003e04:	ee 08 00 08 	add	r8,r7,r8
80003e08:	f1 38 ff e0 	ld.ub	r8,r8[-32]
80003e0c:	10 9c       	mov	r12,r8
80003e0e:	f0 1f 00 0e 	mcall	80003e44 <dip204_printf_string+0xb8>
    /* go to next char */
    i++;
80003e12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003e16:	2f f8       	sub	r8,-1
80003e18:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80003e1c:	f0 1f 00 0b 	mcall	80003e48 <dip204_printf_string+0xbc>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003e20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003e24:	ee 08 00 08 	add	r8,r7,r8
80003e28:	f1 38 ff e0 	ld.ub	r8,r8[-32]
80003e2c:	58 08       	cp.w	r8,0
80003e2e:	ce 51       	brne	80003df8 <dip204_printf_string+0x6c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80003e30:	f0 1f 00 07 	mcall	80003e4c <dip204_printf_string+0xc0>
}
80003e34:	2f 7d       	sub	sp,-36
80003e36:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e3a:	00 00       	add	r0,r0
80003e3c:	80 00       	ld.sh	r0,r0[0x0]
80003e3e:	63 b0       	ld.w	r0,r1[0x6c]
80003e40:	80 00       	ld.sh	r0,r0[0x0]
80003e42:	3e 50       	mov	r0,-27
80003e44:	80 00       	ld.sh	r0,r0[0x0]
80003e46:	3e 80       	mov	r0,-24
80003e48:	80 00       	ld.sh	r0,r0[0x0]
80003e4a:	3f 70       	mov	r0,-9
80003e4c:	80 00       	ld.sh	r0,r0[0x0]
80003e4e:	3e 68       	mov	r8,-26

80003e50 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80003e50:	eb cd 40 80 	pushm	r7,lr
80003e54:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80003e56:	30 2b       	mov	r11,2
80003e58:	fe 7c 28 00 	mov	r12,-55296
80003e5c:	f0 1f 00 02 	mcall	80003e64 <dip204_select+0x14>
}
80003e60:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e64:	80 00       	ld.sh	r0,r0[0x0]
80003e66:	22 ac       	sub	r12,42

80003e68 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80003e68:	eb cd 40 80 	pushm	r7,lr
80003e6c:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80003e6e:	30 2b       	mov	r11,2
80003e70:	fe 7c 28 00 	mov	r12,-55296
80003e74:	f0 1f 00 02 	mcall	80003e7c <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80003e78:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e7c:	80 00       	ld.sh	r0,r0[0x0]
80003e7e:	23 58       	sub	r8,53

80003e80 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80003e80:	eb cd 40 80 	pushm	r7,lr
80003e84:	1a 97       	mov	r7,sp
80003e86:	20 4d       	sub	sp,16
80003e88:	18 98       	mov	r8,r12
80003e8a:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80003e8e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003e92:	f0 c8 00 f8 	sub	r8,r8,248
80003e96:	ef 48 ff f0 	st.w	r7[-16],r8
80003e9a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003e9e:	58 69       	cp.w	r9,6
80003ea0:	e0 8b 00 12 	brhi	80003ec4 <dip204_write_byte+0x44>
80003ea4:	30 18       	mov	r8,1
80003ea6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003eaa:	f0 09 09 48 	lsl	r8,r8,r9
80003eae:	e2 18 00 55 	andl	r8,0x55,COH
80003eb2:	c0 90       	breq	80003ec4 <dip204_write_byte+0x44>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80003eb4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003eb8:	10 9b       	mov	r11,r8
80003eba:	fe 7c 28 00 	mov	r12,-55296
80003ebe:	f0 1f 00 15 	mcall	80003f10 <dip204_write_byte+0x90>
80003ec2:	c2 48       	rjmp	80003f0a <dip204_write_byte+0x8a>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80003ec4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003ec8:	ef 48 ff fc 	st.w	r7[-4],r8
80003ecc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ed0:	5c 98       	brev	r8
80003ed2:	ef 48 ff fc 	st.w	r7[-4],r8
80003ed6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003eda:	b9 88       	lsr	r8,0x18
80003edc:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80003ee0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003ee4:	e2 18 00 f0 	andl	r8,0xf0,COH
80003ee8:	10 9b       	mov	r11,r8
80003eea:	fe 7c 28 00 	mov	r12,-55296
80003eee:	f0 1f 00 09 	mcall	80003f10 <dip204_write_byte+0x90>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80003ef2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003ef6:	a5 68       	lsl	r8,0x4
80003ef8:	5c 88       	casts.h	r8
80003efa:	5c 78       	castu.h	r8
80003efc:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80003f00:	10 9b       	mov	r11,r8
80003f02:	fe 7c 28 00 	mov	r12,-55296
80003f06:	f0 1f 00 03 	mcall	80003f10 <dip204_write_byte+0x90>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80003f0a:	2f cd       	sub	sp,-16
80003f0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f10:	80 00       	ld.sh	r0,r0[0x0]
80003f12:	25 9a       	sub	r10,89

80003f14 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80003f14:	eb cd 40 80 	pushm	r7,lr
80003f18:	1a 97       	mov	r7,sp
80003f1a:	20 3d       	sub	sp,12
80003f1c:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80003f20:	30 08       	mov	r8,0
80003f22:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80003f26:	30 0b       	mov	r11,0
80003f28:	fe 7c 28 00 	mov	r12,-55296
80003f2c:	f0 1f 00 0f 	mcall	80003f68 <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80003f30:	ee c8 00 06 	sub	r8,r7,6
80003f34:	10 9b       	mov	r11,r8
80003f36:	fe 7c 28 00 	mov	r12,-55296
80003f3a:	f0 1f 00 0d 	mcall	80003f6c <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80003f3e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80003f42:	5c 58       	castu.b	r8
80003f44:	ef 48 ff fc 	st.w	r7[-4],r8
80003f48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f4c:	5c 98       	brev	r8
80003f4e:	ef 48 ff fc 	st.w	r7[-4],r8
80003f52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f56:	b9 88       	lsr	r8,0x18
80003f58:	5c 58       	castu.b	r8
80003f5a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003f5e:	b2 88       	st.b	r9[0x0],r8
}
80003f60:	2f dd       	sub	sp,-12
80003f62:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f66:	00 00       	add	r0,r0
80003f68:	80 00       	ld.sh	r0,r0[0x0]
80003f6a:	25 9a       	sub	r10,89
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	26 00       	sub	r0,96

80003f70 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80003f70:	eb cd 40 80 	pushm	r7,lr
80003f74:	1a 97       	mov	r7,sp
80003f76:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80003f78:	30 08       	mov	r8,0
80003f7a:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read commd to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80003f7e:	e0 6c 00 fc 	mov	r12,252
80003f82:	f0 1f 00 09 	mcall	80003fa4 <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
80003f86:	ee c8 00 01 	sub	r8,r7,1
80003f8a:	10 9c       	mov	r12,r8
80003f8c:	f0 1f 00 07 	mcall	80003fa8 <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80003f90:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003f94:	10 99       	mov	r9,r8
80003f96:	30 08       	mov	r8,0
80003f98:	f0 09 18 00 	cp.b	r9,r8
80003f9c:	cf 55       	brlt	80003f86 <dip204_wait_busy+0x16>
}
80003f9e:	2f fd       	sub	sp,-4
80003fa0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	3e 80       	mov	r0,-24
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	3f 14       	mov	r4,-15

80003fac <delay_init>:
#endif

//_____ D E C L A R A T I O N S ____________________________________________

void delay_init(unsigned long fcpu_hz)
{
80003fac:	eb cd 40 80 	pushm	r7,lr
80003fb0:	1a 97       	mov	r7,sp
80003fb2:	20 1d       	sub	sp,4
80003fb4:	ef 4c ff fc 	st.w	r7[-4],r12
#ifndef FREERTOS_USED
  s_fcpu_hz = fcpu_hz;
80003fb8:	48 49       	lddpc	r9,80003fc8 <delay_init+0x1c>
80003fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fbe:	93 08       	st.w	r9[0x0],r8
#endif
}
80003fc0:	2f fd       	sub	sp,-4
80003fc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fc6:	00 00       	add	r0,r0
80003fc8:	00 00       	add	r0,r0
80003fca:	06 60       	and	r0,r3

80003fcc <delay_ms>:


void delay_ms(unsigned long delay)
{
80003fcc:	eb cd 40 80 	pushm	r7,lr
80003fd0:	1a 97       	mov	r7,sp
80003fd2:	20 dd       	sub	sp,52
80003fd4:	ef 4c ff d0 	st.w	r7[-48],r12
#if (defined FREERTOS_USED)
  vTaskDelay( (portTickType)TASK_DELAY_MS(delay) );
#elif (defined NUTOS_USED)
  NutSleep(delay);
#else
  cpu_delay_ms(delay, s_fcpu_hz);
80003fd8:	4d 78       	lddpc	r8,80004134 <delay_ms+0x168>
80003fda:	70 09       	ld.w	r9,r8[0x0]
80003fdc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003fe0:	ef 48 ff e4 	st.w	r7[-28],r8
80003fe4:	ef 49 ff e0 	st.w	r7[-32],r9
80003fe8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003fec:	ef 48 ff ec 	st.w	r7[-20],r8
80003ff0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003ff4:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
extern __inline__ U32 cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80003ff8:	ee fa ff ec 	ld.w	r10,r7[-20]
80003ffc:	30 0b       	mov	r11,0
80003ffe:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004002:	30 09       	mov	r9,0
80004004:	f6 08 02 4c 	mul	r12,r11,r8
80004008:	f2 0a 02 4e 	mul	lr,r9,r10
8000400c:	1c 0c       	add	r12,lr
8000400e:	f4 08 06 48 	mulu.d	r8,r10,r8
80004012:	12 0c       	add	r12,r9
80004014:	18 99       	mov	r9,r12
80004016:	e0 6a 03 e7 	mov	r10,999
8000401a:	30 0b       	mov	r11,0
8000401c:	f0 0a 00 0a 	add	r10,r8,r10
80004020:	f2 0b 00 4b 	adc	r11,r9,r11
80004024:	e0 68 03 e8 	mov	r8,1000
80004028:	30 09       	mov	r9,0
8000402a:	f0 1f 00 44 	mcall	80004138 <delay_ms+0x16c>
8000402e:	14 98       	mov	r8,r10
80004030:	16 99       	mov	r9,r11
80004032:	ef 48 ff f4 	st.w	r7[-12],r8
80004036:	ee c8 00 2c 	sub	r8,r7,44
8000403a:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
extern __inline__ void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000403e:	e1 b8 00 42 	mfsr	r8,0x108
80004042:	10 99       	mov	r9,r8
80004044:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004048:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000404a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000404e:	70 09       	ld.w	r9,r8[0x0]
80004050:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004054:	10 09       	add	r9,r8
80004056:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000405a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000405c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004060:	30 08       	mov	r8,0
80004062:	f3 68 00 08 	st.b	r9[8],r8
80004066:	ee c8 00 2c 	sub	r8,r7,44
8000406a:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
extern __inline__ unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000406e:	e1 b8 00 42 	mfsr	r8,0x108
80004072:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004076:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000407a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000407e:	30 28       	mov	r8,2
80004080:	f0 09 18 00 	cp.b	r9,r8
80004084:	c0 51       	brne	8000408e <delay_ms+0xc2>
    return FALSE;
80004086:	30 08       	mov	r8,0
80004088:	ef 48 ff cc 	st.w	r7[-52],r8
8000408c:	c4 d8       	rjmp	80004126 <delay_ms+0x15a>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000408e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004092:	f1 39 00 08 	ld.ub	r9,r8[8]
80004096:	30 18       	mov	r8,1
80004098:	f0 09 18 00 	cp.b	r9,r8
8000409c:	c0 51       	brne	800040a6 <delay_ms+0xda>
    return TRUE;
8000409e:	30 18       	mov	r8,1
800040a0:	ef 48 ff cc 	st.w	r7[-52],r8
800040a4:	c4 18       	rjmp	80004126 <delay_ms+0x15a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800040a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040aa:	70 09       	ld.w	r9,r8[0x0]
800040ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040b0:	70 18       	ld.w	r8,r8[0x4]
800040b2:	10 39       	cp.w	r9,r8
800040b4:	e0 88 00 1e 	brls	800040f0 <delay_ms+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800040b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040bc:	70 09       	ld.w	r9,r8[0x0]
800040be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040c2:	10 39       	cp.w	r9,r8
800040c4:	e0 88 00 12 	brls	800040e8 <delay_ms+0x11c>
800040c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040cc:	70 19       	ld.w	r9,r8[0x4]
800040ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040d2:	10 39       	cp.w	r9,r8
800040d4:	c0 a2       	brcc	800040e8 <delay_ms+0x11c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800040d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800040da:	30 18       	mov	r8,1
800040dc:	f3 68 00 08 	st.b	r9[8],r8
      return TRUE;
800040e0:	30 18       	mov	r8,1
800040e2:	ef 48 ff cc 	st.w	r7[-52],r8
800040e6:	c2 08       	rjmp	80004126 <delay_ms+0x15a>
    }
    return FALSE;
800040e8:	30 08       	mov	r8,0
800040ea:	ef 48 ff cc 	st.w	r7[-52],r8
800040ee:	c1 c8       	rjmp	80004126 <delay_ms+0x15a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800040f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040f4:	70 09       	ld.w	r9,r8[0x0]
800040f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040fa:	10 39       	cp.w	r9,r8
800040fc:	e0 8b 00 09 	brhi	8000410e <delay_ms+0x142>
80004100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004104:	70 19       	ld.w	r9,r8[0x4]
80004106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000410a:	10 39       	cp.w	r9,r8
8000410c:	c0 a2       	brcc	80004120 <delay_ms+0x154>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000410e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004112:	30 18       	mov	r8,1
80004114:	f3 68 00 08 	st.b	r9[8],r8
      return TRUE;
80004118:	30 18       	mov	r8,1
8000411a:	ef 48 ff cc 	st.w	r7[-52],r8
8000411e:	c0 48       	rjmp	80004126 <delay_ms+0x15a>
    }
    return FALSE;
80004120:	30 08       	mov	r8,0
80004122:	ef 48 ff cc 	st.w	r7[-52],r8
80004126:	ee f8 ff cc 	ld.w	r8,r7[-52]
#endif
extern __inline__ void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000412a:	58 08       	cp.w	r8,0
8000412c:	c9 d0       	breq	80004066 <delay_ms+0x9a>
#endif
}
8000412e:	2f 3d       	sub	sp,-52
80004130:	e3 cd 80 80 	ldm	sp++,r7,pc
80004134:	00 00       	add	r0,r0
80004136:	06 60       	and	r0,r3
80004138:	80 00       	ld.sh	r0,r0[0x0]
8000413a:	5b d0       	cp.w	r0,-3

8000413c <adc_configure>:
#include "compiler.h"
#include "adc.h"


void adc_configure(volatile avr32_adc_t * adc)
{
8000413c:	eb cd 40 80 	pushm	r7,lr
80004140:	1a 97       	mov	r7,sp
80004142:	20 1d       	sub	sp,4
80004144:	ef 4c ff fc 	st.w	r7[-4],r12

#ifdef USE_ADC_8_BITS
  adc->mr |= 1<<AVR32_ADC_LOWRES_OFFSET;
#endif
  // set Sample/Hold time to max so that the ADC capacitor should be loaded entirely
  adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80004148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000414c:	70 18       	ld.w	r8,r8[0x4]
8000414e:	10 99       	mov	r9,r8
80004150:	ea 19 0f 00 	orh	r9,0xf00
80004154:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004158:	91 19       	st.w	r8[0x4],r9
  // set Startup to max so that the ADC capacitor should be loaded entirely
  adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
8000415a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000415e:	70 18       	ld.w	r8,r8[0x4]
80004160:	10 99       	mov	r9,r8
80004162:	ea 19 00 1f 	orh	r9,0x1f
80004166:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000416a:	91 19       	st.w	r8[0x4],r9
}
8000416c:	2f fd       	sub	sp,-4
8000416e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004172 <adc_start>:

void adc_start(volatile avr32_adc_t * adc)
{
80004172:	eb cd 40 80 	pushm	r7,lr
80004176:	1a 97       	mov	r7,sp
80004178:	20 1d       	sub	sp,4
8000417a:	ef 4c ff fc 	st.w	r7[-4],r12
  Assert( adc!=NULL );

  // start conversion
  adc->cr = AVR32_ADC_START_MASK;
8000417e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004182:	30 28       	mov	r8,2
80004184:	93 08       	st.w	r9[0x0],r8
}
80004186:	2f fd       	sub	sp,-4
80004188:	e3 cd 80 80 	ldm	sp++,r7,pc

8000418c <adc_enable>:

void adc_enable(volatile avr32_adc_t * adc, unsigned short channel)
{
8000418c:	eb cd 40 80 	pushm	r7,lr
80004190:	1a 97       	mov	r7,sp
80004192:	20 2d       	sub	sp,8
80004194:	ef 4c ff fc 	st.w	r7[-4],r12
80004198:	16 98       	mov	r8,r11
8000419a:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( adc!=NULL );
  Assert( channel <= AVR32_ADC_CHANNELS_MSB );  // check if channel exist

  // enable channel
  adc->cher = (1 << channel);
8000419e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
800041a2:	30 18       	mov	r8,1
800041a4:	f0 09 09 48 	lsl	r8,r8,r9
800041a8:	10 99       	mov	r9,r8
800041aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041ae:	91 49       	st.w	r8[0x10],r9
}
800041b0:	2f ed       	sub	sp,-8
800041b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800041b6:	d7 03       	nop

800041b8 <adc_disable>:

void adc_disable(volatile avr32_adc_t * adc, unsigned short channel)
{
800041b8:	eb cd 40 80 	pushm	r7,lr
800041bc:	1a 97       	mov	r7,sp
800041be:	20 2d       	sub	sp,8
800041c0:	ef 4c ff fc 	st.w	r7[-4],r12
800041c4:	16 98       	mov	r8,r11
800041c6:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( adc!=NULL );
  Assert( channel <= AVR32_ADC_CHANNELS_MSB ); // check if channel exist

  if (adc_get_status(adc, channel) == ENABLED)
800041ca:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800041ce:	10 9b       	mov	r11,r8
800041d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800041d4:	f0 1f 00 0c 	mcall	80004204 <adc_disable+0x4c>
800041d8:	18 98       	mov	r8,r12
800041da:	10 99       	mov	r9,r8
800041dc:	30 18       	mov	r8,1
800041de:	f0 09 18 00 	cp.b	r9,r8
800041e2:	c0 e1       	brne	800041fe <adc_disable+0x46>
  {
    // disable channel
    adc->chdr |= (1 << channel);
800041e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041e8:	70 5a       	ld.w	r10,r8[0x14]
800041ea:	ef 19 ff f8 	ld.uh	r9,r7[-8]
800041ee:	30 18       	mov	r8,1
800041f0:	f0 09 09 48 	lsl	r8,r8,r9
800041f4:	f5 e8 10 09 	or	r9,r10,r8
800041f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041fc:	91 59       	st.w	r8[0x14],r9
  }
}
800041fe:	2f ed       	sub	sp,-8
80004200:	e3 cd 80 80 	ldm	sp++,r7,pc
80004204:	80 00       	ld.sh	r0,r0[0x0]
80004206:	42 08       	lddsp	r8,sp[0x80]

80004208 <adc_get_status>:

Bool adc_get_status(volatile avr32_adc_t * adc, unsigned short channel)
{
80004208:	eb cd 40 80 	pushm	r7,lr
8000420c:	1a 97       	mov	r7,sp
8000420e:	20 2d       	sub	sp,8
80004210:	ef 4c ff fc 	st.w	r7[-4],r12
80004214:	16 98       	mov	r8,r11
80004216:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( adc!=NULL );
  Assert( channel <= AVR32_ADC_CHANNELS_MSB );  // check if channel exist

  return ((adc->chsr & (1 << channel)) ? ENABLED : DISABLED);
8000421a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000421e:	70 6a       	ld.w	r10,r8[0x18]
80004220:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80004224:	30 18       	mov	r8,1
80004226:	f0 09 09 48 	lsl	r8,r8,r9
8000422a:	f5 e8 00 08 	and	r8,r10,r8
8000422e:	5f 18       	srne	r8
}
80004230:	10 9c       	mov	r12,r8
80004232:	2f ed       	sub	sp,-8
80004234:	e3 cd 80 80 	ldm	sp++,r7,pc

80004238 <adc_check_eoc>:

Bool adc_check_eoc(volatile avr32_adc_t * adc, unsigned short channel)
{
80004238:	eb cd 40 80 	pushm	r7,lr
8000423c:	1a 97       	mov	r7,sp
8000423e:	20 2d       	sub	sp,8
80004240:	ef 4c ff fc 	st.w	r7[-4],r12
80004244:	16 98       	mov	r8,r11
80004246:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( adc!=NULL );
  Assert( channel <= AVR32_ADC_CHANNELS_MSB );  // check if channel exist

  // get SR register : EOC bit for channel
  return ((adc->sr & (1 << channel)) ? HIGH : LOW);
8000424a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000424e:	70 7a       	ld.w	r10,r8[0x1c]
80004250:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80004254:	30 18       	mov	r8,1
80004256:	f0 09 09 48 	lsl	r8,r8,r9
8000425a:	f5 e8 00 08 	and	r8,r10,r8
8000425e:	5f 18       	srne	r8
}
80004260:	10 9c       	mov	r12,r8
80004262:	2f ed       	sub	sp,-8
80004264:	e3 cd 80 80 	ldm	sp++,r7,pc

80004268 <adc_get_value>:
  // get SR register : OVR bit for channel
  return ((adc->sr & (1 << (channel + 8))) ? FAIL : PASS);
}

unsigned long adc_get_value(volatile avr32_adc_t * adc, unsigned short channel)
{
80004268:	eb cd 40 80 	pushm	r7,lr
8000426c:	1a 97       	mov	r7,sp
8000426e:	20 2d       	sub	sp,8
80004270:	ef 4c ff fc 	st.w	r7[-4],r12
80004274:	16 98       	mov	r8,r11
80004276:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( adc!=NULL );
  Assert( channel <= AVR32_ADC_CHANNELS_MSB );  // check if channel exist

  // wait for end of conversion
  while(adc_check_eoc(adc, channel) != HIGH);
8000427a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000427e:	10 9b       	mov	r11,r8
80004280:	ee fc ff fc 	ld.w	r12,r7[-4]
80004284:	f0 1f 00 0b 	mcall	800042b0 <adc_get_value+0x48>
80004288:	18 98       	mov	r8,r12
8000428a:	10 99       	mov	r9,r8
8000428c:	30 18       	mov	r8,1
8000428e:	f0 09 18 00 	cp.b	r9,r8
80004292:	cf 41       	brne	8000427a <adc_get_value+0x12>
  return *((unsigned long * )((&(adc->cdr0)) + channel));
80004294:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004298:	2d 08       	sub	r8,-48
8000429a:	10 99       	mov	r9,r8
8000429c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800042a0:	a3 68       	lsl	r8,0x2
800042a2:	f2 08 00 08 	add	r8,r9,r8
800042a6:	70 08       	ld.w	r8,r8[0x0]
}
800042a8:	10 9c       	mov	r12,r8
800042aa:	2f ed       	sub	sp,-8
800042ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800042b0:	80 00       	ld.sh	r0,r0[0x0]
800042b2:	42 38       	lddsp	r8,sp[0x8c]

800042b4 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800042b4:	eb cd 40 80 	pushm	r7,lr
800042b8:	1a 97       	mov	r7,sp
800042ba:	21 3d       	sub	sp,76
800042bc:	ef 4c ff f8 	st.w	r7[-8],r12
800042c0:	ef 4b ff f4 	st.w	r7[-12],r11
800042c4:	ef 4a ff f0 	st.w	r7[-16],r10
  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
800042c8:	e1 b8 00 00 	mfsr	r8,0x0
800042cc:	e6 18 00 01 	andh	r8,0x1,COH
800042d0:	5f 08       	sreq	r8
800042d2:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800042d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042da:	58 28       	cp.w	r8,2
800042dc:	e0 88 00 06 	brls	800042e8 <tc_configure_interrupts+0x34>
    return TC_INVALID_ARGUMENT;
800042e0:	3f f9       	mov	r9,-1
800042e2:	ef 49 ff b4 	st.w	r7[-76],r9
800042e6:	c1 99       	rjmp	80004518 <tc_configure_interrupts+0x264>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
800042e8:	ee fb ff f4 	ld.w	r11,r7[-12]
800042ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042f0:	70 08       	ld.w	r8,r8[0x0]
800042f2:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800042f6:	5c 58       	castu.b	r8
800042f8:	f0 09 15 07 	lsl	r9,r8,0x7
800042fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004300:	70 08       	ld.w	r8,r8[0x0]
80004302:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80004306:	5c 58       	castu.b	r8
80004308:	a7 68       	lsl	r8,0x6
8000430a:	10 49       	or	r9,r8
8000430c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004310:	70 08       	ld.w	r8,r8[0x0]
80004312:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80004316:	5c 58       	castu.b	r8
80004318:	a5 78       	lsl	r8,0x5
8000431a:	10 49       	or	r9,r8
8000431c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004320:	70 08       	ld.w	r8,r8[0x0]
80004322:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80004326:	5c 58       	castu.b	r8
80004328:	a5 68       	lsl	r8,0x4
8000432a:	10 49       	or	r9,r8
8000432c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004330:	70 08       	ld.w	r8,r8[0x0]
80004332:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80004336:	5c 58       	castu.b	r8
80004338:	a3 78       	lsl	r8,0x3
8000433a:	10 49       	or	r9,r8
8000433c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004340:	70 08       	ld.w	r8,r8[0x0]
80004342:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80004346:	5c 58       	castu.b	r8
80004348:	a3 68       	lsl	r8,0x2
8000434a:	10 49       	or	r9,r8
8000434c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004350:	70 08       	ld.w	r8,r8[0x0]
80004352:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80004356:	5c 58       	castu.b	r8
80004358:	a1 78       	lsl	r8,0x1
8000435a:	10 49       	or	r9,r8
8000435c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004360:	70 08       	ld.w	r8,r8[0x0]
80004362:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004366:	5c 58       	castu.b	r8
80004368:	f3 e8 10 08 	or	r8,r9,r8
8000436c:	10 9a       	mov	r10,r8
8000436e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004372:	f6 08 15 06 	lsl	r8,r11,0x6
80004376:	f2 08 00 08 	add	r8,r9,r8
8000437a:	2d c8       	sub	r8,-36
8000437c:	91 0a       	st.w	r8[0x0],r10
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000437e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004382:	30 08       	mov	r8,0
80004384:	f0 09 18 00 	cp.b	r9,r8
80004388:	c0 20       	breq	8000438c <tc_configure_interrupts+0xd8>
8000438a:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000438c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004390:	ef 48 ff b8 	st.w	r7[-72],r8
80004394:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004398:	70 08       	ld.w	r8,r8[0x0]
8000439a:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000439e:	5c 58       	castu.b	r8
800043a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800043a4:	c0 61       	brne	800043b0 <tc_configure_interrupts+0xfc>
800043a6:	e0 69 00 80 	mov	r9,128
800043aa:	ef 49 ff bc 	st.w	r7[-68],r9
800043ae:	c0 48       	rjmp	800043b6 <tc_configure_interrupts+0x102>
800043b0:	30 08       	mov	r8,0
800043b2:	ef 48 ff bc 	st.w	r7[-68],r8
800043b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800043ba:	70 08       	ld.w	r8,r8[0x0]
800043bc:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800043c0:	5c 58       	castu.b	r8
800043c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800043c6:	c0 51       	brne	800043d0 <tc_configure_interrupts+0x11c>
800043c8:	34 09       	mov	r9,64
800043ca:	ef 49 ff c0 	st.w	r7[-64],r9
800043ce:	c0 48       	rjmp	800043d6 <tc_configure_interrupts+0x122>
800043d0:	30 08       	mov	r8,0
800043d2:	ef 48 ff c0 	st.w	r7[-64],r8
800043d6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800043da:	ee f8 ff c0 	ld.w	r8,r7[-64]
800043de:	10 49       	or	r9,r8
800043e0:	ef 49 ff c4 	st.w	r7[-60],r9
800043e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800043e8:	70 08       	ld.w	r8,r8[0x0]
800043ea:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800043ee:	5c 58       	castu.b	r8
800043f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800043f4:	c0 51       	brne	800043fe <tc_configure_interrupts+0x14a>
800043f6:	32 09       	mov	r9,32
800043f8:	ef 49 ff c8 	st.w	r7[-56],r9
800043fc:	c0 48       	rjmp	80004404 <tc_configure_interrupts+0x150>
800043fe:	30 08       	mov	r8,0
80004400:	ef 48 ff c8 	st.w	r7[-56],r8
80004404:	ee f9 ff c4 	ld.w	r9,r7[-60]
80004408:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000440c:	10 49       	or	r9,r8
8000440e:	ef 49 ff cc 	st.w	r7[-52],r9
80004412:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004416:	70 08       	ld.w	r8,r8[0x0]
80004418:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000441c:	5c 58       	castu.b	r8
8000441e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004422:	c0 51       	brne	8000442c <tc_configure_interrupts+0x178>
80004424:	31 09       	mov	r9,16
80004426:	ef 49 ff d0 	st.w	r7[-48],r9
8000442a:	c0 48       	rjmp	80004432 <tc_configure_interrupts+0x17e>
8000442c:	30 08       	mov	r8,0
8000442e:	ef 48 ff d0 	st.w	r7[-48],r8
80004432:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004436:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000443a:	10 49       	or	r9,r8
8000443c:	ef 49 ff d4 	st.w	r7[-44],r9
80004440:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004444:	70 08       	ld.w	r8,r8[0x0]
80004446:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
8000444a:	5c 58       	castu.b	r8
8000444c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004450:	c0 51       	brne	8000445a <tc_configure_interrupts+0x1a6>
80004452:	30 89       	mov	r9,8
80004454:	ef 49 ff d8 	st.w	r7[-40],r9
80004458:	c0 48       	rjmp	80004460 <tc_configure_interrupts+0x1ac>
8000445a:	30 08       	mov	r8,0
8000445c:	ef 48 ff d8 	st.w	r7[-40],r8
80004460:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004464:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004468:	10 49       	or	r9,r8
8000446a:	ef 49 ff dc 	st.w	r7[-36],r9
8000446e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004472:	70 08       	ld.w	r8,r8[0x0]
80004474:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80004478:	5c 58       	castu.b	r8
8000447a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000447e:	c0 51       	brne	80004488 <tc_configure_interrupts+0x1d4>
80004480:	30 49       	mov	r9,4
80004482:	ef 49 ff e0 	st.w	r7[-32],r9
80004486:	c0 48       	rjmp	8000448e <tc_configure_interrupts+0x1da>
80004488:	30 08       	mov	r8,0
8000448a:	ef 48 ff e0 	st.w	r7[-32],r8
8000448e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004492:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004496:	10 49       	or	r9,r8
80004498:	ef 49 ff e4 	st.w	r7[-28],r9
8000449c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800044a0:	70 08       	ld.w	r8,r8[0x0]
800044a2:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800044a6:	5c 58       	castu.b	r8
800044a8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800044ac:	c0 51       	brne	800044b6 <tc_configure_interrupts+0x202>
800044ae:	30 29       	mov	r9,2
800044b0:	ef 49 ff e8 	st.w	r7[-24],r9
800044b4:	c0 48       	rjmp	800044bc <tc_configure_interrupts+0x208>
800044b6:	30 08       	mov	r8,0
800044b8:	ef 48 ff e8 	st.w	r7[-24],r8
800044bc:	ee f9 ff e4 	ld.w	r9,r7[-28]
800044c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800044c4:	10 49       	or	r9,r8
800044c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800044ca:	70 08       	ld.w	r8,r8[0x0]
800044cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800044d0:	5c 58       	castu.b	r8
800044d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800044d6:	5f 08       	sreq	r8
800044d8:	f3 e8 10 08 	or	r8,r9,r8
800044dc:	10 9a       	mov	r10,r8
800044de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800044e2:	ee f8 ff b8 	ld.w	r8,r7[-72]
800044e6:	a7 68       	lsl	r8,0x6
800044e8:	f2 08 00 08 	add	r8,r9,r8
800044ec:	2d 88       	sub	r8,-40
800044ee:	91 0a       	st.w	r8[0x0],r10
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800044f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800044f8:	a1 78       	lsl	r8,0x1
800044fa:	2f f8       	sub	r8,-1
800044fc:	a5 78       	lsl	r8,0x5
800044fe:	f2 08 00 08 	add	r8,r9,r8
80004502:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80004504:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004508:	30 08       	mov	r8,0
8000450a:	f0 09 18 00 	cp.b	r9,r8
8000450e:	c0 20       	breq	80004512 <tc_configure_interrupts+0x25e>
80004510:	d5 03       	csrf	0x10

  return 0;
80004512:	30 09       	mov	r9,0
80004514:	ef 49 ff b4 	st.w	r7[-76],r9
80004518:	ee f8 ff b4 	ld.w	r8,r7[-76]
}
8000451c:	10 9c       	mov	r12,r8
8000451e:	2e dd       	sub	sp,-76
80004520:	e3 cd 80 80 	ldm	sp++,r7,pc

80004524 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80004524:	eb cd 40 80 	pushm	r7,lr
80004528:	1a 97       	mov	r7,sp
8000452a:	20 3d       	sub	sp,12
8000452c:	ef 4c ff fc 	st.w	r7[-4],r12
80004530:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80004534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004538:	70 08       	ld.w	r8,r8[0x0]
8000453a:	58 28       	cp.w	r8,2
8000453c:	e0 88 00 06 	brls	80004548 <tc_init_waveform+0x24>
    return TC_INVALID_ARGUMENT;
80004540:	3f f8       	mov	r8,-1
80004542:	ef 48 ff f4 	st.w	r7[-12],r8
80004546:	c9 a8       	rjmp	8000467a <tc_init_waveform+0x156>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80004548:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000454c:	70 0b       	ld.w	r11,r8[0x0]
8000454e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004552:	70 18       	ld.w	r8,r8[0x4]
80004554:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80004558:	5c 58       	castu.b	r8
8000455a:	f0 09 15 1e 	lsl	r9,r8,0x1e
8000455e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004562:	70 18       	ld.w	r8,r8[0x4]
80004564:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80004568:	5c 58       	castu.b	r8
8000456a:	bd 68       	lsl	r8,0x1c
8000456c:	10 49       	or	r9,r8
8000456e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004572:	70 18       	ld.w	r8,r8[0x4]
80004574:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80004578:	5c 58       	castu.b	r8
8000457a:	bb 68       	lsl	r8,0x1a
8000457c:	10 49       	or	r9,r8
8000457e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004582:	70 18       	ld.w	r8,r8[0x4]
80004584:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80004588:	5c 58       	castu.b	r8
8000458a:	b9 68       	lsl	r8,0x18
8000458c:	10 49       	or	r9,r8
8000458e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004592:	70 18       	ld.w	r8,r8[0x4]
80004594:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80004598:	5c 58       	castu.b	r8
8000459a:	b7 68       	lsl	r8,0x16
8000459c:	10 49       	or	r9,r8
8000459e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045a2:	70 18       	ld.w	r8,r8[0x4]
800045a4:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
800045a8:	5c 58       	castu.b	r8
800045aa:	b5 68       	lsl	r8,0x14
800045ac:	10 49       	or	r9,r8
800045ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045b2:	70 18       	ld.w	r8,r8[0x4]
800045b4:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
800045b8:	5c 58       	castu.b	r8
800045ba:	b3 68       	lsl	r8,0x12
800045bc:	10 49       	or	r9,r8
800045be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c2:	70 18       	ld.w	r8,r8[0x4]
800045c4:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800045c8:	5c 58       	castu.b	r8
800045ca:	b1 68       	lsl	r8,0x10
800045cc:	f3 e8 10 08 	or	r8,r9,r8
800045d0:	10 99       	mov	r9,r8
800045d2:	af b9       	sbr	r9,0xf
800045d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045d8:	70 18       	ld.w	r8,r8[0x4]
800045da:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
800045de:	5c 58       	castu.b	r8
800045e0:	ad 78       	lsl	r8,0xd
800045e2:	10 49       	or	r9,r8
800045e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045e8:	70 18       	ld.w	r8,r8[0x4]
800045ea:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
800045ee:	5c 58       	castu.b	r8
800045f0:	ad 68       	lsl	r8,0xc
800045f2:	10 49       	or	r9,r8
800045f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f8:	70 18       	ld.w	r8,r8[0x4]
800045fa:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800045fe:	5c 58       	castu.b	r8
80004600:	ab 68       	lsl	r8,0xa
80004602:	10 49       	or	r9,r8
80004604:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004608:	70 18       	ld.w	r8,r8[0x4]
8000460a:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
8000460e:	5c 58       	castu.b	r8
80004610:	a9 68       	lsl	r8,0x8
80004612:	10 49       	or	r9,r8
80004614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004618:	70 18       	ld.w	r8,r8[0x4]
8000461a:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000461e:	5c 58       	castu.b	r8
80004620:	a7 78       	lsl	r8,0x7
80004622:	10 49       	or	r9,r8
80004624:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004628:	70 18       	ld.w	r8,r8[0x4]
8000462a:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000462e:	5c 58       	castu.b	r8
80004630:	a7 68       	lsl	r8,0x6
80004632:	10 49       	or	r9,r8
80004634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004638:	70 18       	ld.w	r8,r8[0x4]
8000463a:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
8000463e:	5c 58       	castu.b	r8
80004640:	a5 68       	lsl	r8,0x4
80004642:	10 49       	or	r9,r8
80004644:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004648:	70 18       	ld.w	r8,r8[0x4]
8000464a:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
8000464e:	5c 58       	castu.b	r8
80004650:	a3 78       	lsl	r8,0x3
80004652:	10 49       	or	r9,r8
80004654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004658:	70 18       	ld.w	r8,r8[0x4]
8000465a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000465e:	5c 58       	castu.b	r8
80004660:	f3 e8 10 08 	or	r8,r9,r8
80004664:	10 9a       	mov	r10,r8
80004666:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000466a:	f6 08 15 04 	lsl	r8,r11,0x4
8000466e:	2f f8       	sub	r8,-1
80004670:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80004674:	30 08       	mov	r8,0
80004676:	ef 48 ff f4 	st.w	r7[-12],r8
8000467a:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000467e:	10 9c       	mov	r12,r8
80004680:	2f dd       	sub	sp,-12
80004682:	e3 cd 80 80 	ldm	sp++,r7,pc

80004686 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80004686:	eb cd 40 80 	pushm	r7,lr
8000468a:	1a 97       	mov	r7,sp
8000468c:	20 3d       	sub	sp,12
8000468e:	ef 4c ff fc 	st.w	r7[-4],r12
80004692:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80004696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000469a:	58 28       	cp.w	r8,2
8000469c:	e0 88 00 06 	brls	800046a8 <tc_start+0x22>
    return TC_INVALID_ARGUMENT;
800046a0:	3f f8       	mov	r8,-1
800046a2:	ef 48 ff f4 	st.w	r7[-12],r8
800046a6:	c0 c8       	rjmp	800046be <tc_start+0x38>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800046a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800046b0:	a7 68       	lsl	r8,0x6
800046b2:	10 09       	add	r9,r8
800046b4:	30 58       	mov	r8,5
800046b6:	93 08       	st.w	r9[0x0],r8

  return 0;
800046b8:	30 08       	mov	r8,0
800046ba:	ef 48 ff f4 	st.w	r7[-12],r8
800046be:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
800046c2:	10 9c       	mov	r12,r8
800046c4:	2f dd       	sub	sp,-12
800046c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800046ca <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
800046ca:	eb cd 40 80 	pushm	r7,lr
800046ce:	1a 97       	mov	r7,sp
800046d0:	20 3d       	sub	sp,12
800046d2:	ef 4c ff fc 	st.w	r7[-4],r12
800046d6:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800046da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046de:	58 28       	cp.w	r8,2
800046e0:	e0 88 00 06 	brls	800046ec <tc_read_sr+0x22>
    return TC_INVALID_ARGUMENT;
800046e4:	3f f8       	mov	r8,-1
800046e6:	ef 48 ff f4 	st.w	r7[-12],r8
800046ea:	c0 d8       	rjmp	80004704 <tc_read_sr+0x3a>

  return tc->channel[channel].sr;
800046ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800046f4:	a1 78       	lsl	r8,0x1
800046f6:	2f f8       	sub	r8,-1
800046f8:	a5 78       	lsl	r8,0x5
800046fa:	f2 08 00 08 	add	r8,r9,r8
800046fe:	70 08       	ld.w	r8,r8[0x0]
80004700:	ef 48 ff f4 	st.w	r7[-12],r8
80004704:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80004708:	10 9c       	mov	r12,r8
8000470a:	2f dd       	sub	sp,-12
8000470c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004710 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
80004710:	eb cd 40 80 	pushm	r7,lr
80004714:	1a 97       	mov	r7,sp
80004716:	20 4d       	sub	sp,16
80004718:	ef 4c ff fc 	st.w	r7[-4],r12
8000471c:	ef 4b ff f8 	st.w	r7[-8],r11
80004720:	14 98       	mov	r8,r10
80004722:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80004726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000472a:	58 28       	cp.w	r8,2
8000472c:	e0 88 00 06 	brls	80004738 <tc_write_rc+0x28>
    return TC_INVALID_ARGUMENT;
80004730:	3f f8       	mov	r8,-1
80004732:	ef 48 ff f0 	st.w	r7[-16],r8
80004736:	c2 a8       	rjmp	8000478a <tc_write_rc+0x7a>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80004738:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000473c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004740:	a5 68       	lsl	r8,0x4
80004742:	2f f8       	sub	r8,-1
80004744:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80004748:	e2 18 80 00 	andl	r8,0x8000,COH
8000474c:	c1 b0       	breq	80004782 <tc_write_rc+0x72>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
8000474e:	ee fb ff f8 	ld.w	r11,r7[-8]
80004752:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004756:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000475a:	a7 68       	lsl	r8,0x6
8000475c:	f2 08 00 08 	add	r8,r9,r8
80004760:	2e 48       	sub	r8,-28
80004762:	70 08       	ld.w	r8,r8[0x0]
80004764:	10 99       	mov	r9,r8
80004766:	e0 19 00 00 	andl	r9,0x0
8000476a:	ef 18 ff f4 	ld.uh	r8,r7[-12]
8000476e:	f3 e8 10 0a 	or	r10,r9,r8
80004772:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004776:	f6 08 15 06 	lsl	r8,r11,0x6
8000477a:	f2 08 00 08 	add	r8,r9,r8
8000477e:	2e 48       	sub	r8,-28
80004780:	91 0a       	st.w	r8[0x0],r10

  return value;
80004782:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004786:	ef 48 ff f0 	st.w	r7[-16],r8
8000478a:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000478e:	10 9c       	mov	r12,r8
80004790:	2f cd       	sub	sp,-16
80004792:	e3 cd 80 80 	ldm	sp++,r7,pc
80004796:	d7 03       	nop
80004798:	54 63       	stdsp	sp[0x118],r3
8000479a:	20 69       	sub	r9,6
8000479c:	6e 74       	ld.w	r4,r7[0x1c]
8000479e:	65 72       	ld.w	r2,r2[0x5c]
800047a0:	72 75       	ld.w	r5,r9[0x1c]
800047a2:	70 74       	ld.w	r4,r8[0x1c]
800047a4:	31 00       	mov	r0,16
800047a6:	00 00       	add	r0,r0
800047a8:	54 63       	stdsp	sp[0x118],r3
800047aa:	20 69       	sub	r9,6
800047ac:	6e 74       	ld.w	r4,r7[0x1c]
800047ae:	65 72       	ld.w	r2,r2[0x5c]
800047b0:	72 75       	ld.w	r5,r9[0x1c]
800047b2:	70 74       	ld.w	r4,r8[0x1c]
800047b4:	32 00       	mov	r0,32
800047b6:	00 00       	add	r0,r0
800047b8:	0a 0a       	add	r10,r5
800047ba:	0a 00       	add	r0,r5
800047bc:	46 00       	lddsp	r0,sp[0x180]
800047be:	00 00       	add	r0,r0
800047c0:	44 00       	lddsp	r0,sp[0x100]
800047c2:	00 00       	add	r0,r0
800047c4:	4c 61       	lddpc	r1,800048dc <int_handler+0x2c>
800047c6:	62 33       	ld.w	r3,r1[0xc]
800047c8:	00 00       	add	r0,r0
800047ca:	00 00       	add	r0,r0
800047cc:	46 72       	lddsp	r2,sp[0x19c]
800047ce:	65 71       	ld.w	r1,r2[0x5c]
800047d0:	75 65       	ld.w	r5,r10[0x58]
800047d2:	6e 63       	ld.w	r3,r7[0x18]
800047d4:	79 3a       	ld.w	r10,r12[0x4c]
800047d6:	25 35       	sub	r5,83
800047d8:	2e 30       	sub	r0,-29
800047da:	66 48       	ld.w	r8,r3[0x10]
800047dc:	5a 00       	cp.w	r0,-32
800047de:	00 00       	add	r0,r0
800047e0:	44 75       	lddsp	r5,sp[0x11c]
800047e2:	74 79       	ld.w	r9,r10[0x1c]
800047e4:	43 79       	lddsp	r9,sp[0xdc]
800047e6:	63 6c       	ld.w	r12,r1[0x58]
800047e8:	65 3a       	ld.w	r10,r2[0x4c]
800047ea:	25 33       	sub	r3,83
800047ec:	2e 31       	sub	r1,-29
800047ee:	66 25       	ld.w	r5,r3[0x8]
800047f0:	25 20       	sub	r0,82
800047f2:	20 00       	sub	r0,0
800047f4:	50 6f       	stdsp	sp[0x18],pc
800047f6:	73 69       	ld.w	r9,r9[0x58]
800047f8:	74 69       	ld.w	r9,r10[0x18]
800047fa:	6f 6e       	ld.w	lr,r7[0x58]
800047fc:	3a 25       	mov	r5,-94
800047fe:	34 75       	mov	r5,71
80004800:	00 00       	add	r0,r0
80004802:	00 00       	add	r0,r0
80004804:	63 70       	ld.w	r0,r1[0x5c]
80004806:	72 64       	ld.w	r4,r9[0x18]
80004808:	3a 25       	mov	r5,-94
8000480a:	36 64       	mov	r4,102
8000480c:	00 00       	add	r0,r0
	...

80004810 <init_LCD>:

       // Assign the on-board sensors to their ADC channel.
unsigned short adc_channel_pot = EXAMPLE_ADC_POTENTIOMETER_CHANNEL;

void init_LCD(void)
{
80004810:	eb cd 40 80 	pushm	r7,lr
80004814:	1a 97       	mov	r7,sp
80004816:	20 4d       	sub	sp,16
					    .spck_delay   = 0,
					    .trans_delay  = 0,
					    .stay_act     = 1,
					    .spi_mode     = 0,
					    .modfdis      = 1
					  };
80004818:	49 d8       	lddpc	r8,8000488c <init_LCD+0x7c>
8000481a:	ee cb 00 10 	sub	r11,r7,16
8000481e:	10 9a       	mov	r10,r8
80004820:	f4 e8 00 00 	ld.d	r8,r10[0]
80004824:	f6 e9 00 00 	st.d	r11[0],r8
80004828:	f4 e8 00 08 	ld.d	r8,r10[8]
8000482c:	f6 e9 00 08 	st.d	r11[8],r8
					  // Assign I/Os to SPI
					  gpio_enable_module(DIP204_SPI_GPIO_MAP, sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));
80004830:	30 4b       	mov	r11,4
80004832:	49 8c       	lddpc	r12,80004890 <init_LCD+0x80>
80004834:	f0 1f 00 18 	mcall	80004894 <init_LCD+0x84>
					  // Initialize as master
					  spi_initMaster(DIP204_SPI, &spiOptions);
80004838:	ee c8 00 10 	sub	r8,r7,16
8000483c:	10 9b       	mov	r11,r8
8000483e:	fe 7c 28 00 	mov	r12,-55296
80004842:	f0 1f 00 16 	mcall	80004898 <init_LCD+0x88>
					  // Set selection mode: variable_ps, pcs_decode, delay
					  spi_selectionMode(DIP204_SPI, 0, 0, 0);
80004846:	30 09       	mov	r9,0
80004848:	30 0a       	mov	r10,0
8000484a:	30 0b       	mov	r11,0
8000484c:	fe 7c 28 00 	mov	r12,-55296
80004850:	f0 1f 00 13 	mcall	8000489c <init_LCD+0x8c>
					  // Enable SPI
					  spi_enable(DIP204_SPI);
80004854:	fe 7c 28 00 	mov	r12,-55296
80004858:	f0 1f 00 12 	mcall	800048a0 <init_LCD+0x90>
					  // setup chip registers
					  spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);
8000485c:	ee c8 00 10 	sub	r8,r7,16
80004860:	e0 6a 1b 00 	mov	r10,6912
80004864:	ea 1a 00 b7 	orh	r10,0xb7
80004868:	10 9b       	mov	r11,r8
8000486a:	fe 7c 28 00 	mov	r12,-55296
8000486e:	f0 1f 00 0e 	mcall	800048a4 <init_LCD+0x94>
					  // initialize delay driver
					  delay_init( FOSC0 );
80004872:	e0 6c 1b 00 	mov	r12,6912
80004876:	ea 1c 00 b7 	orh	r12,0xb7
8000487a:	f0 1f 00 0c 	mcall	800048a8 <init_LCD+0x98>
					  // initialize LCD
					  dip204_init(backlight_PWM, TRUE);
8000487e:	30 1b       	mov	r11,1
80004880:	30 1c       	mov	r12,1
80004882:	f0 1f 00 0b 	mcall	800048ac <init_LCD+0x9c>
}
80004886:	2f cd       	sub	sp,-16
80004888:	e3 cd 80 80 	ldm	sp++,r7,pc
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	b8 c4       	st.b	r12[0x4],r4
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	b8 bc       	st.b	r12[0x3],r12
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	31 70       	mov	r0,23
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	21 6c       	sub	r12,22
8000489c:	80 00       	ld.sh	r0,r0[0x0]
8000489e:	22 0c       	sub	r12,32
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	25 80       	sub	r0,88
800048a4:	80 00       	ld.sh	r0,r0[0x0]
800048a6:	23 d0       	sub	r0,61
800048a8:	80 00       	ld.sh	r0,r0[0x0]
800048aa:	3f ac       	mov	r12,-6
800048ac:	80 00       	ld.sh	r0,r0[0x0]
800048ae:	3b 40       	mov	r0,-76

800048b0 <int_handler>:
//*********************************************************
static void int_handler (void)
{
800048b0:	eb cd 40 80 	pushm	r7,lr
800048b4:	1a 97       	mov	r7,sp
      choice=choice^0x1;//toggle the value
800048b6:	48 88       	lddpc	r8,800048d4 <int_handler+0x24>
800048b8:	11 88       	ld.ub	r8,r8[0x0]
800048ba:	ec 18 00 01 	eorl	r8,0x1
800048be:	5c 58       	castu.b	r8
800048c0:	48 59       	lddpc	r9,800048d4 <int_handler+0x24>
800048c2:	b2 88       	st.b	r9[0x0],r8
      gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
800048c4:	35 8c       	mov	r12,88
800048c6:	f0 1f 00 05 	mcall	800048d8 <int_handler+0x28>
      gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
800048ca:	35 8c       	mov	r12,88
800048cc:	f0 1f 00 04 	mcall	800048dc <int_handler+0x2c>
}
800048d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800048d4:	00 00       	add	r0,r0
800048d6:	06 64       	and	r4,r3
800048d8:	80 00       	ld.sh	r0,r0[0x0]
800048da:	36 1c       	mov	r12,97
800048dc:	80 00       	ld.sh	r0,r0[0x0]
800048de:	35 e0       	mov	r0,94

800048e0 <tc_irq>:
//*********************************************************
static void tc_irq(void)
{
800048e0:	eb cd 40 80 	pushm	r7,lr
800048e4:	1a 97       	mov	r7,sp
800048e6:	20 1d       	sub	sp,4
  // get value for the potentiometer adc channel
	value=adc_get_value(adc, adc_channel_pot);
800048e8:	49 68       	lddpc	r8,80004940 <tc_irq+0x60>
800048ea:	90 08       	ld.sh	r8,r8[0x0]
800048ec:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800048f0:	49 58       	lddpc	r8,80004944 <tc_irq+0x64>
800048f2:	70 08       	ld.w	r8,r8[0x0]
800048f4:	12 9b       	mov	r11,r9
800048f6:	10 9c       	mov	r12,r8
800048f8:	f0 1f 00 14 	mcall	80004948 <tc_irq+0x68>
800048fc:	18 98       	mov	r8,r12
800048fe:	5c 88       	casts.h	r8
80004900:	49 39       	lddpc	r9,8000494c <tc_irq+0x6c>
80004902:	b2 08       	st.h	r9[0x0],r8
	//gpio_clr_gpio_pin(LED0_GPIO);
	print_dbg("Tc interrupt1");
80004904:	49 3c       	lddpc	r12,80004950 <tc_irq+0x70>
80004906:	f0 1f 00 14 	mcall	80004954 <tc_irq+0x74>
  // Clear the interrupt flag. This is a side effect of reading the TC SR.
	//tc_read_sr(EXAMPLE_TC, TC_CHANNEL);
	volatile int i;
	for(i=0;i<1000;i++);
8000490a:	30 08       	mov	r8,0
8000490c:	ef 48 ff fc 	st.w	r7[-4],r8
80004910:	c0 68       	rjmp	8000491c <tc_irq+0x3c>
80004912:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004916:	2f f8       	sub	r8,-1
80004918:	ef 48 ff fc 	st.w	r7[-4],r8
8000491c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004920:	e0 48 03 e7 	cp.w	r8,999
80004924:	fe 9a ff f7 	brle	80004912 <tc_irq+0x32>
	tc_read_sr(EXAMPLE_TC, TC_CHANNEL);
80004928:	30 0b       	mov	r11,0
8000492a:	fe 7c 38 00 	mov	r12,-51200
8000492e:	f0 1f 00 0b 	mcall	80004958 <tc_irq+0x78>
	print_dbg("Tc interrupt2");
80004932:	48 bc       	lddpc	r12,8000495c <tc_irq+0x7c>
80004934:	f0 1f 00 08 	mcall	80004954 <tc_irq+0x74>
	//gpio_set_gpio_pin(LED0_GPIO);

}
80004938:	2f fd       	sub	sp,-4
8000493a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000493e:	00 00       	add	r0,r0
80004940:	00 00       	add	r0,r0
80004942:	00 38       	cp.w	r8,r0
80004944:	00 00       	add	r0,r0
80004946:	00 34       	cp.w	r4,r0
80004948:	80 00       	ld.sh	r0,r0[0x0]
8000494a:	42 68       	lddsp	r8,sp[0x98]
8000494c:	00 00       	add	r0,r0
8000494e:	06 66       	and	r6,r3
80004950:	80 00       	ld.sh	r0,r0[0x0]
80004952:	47 98       	lddsp	r8,sp[0x1e4]
80004954:	80 00       	ld.sh	r0,r0[0x0]
80004956:	36 d8       	mov	r8,109
80004958:	80 00       	ld.sh	r0,r0[0x0]
8000495a:	46 ca       	lddsp	r10,sp[0x1b0]
8000495c:	80 00       	ld.sh	r0,r0[0x0]
8000495e:	47 a8       	lddsp	r8,sp[0x1e8]

80004960 <main>:
//*********************************************************
int main(void)
{
80004960:	eb cd 40 80 	pushm	r7,lr
80004964:	1a 97       	mov	r7,sp
80004966:	21 5d       	sub	sp,84
	//use power manger driver for setting the frequency
	    pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80004968:	30 3a       	mov	r10,3
8000496a:	e0 6b 1b 00 	mov	r11,6912
8000496e:	ea 1b 00 b7 	orh	r11,0xb7
80004972:	fe 7c 0c 00 	mov	r12,-62464
80004976:	f0 1f 00 f1 	mcall	80004d38 <main+0x3d8>
		pm_freq_param_t System_Clock = {
			    .cpu_f = CPU_HZ,
			    .pba_f = PBA_HZ,
			    .osc0_f = FOSC0,
			    .osc0_startup = OSC0_STARTUP
			};
8000497a:	fe f8 03 c2 	ld.w	r8,pc[962]
8000497e:	ee cb 00 1c 	sub	r11,r7,28
80004982:	10 9a       	mov	r10,r8
80004984:	f4 e8 00 00 	ld.d	r8,r10[0]
80004988:	f6 e9 00 00 	st.d	r11[0],r8
8000498c:	f4 e8 00 08 	ld.d	r8,r10[8]
80004990:	f6 e9 00 08 	st.d	r11[8],r8
		pm_configure_clocks(&System_Clock);
80004994:	ee c8 00 1c 	sub	r8,r7,28
80004998:	10 9c       	mov	r12,r8
8000499a:	f0 1f 00 ea 	mcall	80004d40 <main+0x3e0>
//*********************************************************
	init_LCD();
8000499e:	f0 1f 00 ea 	mcall	80004d44 <main+0x3e4>
	init_dbg_rs232(PBA_HZ);
800049a2:	e0 6c c5 20 	mov	r12,50464
800049a6:	ea 1c 00 fb 	orh	r12,0xfb
800049aa:	f0 1f 00 e8 	mcall	80004d48 <main+0x3e8>

	 print_dbg("\n\n\n");
800049ae:	fe fc 03 9e 	ld.w	r12,pc[926]
800049b2:	f0 1f 00 e8 	mcall	80004d50 <main+0x3f0>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
extern __inline__ void gpio_local_init(void)
{
  Set_system_register(AVR32_CPUCR,
800049b6:	e1 b8 00 03 	mfsr	r8,0xc
800049ba:	b1 a8       	sbr	r8,0x10
800049bc:	e3 b8 00 03 	mtsr	0xc,r8
	gpio_local_init();
	gpio_enable_pin_glitch_filter(GPIO_PUSH_BUTTON_0);
800049c0:	35 8c       	mov	r12,88
800049c2:	f0 1f 00 e5 	mcall	80004d54 <main+0x3f4>
	gpio_enable_gpio_pin(GPIO_PUSH_BUTTON_0);
800049c6:	35 8c       	mov	r12,88
800049c8:	f0 1f 00 e4 	mcall	80004d58 <main+0x3f8>
//*********************************************************
	 volatile avr32_tc_t *tc = EXAMPLE_TC;
800049cc:	fe 78 38 00 	mov	r8,-51200
800049d0:	ef 48 ff f4 	st.w	r7[-12],r8
	 {
      {EXAMPLE_ADC_POTENTIOMETER_PIN, EXAMPLE_ADC_POTENTIOMETER_FUNCTION}
	 };

      // Assign and enable GPIO pins to the ADC function.
     gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) / sizeof(ADC_GPIO_MAP[0]));
800049d4:	30 1b       	mov	r11,1
800049d6:	fe fc 03 86 	ld.w	r12,pc[902]
800049da:	f0 1f 00 e2 	mcall	80004d60 <main+0x400>

     // configure ADC
       // Lower the ADC clock to match the ADC characteristics (because we configured
       // the CPU clock to 12MHz, and the ADC clock characteristics are usually lower;
       // cf. the ADC Characteristic section in the datasheet).
       AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
800049de:	fe 79 3c 00 	mov	r9,-50176
800049e2:	fe 78 3c 00 	mov	r8,-50176
800049e6:	70 18       	ld.w	r8,r8[0x4]
800049e8:	a9 a8       	sbr	r8,0x8
800049ea:	93 18       	st.w	r9[0x4],r8
       adc_configure(adc);
800049ec:	fe f8 03 78 	ld.w	r8,pc[888]
800049f0:	70 08       	ld.w	r8,r8[0x0]
800049f2:	10 9c       	mov	r12,r8
800049f4:	f0 1f 00 dd 	mcall	80004d68 <main+0x408>

       // Enable the ADC channels.
       adc_enable(adc,adc_channel_pot);
800049f8:	fe f8 03 74 	ld.w	r8,pc[884]
800049fc:	90 08       	ld.sh	r8,r8[0x0]
800049fe:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80004a02:	fe f8 03 62 	ld.w	r8,pc[866]
80004a06:	70 08       	ld.w	r8,r8[0x0]
80004a08:	12 9b       	mov	r11,r9
80004a0a:	10 9c       	mov	r12,r8
80004a0c:	f0 1f 00 d9 	mcall	80004d70 <main+0x410>
//*********************************************************
       pwm_opt_t pwm_opt;                                // PWM option config.
         avr32_pwm_channel_t pwm_channel = { .ccnt = 0 };  // One channel config.
80004a10:	ee ca 00 4c 	sub	r10,r7,76
80004a14:	ef 4a ff ac 	st.w	r7[-84],r10
80004a18:	30 08       	mov	r8,0
80004a1a:	30 09       	mov	r9,0
80004a1c:	ee fa ff ac 	ld.w	r10,r7[-84]
80004a20:	f4 e9 00 00 	st.d	r10[0],r8
80004a24:	ee f8 ff ac 	ld.w	r8,r7[-84]
80004a28:	2f 88       	sub	r8,-8
80004a2a:	ef 48 ff ac 	st.w	r7[-84],r8
80004a2e:	30 08       	mov	r8,0
80004a30:	30 09       	mov	r9,0
80004a32:	ee fa ff ac 	ld.w	r10,r7[-84]
80004a36:	f4 e9 00 00 	st.d	r10[0],r8
80004a3a:	ee f8 ff ac 	ld.w	r8,r7[-84]
80004a3e:	2f 88       	sub	r8,-8
80004a40:	ef 48 ff ac 	st.w	r7[-84],r8
80004a44:	30 08       	mov	r8,0
80004a46:	30 09       	mov	r9,0
80004a48:	ee fa ff ac 	ld.w	r10,r7[-84]
80004a4c:	f4 e9 00 00 	st.d	r10[0],r8
80004a50:	ee f8 ff ac 	ld.w	r8,r7[-84]
80004a54:	2f 88       	sub	r8,-8
80004a56:	ef 48 ff ac 	st.w	r7[-84],r8
80004a5a:	30 08       	mov	r8,0
80004a5c:	30 09       	mov	r9,0
80004a5e:	ee fa ff ac 	ld.w	r10,r7[-84]
80004a62:	f4 e9 00 00 	st.d	r10[0],r8
80004a66:	ee f8 ff ac 	ld.w	r8,r7[-84]
80004a6a:	2f 88       	sub	r8,-8
         // The channel number and instance is used in several functions.
         // It's defined as local variable for ease-of-use.
         unsigned int channel_id;

         channel_id = EXAMPLE_PWM_CHANNEL_ID;
80004a6c:	30 38       	mov	r8,3
80004a6e:	ef 48 ff f8 	st.w	r7[-8],r8
         gpio_enable_module_pin(EXAMPLE_PWM_PIN, EXAMPLE_PWM_FUNCTION);
80004a72:	30 0b       	mov	r11,0
80004a74:	33 6c       	mov	r12,54
80004a76:	f0 1f 00 c0 	mcall	80004d74 <main+0x414>

         // PWM controller configuration.
         pwm_opt.diva = AVR32_PWM_DIVA_CLK_OFF;
80004a7a:	30 08       	mov	r8,0
80004a7c:	ef 48 ff d8 	st.w	r7[-40],r8
         pwm_opt.divb = AVR32_PWM_DIVB_CLK_OFF;
80004a80:	30 08       	mov	r8,0
80004a82:	ef 48 ff d4 	st.w	r7[-44],r8
         pwm_opt.prea = AVR32_PWM_PREA_MCK;
80004a86:	30 08       	mov	r8,0
80004a88:	ef 48 ff e0 	st.w	r7[-32],r8
         pwm_opt.preb = AVR32_PWM_PREB_MCK;
80004a8c:	30 08       	mov	r8,0
80004a8e:	ef 48 ff dc 	st.w	r7[-36],r8

         pwm_init(&pwm_opt);
80004a92:	ee c8 00 2c 	sub	r8,r7,44
80004a96:	10 9c       	mov	r12,r8
80004a98:	f0 1f 00 b8 	mcall	80004d78 <main+0x418>

         pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;       // Channel mode.
80004a9c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80004aa0:	30 09       	mov	r9,0
80004aa2:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80004aa6:	ef 48 ff b4 	st.w	r7[-76],r8
         pwm_channel.CMR.cpol = PWM_POLARITY_LOW;            // Channel polarity.
80004aaa:	ee f8 ff b4 	ld.w	r8,r7[-76]
80004aae:	30 09       	mov	r9,0
80004ab0:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
80004ab4:	ef 48 ff b4 	st.w	r7[-76],r8
         pwm_channel.CMR.cpd = PWM_UPDATE_DUTY;              // Not used the first time.
80004ab8:	ee f8 ff b4 	ld.w	r8,r7[-76]
80004abc:	30 09       	mov	r9,0
80004abe:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
80004ac2:	ef 48 ff b4 	st.w	r7[-76],r8
         pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK;  // Channel prescaler.
80004ac6:	ee f8 ff b4 	ld.w	r8,r7[-76]
80004aca:	30 09       	mov	r9,0
80004acc:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80004ad0:	ef 48 ff b4 	st.w	r7[-76],r8
         pwm_channel.cdty = 5;   // Channel duty cycle, should be < CPRD.
80004ad4:	30 58       	mov	r8,5
80004ad6:	ef 48 ff b8 	st.w	r7[-72],r8
         pwm_channel.cprd = 20;  // Channel period.
80004ada:	31 48       	mov	r8,20
80004adc:	ef 48 ff bc 	st.w	r7[-68],r8
         pwm_channel.cupd = 0;   // Channel update is not used here.
80004ae0:	30 08       	mov	r8,0
80004ae2:	ef 48 ff c4 	st.w	r7[-60],r8
         // With these settings, the output waveform period will be :
         // (115200/256)/20 == 22.5Hz == (MCK/prescaler)/period, with MCK == 115200Hz,
         // prescaler == 256, period == 20.
//**************************************************************
       gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_0 , GPIO_RISING_EDGE);
80004ae6:	30 1b       	mov	r11,1
80004ae8:	35 8c       	mov	r12,88
80004aea:	f0 1f 00 a5 	mcall	80004d7c <main+0x41c>
       INTC_init_interrupts ();
80004aee:	f0 1f 00 a5 	mcall	80004d80 <main+0x420>

       INTC_register_interrupt(&int_handler,  (AVR32_GPIO_IRQ_0+88/8), AVR32_INTC_INT1);
80004af2:	30 1a       	mov	r10,1
80004af4:	34 bb       	mov	r11,75
80004af6:	fe fc 02 8e 	ld.w	r12,pc[654]
80004afa:	f0 1f 00 a4 	mcall	80004d88 <main+0x428>

//*********************************************************
        // pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
       // Initialize the timer/counter.
         tc_init_waveform(tc, &WAVEFORM_OPT);         // Initialize the timer/counter waveform.
80004afe:	fe fb 02 8e 	ld.w	r11,pc[654]
80004b02:	ee fc ff f4 	ld.w	r12,r7[-12]
80004b06:	f0 1f 00 a3 	mcall	80004d90 <main+0x430>
         //*******************************
         // Set the compare triggers.
         // Remember TC counter is 16-bits, so counting second is not possible with fPBA = 12 MHz.
         // We configure it to count ms.
         // We want: (1/(fPBA/8)) * RC = 0.02 s, hence RC = (fPBA/8)*0.02= 41250to get an interrupt every 20 ms.
         tc_write_rc(tc, TC_CHANNEL, (PBA_HZ / 8)*0.02); // Set RC value.
80004b0a:	e0 6a a1 22 	mov	r10,41250
80004b0e:	30 0b       	mov	r11,0
80004b10:	ee fc ff f4 	ld.w	r12,r7[-12]
80004b14:	f0 1f 00 a0 	mcall	80004d94 <main+0x434>
         // tc_write_rc(tc, TC_CHANNEL, 60000);
          tc_configure_interrupts(tc, TC_CHANNEL, &TC_INTERRUPT);
80004b18:	fe fa 02 80 	ld.w	r10,pc[640]
80004b1c:	30 0b       	mov	r11,0
80004b1e:	ee fc ff f4 	ld.w	r12,r7[-12]
80004b22:	f0 1f 00 9f 	mcall	80004d9c <main+0x43c>
          INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, AVR32_INTC_INT0);
80004b26:	30 0a       	mov	r10,0
80004b28:	e0 6b 01 c0 	mov	r11,448
80004b2c:	fe fc 02 74 	ld.w	r12,pc[628]
80004b30:	f0 1f 00 96 	mcall	80004d88 <main+0x428>
         // Start the timer/counter.
                             // And start the timer/counter.
//*********************************************************
        Enable_global_interrupt ();
80004b34:	d5 03       	csrf	0x10
        // launch conversion on all enabled channels

//*********************************************************
       // do an infinite loop
       volatile int true_var = TRUE;
80004b36:	30 18       	mov	r8,1
80004b38:	ef 48 ff b0 	st.w	r7[-80],r8
       //float fre=0.0;
       tc_start(tc, TC_CHANNEL);
80004b3c:	30 0b       	mov	r11,0
80004b3e:	ee fc ff f4 	ld.w	r12,r7[-12]
80004b42:	f0 1f 00 99 	mcall	80004da4 <main+0x444>
80004b46:	ce 58       	rjmp	80004d10 <main+0x3b0>
        while (true_var)    // use a volatile true variable to avoid warning on unreachable code
        {
          adc_start(adc);
80004b48:	fe f8 02 1c 	ld.w	r8,pc[540]
80004b4c:	70 08       	ld.w	r8,r8[0x0]
80004b4e:	10 9c       	mov	r12,r8
80004b50:	f0 1f 00 96 	mcall	80004da8 <main+0x448>
          dip204_set_cursor_position(17,2);
80004b54:	30 2b       	mov	r11,2
80004b56:	31 1c       	mov	r12,17
80004b58:	f0 1f 00 95 	mcall	80004dac <main+0x44c>
          if(choice==0)
80004b5c:	fe f8 02 54 	ld.w	r8,pc[596]
80004b60:	11 88       	ld.ub	r8,r8[0x0]
80004b62:	58 08       	cp.w	r8,0
80004b64:	c3 21       	brne	80004bc8 <main+0x268>
          {
        	  //frequency_value =1023-value;
        	  if(value==1023)
80004b66:	fe f8 02 4e 	ld.w	r8,pc[590]
80004b6a:	90 09       	ld.sh	r9,r8[0x0]
80004b6c:	e0 68 03 ff 	mov	r8,1023
80004b70:	f0 09 19 00 	cp.h	r9,r8
80004b74:	c0 91       	brne	80004b86 <main+0x226>
        	  {
        	  frequency_value=100000;
80004b76:	fe f9 02 42 	ld.w	r9,pc[578]
80004b7a:	e0 68 50 00 	mov	r8,20480
80004b7e:	ea 18 47 c3 	orh	r8,0x47c3
80004b82:	93 08       	st.w	r9[0x0],r8
80004b84:	c1 d8       	rjmp	80004bbe <main+0x25e>
        	  }
        	  else
        	  {
        	  frequency_value=((100000-100)/(1023))*value+100.0;
80004b86:	fe f8 02 2e 	ld.w	r8,pc[558]
80004b8a:	90 08       	ld.sh	r8,r8[0x0]
80004b8c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80004b90:	12 98       	mov	r8,r9
80004b92:	a1 78       	lsl	r8,0x1
80004b94:	12 08       	add	r8,r9
80004b96:	a5 78       	lsl	r8,0x5
80004b98:	12 08       	add	r8,r9
80004b9a:	10 9c       	mov	r12,r8
80004b9c:	f0 1f 00 88 	mcall	80004dbc <main+0x45c>
80004ba0:	30 08       	mov	r8,0
80004ba2:	fc 19 40 59 	movh	r9,0x4059
80004ba6:	f0 1f 00 87 	mcall	80004dc0 <main+0x460>
80004baa:	14 98       	mov	r8,r10
80004bac:	16 99       	mov	r9,r11
80004bae:	10 9a       	mov	r10,r8
80004bb0:	12 9b       	mov	r11,r9
80004bb2:	f0 1f 00 85 	mcall	80004dc4 <main+0x464>
80004bb6:	18 99       	mov	r9,r12
80004bb8:	fe f8 02 00 	ld.w	r8,pc[512]
80004bbc:	91 09       	st.w	r8[0x0],r9
        	  }
        	  dip204_printf_string("F");
80004bbe:	fe fc 02 0a 	ld.w	r12,pc[522]
80004bc2:	f0 1f 00 83 	mcall	80004dcc <main+0x46c>
80004bc6:	c1 38       	rjmp	80004bec <main+0x28c>
          }
          else if(choice==1)
80004bc8:	4f a8       	lddpc	r8,80004db0 <main+0x450>
80004bca:	11 89       	ld.ub	r9,r8[0x0]
80004bcc:	30 18       	mov	r8,1
80004bce:	f0 09 18 00 	cp.b	r9,r8
80004bd2:	c0 d1       	brne	80004bec <main+0x28c>
          {
        	  dutycycle_value =value;
80004bd4:	4f 88       	lddpc	r8,80004db4 <main+0x454>
80004bd6:	90 08       	ld.sh	r8,r8[0x0]
80004bd8:	5c 78       	castu.h	r8
80004bda:	10 9c       	mov	r12,r8
80004bdc:	f0 1f 00 7d 	mcall	80004dd0 <main+0x470>
80004be0:	18 99       	mov	r9,r12
80004be2:	4f d8       	lddpc	r8,80004dd4 <main+0x474>
80004be4:	91 09       	st.w	r8[0x0],r9
        	  dip204_printf_string("D");
80004be6:	4f dc       	lddpc	r12,80004dd8 <main+0x478>
80004be8:	f0 1f 00 79 	mcall	80004dcc <main+0x46c>
          }
          // display value to user
          dip204_set_cursor_position(3,1);
80004bec:	30 1b       	mov	r11,1
80004bee:	30 3c       	mov	r12,3
80004bf0:	f0 1f 00 6f 	mcall	80004dac <main+0x44c>
          dip204_printf_string("Lab3");
80004bf4:	4f ac       	lddpc	r12,80004ddc <main+0x47c>
80004bf6:	f0 1f 00 76 	mcall	80004dcc <main+0x46c>

          float per=1-((dutycycle_value+1)/1024)*1.0;
80004bfa:	4f 78       	lddpc	r8,80004dd4 <main+0x474>
80004bfc:	70 08       	ld.w	r8,r8[0x0]
80004bfe:	fc 1b 3f 80 	movh	r11,0x3f80
80004c02:	10 9c       	mov	r12,r8
80004c04:	f0 1f 00 77 	mcall	80004de0 <main+0x480>
80004c08:	18 98       	mov	r8,r12
80004c0a:	fc 1b c4 80 	movh	r11,0xc480
80004c0e:	10 9c       	mov	r12,r8
80004c10:	f0 1f 00 75 	mcall	80004de4 <main+0x484>
80004c14:	18 98       	mov	r8,r12
80004c16:	fc 1b 3f 80 	movh	r11,0x3f80
80004c1a:	10 9c       	mov	r12,r8
80004c1c:	f0 1f 00 71 	mcall	80004de0 <main+0x480>
80004c20:	18 98       	mov	r8,r12
80004c22:	ef 48 ff fc 	st.w	r7[-4],r8
          dip204_set_cursor_position(1,3);
80004c26:	30 3b       	mov	r11,3
80004c28:	30 1c       	mov	r12,1
80004c2a:	f0 1f 00 61 	mcall	80004dac <main+0x44c>
         // dip204_printf_string("Frequency:%3ukHZ",(115200)/frequency_value);
          dip204_printf_string("Frequency:%5.0fHZ",frequency_value);
80004c2e:	4e 38       	lddpc	r8,80004db8 <main+0x458>
80004c30:	70 08       	ld.w	r8,r8[0x0]
80004c32:	10 9c       	mov	r12,r8
80004c34:	f0 1f 00 6d 	mcall	80004de8 <main+0x488>
80004c38:	14 98       	mov	r8,r10
80004c3a:	16 99       	mov	r9,r11
80004c3c:	bb 29       	st.d	--sp,r8
80004c3e:	4e cc       	lddpc	r12,80004dec <main+0x48c>
80004c40:	f0 1f 00 63 	mcall	80004dcc <main+0x46c>
80004c44:	2f ed       	sub	sp,-8
          dip204_set_cursor_position(1,4);
80004c46:	30 4b       	mov	r11,4
80004c48:	30 1c       	mov	r12,1
80004c4a:	f0 1f 00 59 	mcall	80004dac <main+0x44c>
          dip204_printf_string("DutyCycle:%3.1f%%  ",(1-per)*100);
80004c4e:	ee fb ff fc 	ld.w	r11,r7[-4]
80004c52:	fc 1c 3f 80 	movh	r12,0x3f80
80004c56:	f0 1f 00 67 	mcall	80004df0 <main+0x490>
80004c5a:	18 98       	mov	r8,r12
80004c5c:	fc 1b 42 c8 	movh	r11,0x42c8
80004c60:	10 9c       	mov	r12,r8
80004c62:	f0 1f 00 65 	mcall	80004df4 <main+0x494>
80004c66:	18 98       	mov	r8,r12
80004c68:	10 9c       	mov	r12,r8
80004c6a:	f0 1f 00 60 	mcall	80004de8 <main+0x488>
80004c6e:	14 98       	mov	r8,r10
80004c70:	16 99       	mov	r9,r11
80004c72:	bb 29       	st.d	--sp,r8
80004c74:	4e 1c       	lddpc	r12,80004df8 <main+0x498>
80004c76:	f0 1f 00 56 	mcall	80004dcc <main+0x46c>
80004c7a:	2f ed       	sub	sp,-8
          dip204_hide_cursor();
80004c7c:	f0 1f 00 60 	mcall	80004dfc <main+0x49c>

          // Channel duty cycle, should be < CPRD.
           pwm_channel.cprd = 15000000/frequency_value;
80004c80:	4c e8       	lddpc	r8,80004db8 <main+0x458>
80004c82:	70 08       	ld.w	r8,r8[0x0]
80004c84:	10 9b       	mov	r11,r8
80004c86:	e0 6c e1 c0 	mov	r12,57792
80004c8a:	ea 1c 4b 64 	orh	r12,0x4b64
80004c8e:	f0 1f 00 56 	mcall	80004de4 <main+0x484>
80004c92:	18 98       	mov	r8,r12
80004c94:	10 9c       	mov	r12,r8
80004c96:	f0 1f 00 5b 	mcall	80004e00 <main+0x4a0>
80004c9a:	18 98       	mov	r8,r12
80004c9c:	ef 48 ff bc 	st.w	r7[-68],r8
         // pwm_channel.cprd = 2000;
          pwm_channel.cdty = (int)(per*pwm_channel.cprd);
80004ca0:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004ca4:	10 9c       	mov	r12,r8
80004ca6:	f0 1f 00 4b 	mcall	80004dd0 <main+0x470>
80004caa:	18 98       	mov	r8,r12
80004cac:	ee fb ff fc 	ld.w	r11,r7[-4]
80004cb0:	10 9c       	mov	r12,r8
80004cb2:	f0 1f 00 51 	mcall	80004df4 <main+0x494>
80004cb6:	18 98       	mov	r8,r12
80004cb8:	10 9c       	mov	r12,r8
80004cba:	f0 1f 00 53 	mcall	80004e04 <main+0x4a4>
80004cbe:	18 98       	mov	r8,r12
80004cc0:	ef 48 ff b8 	st.w	r7[-72],r8
          //pwm_channel.cdty = 5;
          dip204_set_cursor_position(1,2);
80004cc4:	30 2b       	mov	r11,2
80004cc6:	30 1c       	mov	r12,1
80004cc8:	f0 1f 00 39 	mcall	80004dac <main+0x44c>
          dip204_printf_string("Position:%4u",value);
80004ccc:	4b a8       	lddpc	r8,80004db4 <main+0x454>
80004cce:	90 08       	ld.sh	r8,r8[0x0]
80004cd0:	5c 78       	castu.h	r8
80004cd2:	1a d8       	st.w	--sp,r8
80004cd4:	4c dc       	lddpc	r12,80004e08 <main+0x4a8>
80004cd6:	f0 1f 00 3e 	mcall	80004dcc <main+0x46c>
80004cda:	2f fd       	sub	sp,-4
          dip204_set_cursor_position(9,1);
80004cdc:	30 1b       	mov	r11,1
80004cde:	30 9c       	mov	r12,9
80004ce0:	f0 1f 00 33 	mcall	80004dac <main+0x44c>
          dip204_printf_string("cprd:%6d",pwm_channel.cprd);
80004ce4:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004ce8:	1a d8       	st.w	--sp,r8
80004cea:	4c 9c       	lddpc	r12,80004e0c <main+0x4ac>
80004cec:	f0 1f 00 38 	mcall	80004dcc <main+0x46c>
80004cf0:	2f fd       	sub	sp,-4

          pwm_channel_init(channel_id, &pwm_channel); // Set channel configuration to channel 0
80004cf2:	ee c8 00 4c 	sub	r8,r7,76
80004cf6:	10 9b       	mov	r11,r8
80004cf8:	ee fc ff f8 	ld.w	r12,r7[-8]
80004cfc:	f0 1f 00 45 	mcall	80004e10 <main+0x4b0>
          pwm_start_channels(1 << channel_id);
80004d00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d04:	30 18       	mov	r8,1
80004d06:	f0 09 09 48 	lsl	r8,r8,r9
80004d0a:	10 9c       	mov	r12,r8
80004d0c:	f0 1f 00 42 	mcall	80004e14 <main+0x4b4>
//*********************************************************
       // do an infinite loop
       volatile int true_var = TRUE;
       //float fre=0.0;
       tc_start(tc, TC_CHANNEL);
        while (true_var)    // use a volatile true variable to avoid warning on unreachable code
80004d10:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004d14:	58 08       	cp.w	r8,0
80004d16:	fe 91 ff 19 	brne	80004b48 <main+0x1e8>
          dip204_printf_string("cprd:%6d",pwm_channel.cprd);

          pwm_channel_init(channel_id, &pwm_channel); // Set channel configuration to channel 0
          pwm_start_channels(1 << channel_id);
        }
        adc_disable(adc,adc_channel_pot);
80004d1a:	49 58       	lddpc	r8,80004d6c <main+0x40c>
80004d1c:	90 08       	ld.sh	r8,r8[0x0]
80004d1e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80004d22:	49 18       	lddpc	r8,80004d64 <main+0x404>
80004d24:	70 08       	ld.w	r8,r8[0x0]
80004d26:	12 9b       	mov	r11,r9
80004d28:	10 9c       	mov	r12,r8
80004d2a:	f0 1f 00 3c 	mcall	80004e18 <main+0x4b8>



	return 0;
80004d2e:	30 08       	mov	r8,0
}
80004d30:	10 9c       	mov	r12,r8
80004d32:	2e bd       	sub	sp,-84
80004d34:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d38:	80 00       	ld.sh	r0,r0[0x0]
80004d3a:	2d c0       	sub	r0,-36
80004d3c:	80 00       	ld.sh	r0,r0[0x0]
80004d3e:	b8 e4       	st.b	r12[0x6],r4
80004d40:	80 00       	ld.sh	r0,r0[0x0]
80004d42:	2e 08       	sub	r8,-32
80004d44:	80 00       	ld.sh	r0,r0[0x0]
80004d46:	48 10       	lddpc	r0,80004d48 <main+0x3e8>
80004d48:	80 00       	ld.sh	r0,r0[0x0]
80004d4a:	36 58       	mov	r8,101
80004d4c:	80 00       	ld.sh	r0,r0[0x0]
80004d4e:	47 b8       	lddsp	r8,sp[0x1ec]
80004d50:	80 00       	ld.sh	r0,r0[0x0]
80004d52:	36 d8       	mov	r8,109
80004d54:	80 00       	ld.sh	r0,r0[0x0]
80004d56:	34 32       	mov	r2,67
80004d58:	80 00       	ld.sh	r0,r0[0x0]
80004d5a:	33 12       	mov	r2,49
80004d5c:	80 00       	ld.sh	r0,r0[0x0]
80004d5e:	b8 d4       	st.b	r12[0x5],r4
80004d60:	80 00       	ld.sh	r0,r0[0x0]
80004d62:	31 70       	mov	r0,23
80004d64:	00 00       	add	r0,r0
80004d66:	00 34       	cp.w	r4,r0
80004d68:	80 00       	ld.sh	r0,r0[0x0]
80004d6a:	41 3c       	lddsp	r12,sp[0x4c]
80004d6c:	00 00       	add	r0,r0
80004d6e:	00 38       	cp.w	r8,r0
80004d70:	80 00       	ld.sh	r0,r0[0x0]
80004d72:	41 8c       	lddsp	r12,sp[0x60]
80004d74:	80 00       	ld.sh	r0,r0[0x0]
80004d76:	31 e0       	mov	r0,30
80004d78:	80 00       	ld.sh	r0,r0[0x0]
80004d7a:	27 fc       	sub	r12,127
80004d7c:	80 00       	ld.sh	r0,r0[0x0]
80004d7e:	35 60       	mov	r0,86
80004d80:	80 00       	ld.sh	r0,r0[0x0]
80004d82:	26 f0       	sub	r0,111
80004d84:	80 00       	ld.sh	r0,r0[0x0]
80004d86:	48 b0       	lddpc	r0,80004db0 <main+0x450>
80004d88:	80 00       	ld.sh	r0,r0[0x0]
80004d8a:	27 94       	sub	r4,121
80004d8c:	80 00       	ld.sh	r0,r0[0x0]
80004d8e:	b8 dc       	st.b	r12[0x5],r12
80004d90:	80 00       	ld.sh	r0,r0[0x0]
80004d92:	45 24       	lddsp	r4,sp[0x148]
80004d94:	80 00       	ld.sh	r0,r0[0x0]
80004d96:	47 10       	lddsp	r0,sp[0x1c4]
80004d98:	80 00       	ld.sh	r0,r0[0x0]
80004d9a:	b8 d8       	st.b	r12[0x5],r8
80004d9c:	80 00       	ld.sh	r0,r0[0x0]
80004d9e:	42 b4       	lddsp	r4,sp[0xac]
80004da0:	80 00       	ld.sh	r0,r0[0x0]
80004da2:	48 e0       	lddpc	r0,80004dd8 <main+0x478>
80004da4:	80 00       	ld.sh	r0,r0[0x0]
80004da6:	46 86       	lddsp	r6,sp[0x1a0]
80004da8:	80 00       	ld.sh	r0,r0[0x0]
80004daa:	41 72       	lddsp	r2,sp[0x5c]
80004dac:	80 00       	ld.sh	r0,r0[0x0]
80004dae:	3d 04       	mov	r4,-48
80004db0:	00 00       	add	r0,r0
80004db2:	06 64       	and	r4,r3
80004db4:	00 00       	add	r0,r0
80004db6:	06 66       	and	r6,r3
80004db8:	00 00       	add	r0,r0
80004dba:	00 2c       	rsub	r12,r0
80004dbc:	80 00       	ld.sh	r0,r0[0x0]
80004dbe:	55 18       	stdsp	sp[0x144],r8
80004dc0:	80 00       	ld.sh	r0,r0[0x0]
80004dc2:	53 f8       	stdsp	sp[0xfc],r8
80004dc4:	80 00       	ld.sh	r0,r0[0x0]
80004dc6:	5b 46       	cp.w	r6,-12
80004dc8:	80 00       	ld.sh	r0,r0[0x0]
80004dca:	47 bc       	lddsp	r12,sp[0x1ec]
80004dcc:	80 00       	ld.sh	r0,r0[0x0]
80004dce:	3d 8c       	mov	r12,-40
80004dd0:	80 00       	ld.sh	r0,r0[0x0]
80004dd2:	5a 06       	cp.w	r6,-32
80004dd4:	00 00       	add	r0,r0
80004dd6:	00 30       	cp.w	r0,r0
80004dd8:	80 00       	ld.sh	r0,r0[0x0]
80004dda:	47 c0       	lddsp	r0,sp[0x1f0]
80004ddc:	80 00       	ld.sh	r0,r0[0x0]
80004dde:	47 c4       	lddsp	r4,sp[0x1f0]
80004de0:	80 00       	ld.sh	r0,r0[0x0]
80004de2:	58 5c       	cp.w	r12,5
80004de4:	80 00       	ld.sh	r0,r0[0x0]
80004de6:	56 18       	stdsp	sp[0x184],r8
80004de8:	80 00       	ld.sh	r0,r0[0x0]
80004dea:	5a d8       	cp.w	r8,-19
80004dec:	80 00       	ld.sh	r0,r0[0x0]
80004dee:	47 cc       	lddsp	r12,sp[0x1f0]
80004df0:	80 00       	ld.sh	r0,r0[0x0]
80004df2:	57 8c       	stdsp	sp[0x1e0],r12
80004df4:	80 00       	ld.sh	r0,r0[0x0]
80004df6:	59 16       	cp.w	r6,17
80004df8:	80 00       	ld.sh	r0,r0[0x0]
80004dfa:	47 e0       	lddsp	r0,sp[0x1f8]
80004dfc:	80 00       	ld.sh	r0,r0[0x0]
80004dfe:	3c d0       	mov	r0,-51
80004e00:	80 00       	ld.sh	r0,r0[0x0]
80004e02:	5a b0       	cp.w	r0,-21
80004e04:	80 00       	ld.sh	r0,r0[0x0]
80004e06:	5a 84       	cp.w	r4,-24
80004e08:	80 00       	ld.sh	r0,r0[0x0]
80004e0a:	47 f4       	lddsp	r4,sp[0x1fc]
80004e0c:	80 00       	ld.sh	r0,r0[0x0]
80004e0e:	48 04       	lddpc	r4,80004e0c <main+0x4ac>
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	28 94       	sub	r4,-119
80004e14:	80 00       	ld.sh	r0,r0[0x0]
80004e16:	29 32       	sub	r2,-109
80004e18:	80 00       	ld.sh	r0,r0[0x0]
80004e1a:	41 b8       	lddsp	r8,sp[0x6c]
80004e1c:	5f 66       	srmi	r6
80004e1e:	63 6e       	ld.w	lr,r1[0x58]
80004e20:	74 6c       	ld.w	r12,r10[0x18]
80004e22:	00 00       	add	r0,r0
80004e24:	5f 6c       	srmi	r12
80004e26:	69 6e       	ld.w	lr,r4[0x58]
80004e28:	6b 00       	ld.w	r0,r5[0x40]
80004e2a:	00 00       	add	r0,r0
80004e2c:	5f 6b       	srmi	r11
80004e2e:	69 6c       	ld.w	r12,r4[0x58]
80004e30:	6c 00       	ld.w	r0,r6[0x0]
80004e32:	00 00       	add	r0,r0
80004e34:	5f 67       	srmi	r7
80004e36:	65 74       	ld.w	r4,r2[0x5c]
80004e38:	70 69       	ld.w	r9,r8[0x18]
80004e3a:	64 00       	ld.w	r0,r2[0x0]
80004e3c:	5f 67       	srmi	r7
80004e3e:	65 74       	ld.w	r4,r2[0x5c]
80004e40:	74 69       	ld.w	r9,r10[0x18]
80004e42:	6d 65       	ld.w	r5,r6[0x58]
80004e44:	6f 66       	ld.w	r6,r7[0x58]
80004e46:	64 61       	ld.w	r1,r2[0x18]
80004e48:	79 00       	ld.w	r0,r12[0x40]
80004e4a:	00 00       	add	r0,r0
80004e4c:	5f 75       	srpl	r5
80004e4e:	6e 6c       	ld.w	r12,r7[0x18]
80004e50:	69 6e       	ld.w	lr,r4[0x58]
80004e52:	6b 00       	ld.w	r0,r5[0x40]
80004e54:	5f 65       	srmi	r5
80004e56:	78 65       	ld.w	r5,r12[0x18]
80004e58:	63 76       	ld.w	r6,r1[0x5c]
80004e5a:	65 00       	ld.w	r0,r2[0x40]
80004e5c:	5f 66       	srmi	r6
80004e5e:	6f 72       	ld.w	r2,r7[0x5c]
80004e60:	6b 00       	ld.w	r0,r5[0x40]
80004e62:	00 00       	add	r0,r0
80004e64:	5f 77       	srpl	r7
80004e66:	61 69       	ld.w	r9,r0[0x58]
80004e68:	74 00       	ld.w	r0,r10[0x0]
80004e6a:	00 00       	add	r0,r0
80004e6c:	73 69       	ld.w	r9,r9[0x58]
80004e6e:	67 66       	ld.w	r6,r3[0x58]
80004e70:	69 6c       	ld.w	r12,r4[0x58]
80004e72:	6c 73       	ld.w	r3,r6[0x1c]
80004e74:	65 74       	ld.w	r4,r2[0x5c]
80004e76:	00 00       	add	r0,r0
80004e78:	73 69       	ld.w	r9,r9[0x58]
80004e7a:	67 70       	ld.w	r0,r3[0x5c]
80004e7c:	72 6f       	ld.w	pc,r9[0x18]
80004e7e:	63 6d       	ld.w	sp,r1[0x58]
80004e80:	61 73       	ld.w	r3,r0[0x5c]
80004e82:	6b 00       	ld.w	r0,r5[0x40]
80004e84:	5f 6f       	srmi	pc
80004e86:	70 65       	ld.w	r5,r8[0x18]
80004e88:	6e 00       	ld.w	r0,r7[0x0]
80004e8a:	00 00       	add	r0,r0
80004e8c:	5f 63       	srmi	r3
80004e8e:	6c 6f       	ld.w	pc,r6[0x18]
80004e90:	73 65       	ld.w	r5,r9[0x58]
80004e92:	00 00       	add	r0,r0
80004e94:	5f 6c       	srmi	r12
80004e96:	73 65       	ld.w	r5,r9[0x58]
80004e98:	65 6b       	ld.w	r11,r2[0x58]
80004e9a:	00 00       	add	r0,r0
80004e9c:	5f 72       	srpl	r2
80004e9e:	65 61       	ld.w	r1,r2[0x58]
80004ea0:	64 20       	ld.w	r0,r2[0x8]
80004ea2:	77 69       	ld.w	r9,r11[0x58]
80004ea4:	74 68       	ld.w	r8,r10[0x18]
80004ea6:	20 66       	sub	r6,6
80004ea8:	69 6c       	ld.w	r12,r4[0x58]
80004eaa:	65 64       	ld.w	r4,r2[0x58]
80004eac:	65 73       	ld.w	r3,r2[0x5c]
80004eae:	20 21       	sub	r1,2
80004eb0:	3d 20       	mov	r0,-46
80004eb2:	30 00       	mov	r0,0
80004eb4:	5f 77       	srpl	r7
80004eb6:	72 69       	ld.w	r9,r9[0x18]
80004eb8:	74 65       	ld.w	r5,r10[0x18]
80004eba:	20 77       	sub	r7,7
80004ebc:	69 74       	ld.w	r4,r4[0x5c]
80004ebe:	68 20       	ld.w	r0,r4[0x8]
80004ec0:	66 69       	ld.w	r9,r3[0x18]
80004ec2:	6c 65       	ld.w	r5,r6[0x18]
80004ec4:	20 21       	sub	r1,2
80004ec6:	3d 20       	mov	r0,-46
80004ec8:	31 20       	mov	r0,18
80004eca:	6f 72       	ld.w	r2,r7[0x5c]
80004ecc:	20 32       	sub	r2,3
	...

80004ed0 <unimplemented_syscall>:
80004ed0:	eb cd 40 80 	pushm	r7,lr
80004ed4:	1a 97       	mov	r7,sp
80004ed6:	20 1d       	sub	sp,4
80004ed8:	ef 4c ff fc 	st.w	r7[-4],r12
80004edc:	3f f8       	mov	r8,-1
80004ede:	10 9c       	mov	r12,r8
80004ee0:	2f fd       	sub	sp,-4
80004ee2:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ee6:	d7 03       	nop

80004ee8 <_init_startup>:
80004ee8:	eb cd 40 80 	pushm	r7,lr
80004eec:	1a 97       	mov	r7,sp
80004eee:	20 2d       	sub	sp,8
80004ef0:	e0 6c 01 04 	mov	r12,260
80004ef4:	f0 1f 00 0c 	mcall	80004f24 <_init_startup+0x3c>
80004ef8:	18 98       	mov	r8,r12
80004efa:	ef 48 ff fc 	st.w	r7[-4],r8
80004efe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f02:	58 08       	cp.w	r8,0
80004f04:	c0 a0       	breq	80004f18 <_init_startup+0x30>
80004f06:	ee fb ff fc 	ld.w	r11,r7[-4]
80004f0a:	48 8c       	lddpc	r12,80004f28 <_init_startup+0x40>
80004f0c:	f0 1f 00 08 	mcall	80004f2c <_init_startup+0x44>
80004f10:	30 18       	mov	r8,1
80004f12:	ef 48 ff f8 	st.w	r7[-8],r8
80004f16:	c0 28       	rjmp	80004f1a <_init_startup+0x32>
80004f18:	c0 08       	rjmp	80004f18 <_init_startup+0x30>
80004f1a:	ee fc ff f8 	ld.w	r12,r7[-8]
80004f1e:	2f ed       	sub	sp,-8
80004f20:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f24:	80 00       	ld.sh	r0,r0[0x0]
80004f26:	5e b8       	rethi	r8
80004f28:	80 00       	ld.sh	r0,r0[0x0]
80004f2a:	b6 00       	st.h	r11[0x0],r0
80004f2c:	80 00       	ld.sh	r0,r0[0x0]
80004f2e:	51 d8       	stdsp	sp[0x74],r8

80004f30 <isatty>:
80004f30:	eb cd 40 80 	pushm	r7,lr
80004f34:	1a 97       	mov	r7,sp
80004f36:	20 1d       	sub	sp,4
80004f38:	ef 4c ff fc 	st.w	r7[-4],r12
80004f3c:	30 08       	mov	r8,0
80004f3e:	10 9c       	mov	r12,r8
80004f40:	2f fd       	sub	sp,-4
80004f42:	e3 cd 80 80 	ldm	sp++,r7,pc

80004f46 <_fstat>:
80004f46:	eb cd 40 80 	pushm	r7,lr
80004f4a:	1a 97       	mov	r7,sp
80004f4c:	20 2d       	sub	sp,8
80004f4e:	ef 4c ff fc 	st.w	r7[-4],r12
80004f52:	ef 4b ff f8 	st.w	r7[-8],r11
80004f56:	3f f8       	mov	r8,-1
80004f58:	10 9c       	mov	r12,r8
80004f5a:	2f ed       	sub	sp,-8
80004f5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004f60 <_sbrk>:
80004f60:	eb cd 40 80 	pushm	r7,lr
80004f64:	1a 97       	mov	r7,sp
80004f66:	20 3d       	sub	sp,12
80004f68:	ef 4c ff f8 	st.w	r7[-8],r12
80004f6c:	49 78       	lddpc	r8,80004fc8 <_sbrk+0x68>
80004f6e:	70 08       	ld.w	r8,r8[0x0]
80004f70:	58 08       	cp.w	r8,0
80004f72:	c0 41       	brne	80004f7a <_sbrk+0x1a>
80004f74:	49 59       	lddpc	r9,80004fc8 <_sbrk+0x68>
80004f76:	49 68       	lddpc	r8,80004fcc <_sbrk+0x6c>
80004f78:	93 08       	st.w	r9[0x0],r8
80004f7a:	49 48       	lddpc	r8,80004fc8 <_sbrk+0x68>
80004f7c:	70 09       	ld.w	r9,r8[0x0]
80004f7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f82:	10 09       	add	r9,r8
80004f84:	49 38       	lddpc	r8,80004fd0 <_sbrk+0x70>
80004f86:	10 39       	cp.w	r9,r8
80004f88:	e0 8b 00 12 	brhi	80004fac <_sbrk+0x4c>
80004f8c:	48 f8       	lddpc	r8,80004fc8 <_sbrk+0x68>
80004f8e:	70 08       	ld.w	r8,r8[0x0]
80004f90:	ef 48 ff fc 	st.w	r7[-4],r8
80004f94:	48 d8       	lddpc	r8,80004fc8 <_sbrk+0x68>
80004f96:	70 09       	ld.w	r9,r8[0x0]
80004f98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f9c:	10 09       	add	r9,r8
80004f9e:	48 b8       	lddpc	r8,80004fc8 <_sbrk+0x68>
80004fa0:	91 09       	st.w	r8[0x0],r9
80004fa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fa6:	ef 48 ff f4 	st.w	r7[-12],r8
80004faa:	c0 98       	rjmp	80004fbc <_sbrk+0x5c>
80004fac:	f0 1f 00 0a 	mcall	80004fd4 <_sbrk+0x74>
80004fb0:	18 99       	mov	r9,r12
80004fb2:	30 c8       	mov	r8,12
80004fb4:	93 08       	st.w	r9[0x0],r8
80004fb6:	3f f8       	mov	r8,-1
80004fb8:	ef 48 ff f4 	st.w	r7[-12],r8
80004fbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fc0:	10 9c       	mov	r12,r8
80004fc2:	2f dd       	sub	sp,-12
80004fc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fc8:	00 00       	add	r0,r0
80004fca:	06 68       	and	r8,r3
80004fcc:	00 00       	add	r0,r0
80004fce:	06 a8       	st.w	r3++,r8
80004fd0:	00 00       	add	r0,r0
80004fd2:	f0 00       	*unknown*
80004fd4:	80 00       	ld.sh	r0,r0[0x0]
80004fd6:	5e 6c       	retmi	r12

80004fd8 <_init_argv>:
80004fd8:	eb cd 40 80 	pushm	r7,lr
80004fdc:	1a 97       	mov	r7,sp
80004fde:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fe2:	d7 03       	nop

80004fe4 <_close>:
80004fe4:	eb cd 40 80 	pushm	r7,lr
80004fe8:	1a 97       	mov	r7,sp
80004fea:	20 1d       	sub	sp,4
80004fec:	ef 4c ff fc 	st.w	r7[-4],r12
80004ff0:	48 4c       	lddpc	r12,80005000 <_close+0x1c>
80004ff2:	f0 1f 00 05 	mcall	80005004 <_close+0x20>
80004ff6:	18 98       	mov	r8,r12
80004ff8:	10 9c       	mov	r12,r8
80004ffa:	2f fd       	sub	sp,-4
80004ffc:	e3 cd 80 80 	ldm	sp++,r7,pc
80005000:	80 00       	ld.sh	r0,r0[0x0]
80005002:	4e 8c       	lddpc	r12,800051a0 <usart_getc+0x10>
80005004:	80 00       	ld.sh	r0,r0[0x0]
80005006:	4e d0       	lddpc	r0,800051b8 <usart_getc+0x28>

80005008 <_lseek>:
80005008:	eb cd 40 80 	pushm	r7,lr
8000500c:	1a 97       	mov	r7,sp
8000500e:	20 3d       	sub	sp,12
80005010:	ef 4c ff fc 	st.w	r7[-4],r12
80005014:	ef 4b ff f8 	st.w	r7[-8],r11
80005018:	ef 4a ff f4 	st.w	r7[-12],r10
8000501c:	48 4c       	lddpc	r12,8000502c <_lseek+0x24>
8000501e:	f0 1f 00 05 	mcall	80005030 <_lseek+0x28>
80005022:	18 98       	mov	r8,r12
80005024:	10 9c       	mov	r12,r8
80005026:	2f dd       	sub	sp,-12
80005028:	e3 cd 80 80 	ldm	sp++,r7,pc
8000502c:	80 00       	ld.sh	r0,r0[0x0]
8000502e:	4e 94       	lddpc	r4,800051d0 <unhandled_exception+0xc>
80005030:	80 00       	ld.sh	r0,r0[0x0]
80005032:	4e d0       	lddpc	r0,800051e4 <init_exceptions+0xc>

80005034 <_exit>:
80005034:	eb cd 40 80 	pushm	r7,lr
80005038:	1a 97       	mov	r7,sp
8000503a:	20 1d       	sub	sp,4
8000503c:	ef 4c ff fc 	st.w	r7[-4],r12
80005040:	c0 08       	rjmp	80005040 <_exit+0xc>
80005042:	d7 03       	nop

80005044 <_read>:
80005044:	eb cd 40 c0 	pushm	r6-r7,lr
80005048:	1a 97       	mov	r7,sp
8000504a:	20 5d       	sub	sp,20
8000504c:	ef 4c ff f8 	st.w	r7[-8],r12
80005050:	ef 4b ff f4 	st.w	r7[-12],r11
80005054:	ef 4a ff f0 	st.w	r7[-16],r10
80005058:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000505c:	58 08       	cp.w	r8,0
8000505e:	c0 80       	breq	8000506e <_read+0x2a>
80005060:	49 6c       	lddpc	r12,800050b8 <_read+0x74>
80005062:	f0 1f 00 17 	mcall	800050bc <_read+0x78>
80005066:	18 98       	mov	r8,r12
80005068:	ef 48 ff ec 	st.w	r7[-20],r8
8000506c:	c2 08       	rjmp	800050ac <_read+0x68>
8000506e:	30 08       	mov	r8,0
80005070:	ef 48 ff fc 	st.w	r7[-4],r8
80005074:	c1 28       	rjmp	80005098 <_read+0x54>
80005076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000507a:	10 99       	mov	r9,r8
8000507c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005080:	f2 08 00 06 	add	r6,r9,r8
80005084:	f0 1f 00 0f 	mcall	800050c0 <_read+0x7c>
80005088:	18 98       	mov	r8,r12
8000508a:	5c 58       	castu.b	r8
8000508c:	ac 88       	st.b	r6[0x0],r8
8000508e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005092:	2f f8       	sub	r8,-1
80005094:	ef 48 ff fc 	st.w	r7[-4],r8
80005098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000509c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a0:	10 39       	cp.w	r9,r8
800050a2:	ce a5       	brlt	80005076 <_read+0x32>
800050a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a8:	ef 48 ff ec 	st.w	r7[-20],r8
800050ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800050b0:	10 9c       	mov	r12,r8
800050b2:	2f bd       	sub	sp,-20
800050b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800050b8:	80 00       	ld.sh	r0,r0[0x0]
800050ba:	4e 9c       	lddpc	r12,8000525c <__avr32_f64_sub>
800050bc:	80 00       	ld.sh	r0,r0[0x0]
800050be:	4e d0       	lddpc	r0,80005270 <__avr32_f64_sub+0x14>
800050c0:	80 00       	ld.sh	r0,r0[0x0]
800050c2:	51 90       	stdsp	sp[0x64],r0

800050c4 <_write>:
800050c4:	eb cd 40 80 	pushm	r7,lr
800050c8:	1a 97       	mov	r7,sp
800050ca:	20 5d       	sub	sp,20
800050cc:	ef 4c ff f8 	st.w	r7[-8],r12
800050d0:	ef 4b ff f4 	st.w	r7[-12],r11
800050d4:	ef 4a ff f0 	st.w	r7[-16],r10
800050d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050dc:	58 18       	cp.w	r8,1
800050de:	c1 00       	breq	800050fe <_write+0x3a>
800050e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050e4:	58 28       	cp.w	r8,2
800050e6:	c0 c0       	breq	800050fe <_write+0x3a>
800050e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050ec:	58 38       	cp.w	r8,3
800050ee:	c0 80       	breq	800050fe <_write+0x3a>
800050f0:	49 6c       	lddpc	r12,80005148 <_write+0x84>
800050f2:	f0 1f 00 17 	mcall	8000514c <_write+0x88>
800050f6:	18 98       	mov	r8,r12
800050f8:	ef 48 ff ec 	st.w	r7[-20],r8
800050fc:	c1 f8       	rjmp	8000513a <_write+0x76>
800050fe:	30 08       	mov	r8,0
80005100:	ef 48 ff fc 	st.w	r7[-4],r8
80005104:	c1 18       	rjmp	80005126 <_write+0x62>
80005106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000510a:	10 99       	mov	r9,r8
8000510c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005110:	f2 08 00 08 	add	r8,r9,r8
80005114:	11 88       	ld.ub	r8,r8[0x0]
80005116:	10 9c       	mov	r12,r8
80005118:	f0 1f 00 0e 	mcall	80005150 <_write+0x8c>
8000511c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005120:	2f f8       	sub	r8,-1
80005122:	ef 48 ff fc 	st.w	r7[-4],r8
80005126:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000512a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000512e:	10 39       	cp.w	r9,r8
80005130:	ce b5       	brlt	80005106 <_write+0x42>
80005132:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005136:	ef 48 ff ec 	st.w	r7[-20],r8
8000513a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000513e:	10 9c       	mov	r12,r8
80005140:	2f bd       	sub	sp,-20
80005142:	e3 cd 80 80 	ldm	sp++,r7,pc
80005146:	00 00       	add	r0,r0
80005148:	80 00       	ld.sh	r0,r0[0x0]
8000514a:	4e b4       	lddpc	r4,800052f4 <__avr32_f64_sub_shift_done+0x20>
8000514c:	80 00       	ld.sh	r0,r0[0x0]
8000514e:	4e d0       	lddpc	r0,80005300 <__avr32_f64_sub_longnormalize_done+0x6>
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	51 54       	stdsp	sp[0x54],r4

80005154 <usart_putc>:
80005154:	eb cd 40 80 	pushm	r7,lr
80005158:	1a 97       	mov	r7,sp
8000515a:	20 2d       	sub	sp,8
8000515c:	18 98       	mov	r8,r12
8000515e:	ef 68 ff f8 	st.b	r7[-8],r8
80005162:	48 b8       	lddpc	r8,8000518c <usart_putc+0x38>
80005164:	70 08       	ld.w	r8,r8[0x0]
80005166:	ef 48 ff fc 	st.w	r7[-4],r8
8000516a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000516e:	2e c8       	sub	r8,-20
80005170:	70 08       	ld.w	r8,r8[0x0]
80005172:	e2 18 00 02 	andl	r8,0x2,COH
80005176:	cf a0       	breq	8000516a <usart_putc+0x16>
80005178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000517c:	f0 c9 ff e4 	sub	r9,r8,-28
80005180:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005184:	93 08       	st.w	r9[0x0],r8
80005186:	2f ed       	sub	sp,-8
80005188:	e3 cd 80 80 	ldm	sp++,r7,pc
8000518c:	00 00       	add	r0,r0
8000518e:	00 3c       	cp.w	r12,r0

80005190 <usart_getc>:
80005190:	eb cd 40 80 	pushm	r7,lr
80005194:	1a 97       	mov	r7,sp
80005196:	20 1d       	sub	sp,4
80005198:	48 a8       	lddpc	r8,800051c0 <usart_getc+0x30>
8000519a:	70 08       	ld.w	r8,r8[0x0]
8000519c:	ef 48 ff fc 	st.w	r7[-4],r8
800051a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051a4:	2e c8       	sub	r8,-20
800051a6:	70 08       	ld.w	r8,r8[0x0]
800051a8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800051ac:	cf a0       	breq	800051a0 <usart_getc+0x10>
800051ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051b2:	2e 88       	sub	r8,-24
800051b4:	70 08       	ld.w	r8,r8[0x0]
800051b6:	10 9c       	mov	r12,r8
800051b8:	2f fd       	sub	sp,-4
800051ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800051be:	00 00       	add	r0,r0
800051c0:	00 00       	add	r0,r0
800051c2:	00 3c       	cp.w	r12,r0

800051c4 <unhandled_exception>:
800051c4:	eb cd 40 80 	pushm	r7,lr
800051c8:	1a 97       	mov	r7,sp
800051ca:	20 2d       	sub	sp,8
800051cc:	ef 4c ff fc 	st.w	r7[-4],r12
800051d0:	ef 4b ff f8 	st.w	r7[-8],r11
800051d4:	c0 08       	rjmp	800051d4 <unhandled_exception+0x10>
800051d6:	d7 03       	nop

800051d8 <init_exceptions>:
800051d8:	eb cd 40 80 	pushm	r7,lr
800051dc:	1a 97       	mov	r7,sp
800051de:	20 5d       	sub	sp,20
800051e0:	ef 4c ff f0 	st.w	r7[-16],r12
800051e4:	ef 4b ff ec 	st.w	r7[-20],r11
800051e8:	34 18       	mov	r8,65
800051ea:	ef 48 ff f8 	st.w	r7[-8],r8
800051ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051f2:	e3 b8 00 01 	mtsr	0x4,r8
800051f6:	e1 b8 00 00 	mfsr	r8,0x0
800051fa:	ef 48 ff f4 	st.w	r7[-12],r8
800051fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005202:	e0 18 ff ea 	andl	r8,0xffea
80005206:	ef 48 ff f4 	st.w	r7[-12],r8
8000520a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000520e:	e3 b8 00 00 	mtsr	0x0,r8
80005212:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005216:	48 f8       	lddpc	r8,80005250 <init_exceptions+0x78>
80005218:	91 09       	st.w	r8[0x0],r9
8000521a:	30 08       	mov	r8,0
8000521c:	ef 48 ff fc 	st.w	r7[-4],r8
80005220:	c0 f8       	rjmp	8000523e <init_exceptions+0x66>
80005222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005226:	a3 68       	lsl	r8,0x2
80005228:	10 99       	mov	r9,r8
8000522a:	48 a8       	lddpc	r8,80005250 <init_exceptions+0x78>
8000522c:	70 08       	ld.w	r8,r8[0x0]
8000522e:	10 09       	add	r9,r8
80005230:	48 98       	lddpc	r8,80005254 <init_exceptions+0x7c>
80005232:	93 08       	st.w	r9[0x0],r8
80005234:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005238:	2f f8       	sub	r8,-1
8000523a:	ef 48 ff fc 	st.w	r7[-4],r8
8000523e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005242:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005246:	10 39       	cp.w	r9,r8
80005248:	ce d5       	brlt	80005222 <init_exceptions+0x4a>
8000524a:	2f bd       	sub	sp,-20
8000524c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005250:	00 00       	add	r0,r0
80005252:	06 6c       	and	r12,r3
80005254:	80 00       	ld.sh	r0,r0[0x0]
80005256:	51 c4       	stdsp	sp[0x70],r4

80005258 <__avr32_f64_sub_from_add>:
80005258:	ee 19 80 00 	eorh	r9,0x8000

8000525c <__avr32_f64_sub>:
8000525c:	f7 e9 20 0c 	eor	r12,r11,r9
80005260:	e0 86 00 ca 	brmi	800053f4 <__avr32_f64_add_from_sub>
80005264:	eb cd 40 e0 	pushm	r5-r7,lr
80005268:	16 9c       	mov	r12,r11
8000526a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000526e:	bf db       	cbr	r11,0x1f
80005270:	bf d9       	cbr	r9,0x1f
80005272:	10 3a       	cp.w	r10,r8
80005274:	f2 0b 13 00 	cpc	r11,r9
80005278:	c0 92       	brcc	8000528a <__avr32_f64_sub+0x2e>
8000527a:	16 97       	mov	r7,r11
8000527c:	12 9b       	mov	r11,r9
8000527e:	0e 99       	mov	r9,r7
80005280:	14 97       	mov	r7,r10
80005282:	10 9a       	mov	r10,r8
80005284:	0e 98       	mov	r8,r7
80005286:	ee 1c 80 00 	eorh	r12,0x8000
8000528a:	f6 07 16 14 	lsr	r7,r11,0x14
8000528e:	ab 7b       	lsl	r11,0xb
80005290:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80005294:	ab 7a       	lsl	r10,0xb
80005296:	bf bb       	sbr	r11,0x1f
80005298:	f2 06 16 14 	lsr	r6,r9,0x14
8000529c:	c4 40       	breq	80005324 <__avr32_f64_sub_opL_subnormal>
8000529e:	ab 79       	lsl	r9,0xb
800052a0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800052a4:	ab 78       	lsl	r8,0xb
800052a6:	bf b9       	sbr	r9,0x1f

800052a8 <__avr32_f64_sub_opL_subnormal_done>:
800052a8:	e0 47 07 ff 	cp.w	r7,2047
800052ac:	c4 f0       	breq	8000534a <__avr32_f64_sub_opH_nan_or_inf>
800052ae:	0e 26       	rsub	r6,r7
800052b0:	c1 20       	breq	800052d4 <__avr32_f64_sub_shift_done>
800052b2:	ec 05 11 20 	rsub	r5,r6,32
800052b6:	e0 46 00 20 	cp.w	r6,32
800052ba:	c7 c2       	brcc	800053b2 <__avr32_f64_sub_longshift>
800052bc:	f0 05 09 4e 	lsl	lr,r8,r5
800052c0:	f2 05 09 45 	lsl	r5,r9,r5
800052c4:	f0 06 0a 48 	lsr	r8,r8,r6
800052c8:	f2 06 0a 49 	lsr	r9,r9,r6
800052cc:	0a 48       	or	r8,r5
800052ce:	58 0e       	cp.w	lr,0
800052d0:	5f 1e       	srne	lr
800052d2:	1c 48       	or	r8,lr

800052d4 <__avr32_f64_sub_shift_done>:
800052d4:	10 1a       	sub	r10,r8
800052d6:	f6 09 01 4b 	sbc	r11,r11,r9
800052da:	f6 06 12 00 	clz	r6,r11
800052de:	c0 e0       	breq	800052fa <__avr32_f64_sub_longnormalize_done>
800052e0:	c7 83       	brcs	800053d0 <__avr32_f64_sub_longnormalize>
800052e2:	ec 0e 11 20 	rsub	lr,r6,32
800052e6:	f6 06 09 4b 	lsl	r11,r11,r6
800052ea:	f4 0e 0a 4e 	lsr	lr,r10,lr
800052ee:	1c 4b       	or	r11,lr
800052f0:	f4 06 09 4a 	lsl	r10,r10,r6
800052f4:	0c 17       	sub	r7,r6
800052f6:	e0 8a 00 39 	brle	80005368 <__avr32_f64_sub_subnormal_result>

800052fa <__avr32_f64_sub_longnormalize_done>:
800052fa:	f4 09 15 15 	lsl	r9,r10,0x15
800052fe:	ab 9a       	lsr	r10,0xb
80005300:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005304:	ab 9b       	lsr	r11,0xb
80005306:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000530a:	18 4b       	or	r11,r12

8000530c <__avr32_f64_sub_round>:
8000530c:	fc 17 80 00 	movh	r7,0x8000
80005310:	ed ba 00 00 	bld	r10,0x0
80005314:	f7 b7 01 ff 	subne	r7,-1
80005318:	0e 39       	cp.w	r9,r7
8000531a:	5f 29       	srhs	r9
8000531c:	12 0a       	add	r10,r9
8000531e:	5c 0b       	acr	r11
80005320:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005324 <__avr32_f64_sub_opL_subnormal>:
80005324:	ab 79       	lsl	r9,0xb
80005326:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000532a:	ab 78       	lsl	r8,0xb
8000532c:	f3 e8 10 0e 	or	lr,r9,r8
80005330:	f9 b6 01 01 	movne	r6,1
80005334:	ee 0e 11 00 	rsub	lr,r7,0
80005338:	f9 b7 00 01 	moveq	r7,1
8000533c:	ef bb 00 1f 	bst	r11,0x1f
80005340:	f7 ea 10 0e 	or	lr,r11,r10
80005344:	f9 b7 00 00 	moveq	r7,0
80005348:	cb 0b       	rjmp	800052a8 <__avr32_f64_sub_opL_subnormal_done>

8000534a <__avr32_f64_sub_opH_nan_or_inf>:
8000534a:	bf db       	cbr	r11,0x1f
8000534c:	f7 ea 10 0e 	or	lr,r11,r10
80005350:	c0 81       	brne	80005360 <__avr32_f64_sub_return_nan>
80005352:	e0 46 07 ff 	cp.w	r6,2047
80005356:	c0 50       	breq	80005360 <__avr32_f64_sub_return_nan>
80005358:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000535c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005360 <__avr32_f64_sub_return_nan>:
80005360:	3f fa       	mov	r10,-1
80005362:	3f fb       	mov	r11,-1
80005364:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005368 <__avr32_f64_sub_subnormal_result>:
80005368:	5c 37       	neg	r7
8000536a:	2f f7       	sub	r7,-1
8000536c:	f1 b7 04 c0 	satu	r7,0x6
80005370:	e0 47 00 20 	cp.w	r7,32
80005374:	c1 14       	brge	80005396 <__avr32_f64_sub_subnormal_result+0x2e>
80005376:	ee 08 11 20 	rsub	r8,r7,32
8000537a:	f4 08 09 49 	lsl	r9,r10,r8
8000537e:	5f 16       	srne	r6
80005380:	f4 07 0a 4a 	lsr	r10,r10,r7
80005384:	0c 4a       	or	r10,r6
80005386:	f6 08 09 49 	lsl	r9,r11,r8
8000538a:	f5 e9 10 0a 	or	r10,r10,r9
8000538e:	f4 07 0a 4b 	lsr	r11,r10,r7
80005392:	30 07       	mov	r7,0
80005394:	cb 3b       	rjmp	800052fa <__avr32_f64_sub_longnormalize_done>
80005396:	ee 08 11 40 	rsub	r8,r7,64
8000539a:	f6 08 09 49 	lsl	r9,r11,r8
8000539e:	14 49       	or	r9,r10
800053a0:	5f 16       	srne	r6
800053a2:	f6 07 0a 4a 	lsr	r10,r11,r7
800053a6:	0c 4a       	or	r10,r6
800053a8:	30 0b       	mov	r11,0
800053aa:	30 07       	mov	r7,0
800053ac:	ca 7b       	rjmp	800052fa <__avr32_f64_sub_longnormalize_done>
800053ae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800053b2 <__avr32_f64_sub_longshift>:
800053b2:	f1 b6 04 c0 	satu	r6,0x6
800053b6:	f0 0e 17 00 	moveq	lr,r8
800053ba:	c0 40       	breq	800053c2 <__avr32_f64_sub_longshift+0x10>
800053bc:	f2 05 09 4e 	lsl	lr,r9,r5
800053c0:	10 4e       	or	lr,r8
800053c2:	f2 06 0a 48 	lsr	r8,r9,r6
800053c6:	30 09       	mov	r9,0
800053c8:	58 0e       	cp.w	lr,0
800053ca:	5f 1e       	srne	lr
800053cc:	1c 48       	or	r8,lr
800053ce:	c8 3b       	rjmp	800052d4 <__avr32_f64_sub_shift_done>

800053d0 <__avr32_f64_sub_longnormalize>:
800053d0:	f4 06 12 00 	clz	r6,r10
800053d4:	f9 b7 03 00 	movlo	r7,0
800053d8:	f9 b6 03 00 	movlo	r6,0
800053dc:	f9 bc 03 00 	movlo	r12,0
800053e0:	f7 b6 02 e0 	subhs	r6,-32
800053e4:	f4 06 09 4b 	lsl	r11,r10,r6
800053e8:	30 0a       	mov	r10,0
800053ea:	0c 17       	sub	r7,r6
800053ec:	fe 9a ff be 	brle	80005368 <__avr32_f64_sub_subnormal_result>
800053f0:	c8 5b       	rjmp	800052fa <__avr32_f64_sub_longnormalize_done>
	...

800053f4 <__avr32_f64_add_from_sub>:
800053f4:	ee 19 80 00 	eorh	r9,0x8000

800053f8 <__avr32_f64_add>:
800053f8:	f7 e9 20 0c 	eor	r12,r11,r9
800053fc:	fe 96 ff 2e 	brmi	80005258 <__avr32_f64_sub_from_add>
80005400:	eb cd 40 e0 	pushm	r5-r7,lr
80005404:	16 9c       	mov	r12,r11
80005406:	e6 1c 80 00 	andh	r12,0x8000,COH
8000540a:	bf db       	cbr	r11,0x1f
8000540c:	bf d9       	cbr	r9,0x1f
8000540e:	12 3b       	cp.w	r11,r9
80005410:	c0 72       	brcc	8000541e <__avr32_f64_add+0x26>
80005412:	16 97       	mov	r7,r11
80005414:	12 9b       	mov	r11,r9
80005416:	0e 99       	mov	r9,r7
80005418:	14 97       	mov	r7,r10
8000541a:	10 9a       	mov	r10,r8
8000541c:	0e 98       	mov	r8,r7
8000541e:	30 0e       	mov	lr,0
80005420:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80005424:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80005428:	b5 ab       	sbr	r11,0x14
8000542a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000542e:	c5 f0       	breq	800054ec <__avr32_f64_add_op2_subnormal>
80005430:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80005434:	b5 a9       	sbr	r9,0x14
80005436:	e0 47 07 ff 	cp.w	r7,2047
8000543a:	c2 50       	breq	80005484 <__avr32_f64_add_opH_nan_or_inf>
8000543c:	0e 26       	rsub	r6,r7
8000543e:	c0 f0       	breq	8000545c <__avr32_f64_add_shift_done>
80005440:	ec 05 11 20 	rsub	r5,r6,32
80005444:	e0 46 00 20 	cp.w	r6,32
80005448:	c3 52       	brcc	800054b2 <__avr32_f64_add_longshift>
8000544a:	f0 05 09 4e 	lsl	lr,r8,r5
8000544e:	f2 05 09 45 	lsl	r5,r9,r5
80005452:	f0 06 0a 48 	lsr	r8,r8,r6
80005456:	f2 06 0a 49 	lsr	r9,r9,r6
8000545a:	0a 48       	or	r8,r5

8000545c <__avr32_f64_add_shift_done>:
8000545c:	10 0a       	add	r10,r8
8000545e:	f6 09 00 4b 	adc	r11,r11,r9
80005462:	ed bb 00 15 	bld	r11,0x15
80005466:	c3 40       	breq	800054ce <__avr32_f64_add_res_of>

80005468 <__avr32_f64_add_res_of_done>:
80005468:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000546c:	18 4b       	or	r11,r12

8000546e <__avr32_f64_add_round>:
8000546e:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80005472:	18 4e       	or	lr,r12
80005474:	ee 1e 80 00 	eorh	lr,0x8000
80005478:	f1 be 04 20 	satu	lr,0x1
8000547c:	1c 0a       	add	r10,lr
8000547e:	5c 0b       	acr	r11
80005480:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005484 <__avr32_f64_add_opH_nan_or_inf>:
80005484:	b5 cb       	cbr	r11,0x14
80005486:	f7 ea 10 0e 	or	lr,r11,r10
8000548a:	c1 01       	brne	800054aa <__avr32_f64_add_return_nan>
8000548c:	e0 46 07 ff 	cp.w	r6,2047
80005490:	c0 30       	breq	80005496 <__avr32_f64_add_opL_nan_or_inf>
80005492:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005496 <__avr32_f64_add_opL_nan_or_inf>:
80005496:	b5 c9       	cbr	r9,0x14
80005498:	f3 e8 10 0e 	or	lr,r9,r8
8000549c:	c0 71       	brne	800054aa <__avr32_f64_add_return_nan>
8000549e:	30 0a       	mov	r10,0
800054a0:	fc 1b 7f f0 	movh	r11,0x7ff0
800054a4:	18 4b       	or	r11,r12
800054a6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800054aa <__avr32_f64_add_return_nan>:
800054aa:	3f fa       	mov	r10,-1
800054ac:	3f fb       	mov	r11,-1
800054ae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800054b2 <__avr32_f64_add_longshift>:
800054b2:	f1 b6 04 c0 	satu	r6,0x6
800054b6:	f0 0e 17 00 	moveq	lr,r8
800054ba:	c0 60       	breq	800054c6 <__avr32_f64_add_longshift+0x14>
800054bc:	f2 05 09 4e 	lsl	lr,r9,r5
800054c0:	58 08       	cp.w	r8,0
800054c2:	5f 18       	srne	r8
800054c4:	10 4e       	or	lr,r8
800054c6:	f2 06 0a 48 	lsr	r8,r9,r6
800054ca:	30 09       	mov	r9,0
800054cc:	cc 8b       	rjmp	8000545c <__avr32_f64_add_shift_done>

800054ce <__avr32_f64_add_res_of>:
800054ce:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800054d2:	a1 9b       	lsr	r11,0x1
800054d4:	5d 0a       	ror	r10
800054d6:	5d 0e       	ror	lr
800054d8:	2f f7       	sub	r7,-1
800054da:	e0 47 07 ff 	cp.w	r7,2047
800054de:	f9 ba 00 00 	moveq	r10,0
800054e2:	f9 bb 00 00 	moveq	r11,0
800054e6:	f9 be 00 00 	moveq	lr,0
800054ea:	cb fb       	rjmp	80005468 <__avr32_f64_add_res_of_done>

800054ec <__avr32_f64_add_op2_subnormal>:
800054ec:	30 16       	mov	r6,1
800054ee:	58 07       	cp.w	r7,0
800054f0:	ca 31       	brne	80005436 <__avr32_f64_add+0x3e>
800054f2:	b5 cb       	cbr	r11,0x14
800054f4:	10 0a       	add	r10,r8
800054f6:	f6 09 00 4b 	adc	r11,r11,r9
800054fa:	18 4b       	or	r11,r12
800054fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005500:	58 17       	cp.w	r7,1
80005502:	58 09       	cp.w	r9,0
80005504:	f5 b8 00 00 	subfeq	r8,0
80005508:	1b 07       	ld.w	r7,sp++
8000550a:	1b 0e       	ld.w	lr,sp++
8000550c:	5e fc       	retal	r12
	...

80005510 <__avr32_u32_to_f64>:
80005510:	f8 cb 00 00 	sub	r11,r12,0
80005514:	30 0c       	mov	r12,0
80005516:	c0 38       	rjmp	8000551c <__avr32_s32_to_f64+0x4>

80005518 <__avr32_s32_to_f64>:
80005518:	18 9b       	mov	r11,r12
8000551a:	5c 4b       	abs	r11
8000551c:	30 0a       	mov	r10,0
8000551e:	5e 0b       	reteq	r11
80005520:	d4 01       	pushm	lr
80005522:	e0 69 04 1e 	mov	r9,1054
80005526:	f6 08 12 00 	clz	r8,r11
8000552a:	c1 70       	breq	80005558 <__avr32_s32_to_f64+0x40>
8000552c:	c0 c3       	brcs	80005544 <__avr32_s32_to_f64+0x2c>
8000552e:	f0 0e 11 20 	rsub	lr,r8,32
80005532:	f6 08 09 4b 	lsl	r11,r11,r8
80005536:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000553a:	1c 4b       	or	r11,lr
8000553c:	f4 08 09 4a 	lsl	r10,r10,r8
80005540:	10 19       	sub	r9,r8
80005542:	c0 b8       	rjmp	80005558 <__avr32_s32_to_f64+0x40>
80005544:	f4 08 12 00 	clz	r8,r10
80005548:	f9 b8 03 00 	movlo	r8,0
8000554c:	f7 b8 02 e0 	subhs	r8,-32
80005550:	f4 08 09 4b 	lsl	r11,r10,r8
80005554:	30 0a       	mov	r10,0
80005556:	10 19       	sub	r9,r8
80005558:	58 09       	cp.w	r9,0
8000555a:	e0 89 00 30 	brgt	800055ba <__avr32_s32_to_f64+0xa2>
8000555e:	5c 39       	neg	r9
80005560:	2f f9       	sub	r9,-1
80005562:	e0 49 00 36 	cp.w	r9,54
80005566:	c0 43       	brcs	8000556e <__avr32_s32_to_f64+0x56>
80005568:	30 0b       	mov	r11,0
8000556a:	30 0a       	mov	r10,0
8000556c:	c2 68       	rjmp	800055b8 <__avr32_s32_to_f64+0xa0>
8000556e:	2f 69       	sub	r9,-10
80005570:	f2 08 11 20 	rsub	r8,r9,32
80005574:	e0 49 00 20 	cp.w	r9,32
80005578:	c0 b2       	brcc	8000558e <__avr32_s32_to_f64+0x76>
8000557a:	f4 08 09 4e 	lsl	lr,r10,r8
8000557e:	f6 08 09 48 	lsl	r8,r11,r8
80005582:	f4 09 0a 4a 	lsr	r10,r10,r9
80005586:	f6 09 0a 4b 	lsr	r11,r11,r9
8000558a:	10 4b       	or	r11,r8
8000558c:	c0 88       	rjmp	8000559c <__avr32_s32_to_f64+0x84>
8000558e:	f6 08 09 4e 	lsl	lr,r11,r8
80005592:	14 4e       	or	lr,r10
80005594:	16 9a       	mov	r10,r11
80005596:	30 0b       	mov	r11,0
80005598:	f4 09 0a 4a 	lsr	r10,r10,r9
8000559c:	ed ba 00 00 	bld	r10,0x0
800055a0:	c0 92       	brcc	800055b2 <__avr32_s32_to_f64+0x9a>
800055a2:	1c 7e       	tst	lr,lr
800055a4:	c0 41       	brne	800055ac <__avr32_s32_to_f64+0x94>
800055a6:	ed ba 00 01 	bld	r10,0x1
800055aa:	c0 42       	brcc	800055b2 <__avr32_s32_to_f64+0x9a>
800055ac:	2f fa       	sub	r10,-1
800055ae:	f7 bb 02 ff 	subhs	r11,-1
800055b2:	5c fc       	rol	r12
800055b4:	5d 0b       	ror	r11
800055b6:	5d 0a       	ror	r10
800055b8:	d8 02       	popm	pc
800055ba:	e0 68 03 ff 	mov	r8,1023
800055be:	ed ba 00 0b 	bld	r10,0xb
800055c2:	f7 b8 00 ff 	subeq	r8,-1
800055c6:	10 0a       	add	r10,r8
800055c8:	5c 0b       	acr	r11
800055ca:	f7 b9 03 fe 	sublo	r9,-2
800055ce:	e0 49 07 ff 	cp.w	r9,2047
800055d2:	c0 55       	brlt	800055dc <__avr32_s32_to_f64+0xc4>
800055d4:	30 0a       	mov	r10,0
800055d6:	fc 1b ff e0 	movh	r11,0xffe0
800055da:	c0 c8       	rjmp	800055f2 <__floatsidf_return_op1>
800055dc:	ed bb 00 1f 	bld	r11,0x1f
800055e0:	f7 b9 01 01 	subne	r9,1
800055e4:	ab 9a       	lsr	r10,0xb
800055e6:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800055ea:	a1 7b       	lsl	r11,0x1
800055ec:	ab 9b       	lsr	r11,0xb
800055ee:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800055f2 <__floatsidf_return_op1>:
800055f2:	a1 7c       	lsl	r12,0x1
800055f4:	5d 0b       	ror	r11
800055f6:	d8 02       	popm	pc
800055f8:	58 17       	cp.w	r7,1
800055fa:	58 09       	cp.w	r9,0
800055fc:	f5 b8 00 00 	subfeq	r8,0
80005600:	1b 07       	ld.w	r7,sp++
80005602:	1b 0e       	ld.w	lr,sp++
80005604:	5e fc       	retal	r12
80005606:	d7 03       	nop
80005608:	58 17       	cp.w	r7,1
8000560a:	58 09       	cp.w	r9,0
8000560c:	f5 b8 00 00 	subfeq	r8,0
80005610:	1b 07       	ld.w	r7,sp++
80005612:	1b 0e       	ld.w	lr,sp++
80005614:	5e fc       	retal	r12
	...

80005618 <__avr32_f32_div>:
80005618:	f7 ec 20 08 	eor	r8,r11,r12
8000561c:	a1 7c       	lsl	r12,0x1
8000561e:	a1 7b       	lsl	r11,0x1
80005620:	c7 a0       	breq	80005714 <__divsf_return_op1+0x16>
80005622:	18 7c       	tst	r12,r12
80005624:	f9 b9 00 00 	moveq	r9,0
80005628:	c0 90       	breq	8000563a <__avr32_f32_div+0x22>
8000562a:	f8 09 16 18 	lsr	r9,r12,0x18
8000562e:	c7 e0       	breq	8000572a <__divsf_return_op1+0x2c>
80005630:	e0 49 00 ff 	cp.w	r9,255
80005634:	c6 82       	brcc	80005704 <__divsf_return_op1+0x6>
80005636:	a7 7c       	lsl	r12,0x7
80005638:	bf bc       	sbr	r12,0x1f
8000563a:	f6 0a 16 18 	lsr	r10,r11,0x18
8000563e:	c7 e0       	breq	8000573a <__divsf_return_op1+0x3c>
80005640:	e0 4a 00 ff 	cp.w	r10,255
80005644:	c6 62       	brcc	80005710 <__divsf_return_op1+0x12>
80005646:	a7 7b       	lsl	r11,0x7
80005648:	bf bb       	sbr	r11,0x1f
8000564a:	58 09       	cp.w	r9,0
8000564c:	f5 bc 00 00 	subfeq	r12,0
80005650:	5e 0d       	reteq	0
80005652:	1a d5       	st.w	--sp,r5
80005654:	bb 27       	st.d	--sp,r6
80005656:	14 19       	sub	r9,r10
80005658:	28 19       	sub	r9,-127
8000565a:	fc 1a 80 00 	movh	r10,0x8000
8000565e:	a3 8c       	lsr	r12,0x2
80005660:	f6 05 16 02 	lsr	r5,r11,0x2
80005664:	f4 0b 16 01 	lsr	r11,r10,0x1
80005668:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000566c:	5c d6       	com	r6
8000566e:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80005672:	f6 05 06 46 	mulu.d	r6,r11,r5
80005676:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000567a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000567e:	ee 0b 15 02 	lsl	r11,r7,0x2
80005682:	f6 05 06 46 	mulu.d	r6,r11,r5
80005686:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000568a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000568e:	ee 0b 15 02 	lsl	r11,r7,0x2
80005692:	f6 05 06 46 	mulu.d	r6,r11,r5
80005696:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000569a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000569e:	ee 0b 15 02 	lsl	r11,r7,0x2
800056a2:	f6 05 06 46 	mulu.d	r6,r11,r5
800056a6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800056aa:	f6 07 06 46 	mulu.d	r6,r11,r7
800056ae:	ee 0b 15 02 	lsl	r11,r7,0x2
800056b2:	f6 0c 06 46 	mulu.d	r6,r11,r12
800056b6:	a5 8c       	lsr	r12,0x4
800056b8:	ed b7 00 1c 	bld	r7,0x1c
800056bc:	c0 40       	breq	800056c4 <__avr32_f32_div+0xac>
800056be:	a1 77       	lsl	r7,0x1
800056c0:	20 19       	sub	r9,1
800056c2:	a1 7c       	lsl	r12,0x1
800056c4:	58 09       	cp.w	r9,0
800056c6:	e0 8a 00 42 	brle	8000574a <__avr32_f32_div_res_subnormal>
800056ca:	e0 17 ff e0 	andl	r7,0xffe0
800056ce:	e8 17 00 10 	orl	r7,0x10
800056d2:	ea 07 06 4a 	mulu.d	r10,r5,r7
800056d6:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
800056da:	58 0a       	cp.w	r10,0

800056dc <__avr32_f32_div_round_subnormal>:
800056dc:	f8 0b 13 00 	cpc	r11,r12
800056e0:	5f 3b       	srlo	r11
800056e2:	ea 0b 17 00 	moveq	r11,r5
800056e6:	ee 0c 16 05 	lsr	r12,r7,0x5
800056ea:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
800056ee:	bb 07       	ld.d	r6,sp++
800056f0:	1b 05       	ld.w	r5,sp++
800056f2:	ed b8 00 1f 	bld	r8,0x1f
800056f6:	ef bc 00 1f 	bst	r12,0x1f
800056fa:	16 0c       	add	r12,r11
800056fc:	5e fc       	retal	r12

800056fe <__divsf_return_op1>:
800056fe:	a1 78       	lsl	r8,0x1
80005700:	5d 0c       	ror	r12
80005702:	5e fc       	retal	r12
80005704:	5e 1e       	retne	-1
80005706:	fc 19 ff 00 	movh	r9,0xff00
8000570a:	12 3b       	cp.w	r11,r9
8000570c:	cf 93       	brcs	800056fe <__divsf_return_op1>
8000570e:	5e fe       	retal	-1
80005710:	5e 0d       	reteq	0
80005712:	5e fe       	retal	-1
80005714:	18 7c       	tst	r12,r12
80005716:	5e 0e       	reteq	-1
80005718:	f8 09 16 18 	lsr	r9,r12,0x18
8000571c:	c0 70       	breq	8000572a <__divsf_return_op1+0x2c>
8000571e:	e0 49 00 ff 	cp.w	r9,255
80005722:	cf 12       	brcc	80005704 <__divsf_return_op1+0x6>
80005724:	fc 1c ff 00 	movh	r12,0xff00
80005728:	ce bb       	rjmp	800056fe <__divsf_return_op1>
8000572a:	a7 7c       	lsl	r12,0x7
8000572c:	f8 09 12 00 	clz	r9,r12
80005730:	f8 09 09 4c 	lsl	r12,r12,r9
80005734:	f2 09 11 01 	rsub	r9,r9,1
80005738:	c8 1b       	rjmp	8000563a <__avr32_f32_div+0x22>
8000573a:	a7 7b       	lsl	r11,0x7
8000573c:	f6 0a 12 00 	clz	r10,r11
80005740:	f6 0a 09 4b 	lsl	r11,r11,r10
80005744:	f4 0a 11 01 	rsub	r10,r10,1
80005748:	c8 5b       	rjmp	80005652 <__avr32_f32_div+0x3a>

8000574a <__avr32_f32_div_res_subnormal>:
8000574a:	5c 39       	neg	r9
8000574c:	2f f9       	sub	r9,-1
8000574e:	f1 b9 04 a0 	satu	r9,0x5
80005752:	f2 0a 11 20 	rsub	r10,r9,32
80005756:	ee 09 0a 47 	lsr	r7,r7,r9
8000575a:	f8 0a 09 46 	lsl	r6,r12,r10
8000575e:	f8 09 0a 4c 	lsr	r12,r12,r9
80005762:	e0 17 ff e0 	andl	r7,0xffe0
80005766:	e8 17 00 10 	orl	r7,0x10
8000576a:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000576e:	30 09       	mov	r9,0
80005770:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80005774:	0c 3a       	cp.w	r10,r6
80005776:	cb 3b       	rjmp	800056dc <__avr32_f32_div_round_subnormal>
80005778:	58 17       	cp.w	r7,1
8000577a:	58 09       	cp.w	r9,0
8000577c:	f5 b8 00 00 	subfeq	r8,0
80005780:	1b 07       	ld.w	r7,sp++
80005782:	1b 0e       	ld.w	lr,sp++
80005784:	5e fc       	retal	r12
	...

80005788 <__avr32_f32_sub_from_add>:
80005788:	ee 1b 80 00 	eorh	r11,0x8000

8000578c <__avr32_f32_sub>:
8000578c:	f7 ec 20 08 	eor	r8,r11,r12
80005790:	c6 46       	brmi	80005858 <__avr32_f32_add_from_sub>
80005792:	18 98       	mov	r8,r12
80005794:	e6 1c 80 00 	andh	r12,0x8000,COH
80005798:	bf db       	cbr	r11,0x1f
8000579a:	bf d8       	cbr	r8,0x1f
8000579c:	f0 0b 0c 4a 	max	r10,r8,r11
800057a0:	f0 0b 0d 49 	min	r9,r8,r11
800057a4:	10 3a       	cp.w	r10,r8
800057a6:	f7 bc 01 01 	subne	r12,1
800057aa:	e6 1c 80 00 	andh	r12,0x8000,COH
800057ae:	f4 08 15 08 	lsl	r8,r10,0x8
800057b2:	bf b8       	sbr	r8,0x1f
800057b4:	b7 9a       	lsr	r10,0x17
800057b6:	e0 4a 00 ff 	cp.w	r10,255
800057ba:	c3 80       	breq	8000582a <__avr32_f32_sub_op1_nan_or_inf>
800057bc:	f2 0b 15 08 	lsl	r11,r9,0x8
800057c0:	bf bb       	sbr	r11,0x1f
800057c2:	b7 99       	lsr	r9,0x17
800057c4:	1a dc       	st.w	--sp,r12
800057c6:	c2 90       	breq	80005818 <__avr32_f32_sub_op2_subnormal>
800057c8:	f4 09 01 0c 	sub	r12,r10,r9
800057cc:	c0 c0       	breq	800057e4 <__avr32_f32_sub_shift_done>
800057ce:	f1 bc 04 a0 	satu	r12,0x5
800057d2:	f8 09 11 20 	rsub	r9,r12,32
800057d6:	f6 09 09 49 	lsl	r9,r11,r9
800057da:	f7 b8 01 01 	subne	r8,1
800057de:	5f 19       	srne	r9
800057e0:	f6 0c 0a 4b 	lsr	r11,r11,r12

800057e4 <__avr32_f32_sub_shift_done>:
800057e4:	16 18       	sub	r8,r11
800057e6:	1b 0c       	ld.w	r12,sp++
800057e8:	f0 0b 12 00 	clz	r11,r8
800057ec:	5e 3d       	retlo	0
800057ee:	f0 0b 09 48 	lsl	r8,r8,r11
800057f2:	16 1a       	sub	r10,r11
800057f4:	e0 8a 00 26 	brle	80005840 <__avr32_f32_sub_subnormal_result>
800057f8:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800057fc:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80005800:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

80005804 <__avr32_f32_sub_round>:
80005804:	fc 1a 80 00 	movh	r10,0x8000
80005808:	ed bc 00 00 	bld	r12,0x0
8000580c:	f7 ba 01 ff 	subne	r10,-1
80005810:	14 39       	cp.w	r9,r10
80005812:	f7 bc 02 ff 	subhs	r12,-1
80005816:	5e fc       	retal	r12

80005818 <__avr32_f32_sub_op2_subnormal>:
80005818:	bf db       	cbr	r11,0x1f
8000581a:	f9 b9 01 01 	movne	r9,1
8000581e:	58 0a       	cp.w	r10,0
80005820:	cd 41       	brne	800057c8 <__avr32_f32_sub+0x3c>
80005822:	bf d8       	cbr	r8,0x1f
80005824:	f9 ba 01 01 	movne	r10,1
80005828:	cd 0b       	rjmp	800057c8 <__avr32_f32_sub+0x3c>

8000582a <__avr32_f32_sub_op1_nan_or_inf>:
8000582a:	f0 0b 15 01 	lsl	r11,r8,0x1
8000582e:	5e 1e       	retne	-1
80005830:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005834:	f2 0b 16 17 	lsr	r11,r9,0x17
80005838:	e0 4b 00 ff 	cp.w	r11,255
8000583c:	5e 1c       	retne	r12
8000583e:	5e fe       	retal	-1

80005840 <__avr32_f32_sub_subnormal_result>:
80005840:	f4 0a 11 09 	rsub	r10,r10,9
80005844:	f4 0b 11 20 	rsub	r11,r10,32
80005848:	5e 3d       	retlo	0
8000584a:	f0 0a 0a 4a 	lsr	r10,r8,r10
8000584e:	14 4c       	or	r12,r10
80005850:	f0 0b 09 48 	lsl	r8,r8,r11
80005854:	10 49       	or	r9,r8
80005856:	cd 7b       	rjmp	80005804 <__avr32_f32_sub_round>

80005858 <__avr32_f32_add_from_sub>:
80005858:	ee 1b 80 00 	eorh	r11,0x8000

8000585c <__avr32_f32_add>:
8000585c:	f7 ec 20 08 	eor	r8,r11,r12
80005860:	c9 46       	brmi	80005788 <__avr32_f32_sub_from_add>
80005862:	18 98       	mov	r8,r12
80005864:	e6 1c 80 00 	andh	r12,0x8000,COH
80005868:	bf db       	cbr	r11,0x1f
8000586a:	bf d8       	cbr	r8,0x1f
8000586c:	f0 0b 0c 4a 	max	r10,r8,r11
80005870:	f0 0b 0d 49 	min	r9,r8,r11
80005874:	f4 08 15 08 	lsl	r8,r10,0x8
80005878:	bf b8       	sbr	r8,0x1f
8000587a:	b7 9a       	lsr	r10,0x17
8000587c:	e0 4a 00 ff 	cp.w	r10,255
80005880:	c2 d0       	breq	800058da <__avr32_f32_add_op1_nan_or_inf>
80005882:	f2 0b 15 08 	lsl	r11,r9,0x8
80005886:	bf bb       	sbr	r11,0x1f
80005888:	b7 99       	lsr	r9,0x17
8000588a:	c1 e0       	breq	800058c6 <__avr32_f32_add_op2_subnormal>
8000588c:	1a dc       	st.w	--sp,r12
8000588e:	14 29       	rsub	r9,r10
80005890:	f1 b9 04 a0 	satu	r9,0x5
80005894:	f6 09 0a 4c 	lsr	r12,r11,r9
80005898:	f2 09 11 18 	rsub	r9,r9,24
8000589c:	f6 09 09 4b 	lsl	r11,r11,r9
800058a0:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
800058a4:	18 08       	add	r8,r12
800058a6:	1b 0c       	ld.w	r12,sp++
800058a8:	c2 63       	brcs	800058f4 <__avr32_f32_add_res_of>
800058aa:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
800058ae:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800058b2:	fc 1a 80 00 	movh	r10,0x8000
800058b6:	ed bc 00 00 	bld	r12,0x0
800058ba:	f7 ba 01 ff 	subne	r10,-1
800058be:	14 3b       	cp.w	r11,r10
800058c0:	f7 bc 02 ff 	subhs	r12,-1
800058c4:	5e fc       	retal	r12

800058c6 <__avr32_f32_add_op2_subnormal>:
800058c6:	bf db       	cbr	r11,0x1f
800058c8:	f9 b9 01 01 	movne	r9,1
800058cc:	58 0a       	cp.w	r10,0
800058ce:	cd f1       	brne	8000588c <__avr32_f32_add+0x30>
800058d0:	bf d8       	cbr	r8,0x1f
800058d2:	10 0b       	add	r11,r8
800058d4:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
800058d8:	5e fc       	retal	r12

800058da <__avr32_f32_add_op1_nan_or_inf>:
800058da:	f0 0b 15 01 	lsl	r11,r8,0x1
800058de:	5e 1e       	retne	-1
800058e0:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800058e4:	f2 0b 16 17 	lsr	r11,r9,0x17
800058e8:	e0 4b 00 ff 	cp.w	r11,255
800058ec:	5e 1c       	retne	r12
800058ee:	a9 79       	lsl	r9,0x9
800058f0:	5e 0c       	reteq	r12
800058f2:	5e fe       	retal	-1

800058f4 <__avr32_f32_add_res_of>:
800058f4:	a1 98       	lsr	r8,0x1
800058f6:	2f fa       	sub	r10,-1
800058f8:	e0 4a 00 ff 	cp.w	r10,255
800058fc:	f9 b8 00 00 	moveq	r8,0
80005900:	f9 bb 00 00 	moveq	r11,0
80005904:	cd 3b       	rjmp	800058aa <__avr32_f32_add+0x4e>
80005906:	00 00       	add	r0,r0
80005908:	58 17       	cp.w	r7,1
8000590a:	58 09       	cp.w	r9,0
8000590c:	f5 b8 00 00 	subfeq	r8,0
80005910:	1b 07       	ld.w	r7,sp++
80005912:	1b 0e       	ld.w	lr,sp++
80005914:	5e fc       	retal	r12

80005916 <__avr32_f32_mul>:
80005916:	18 98       	mov	r8,r12
80005918:	16 5c       	eor	r12,r11
8000591a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000591e:	bf d8       	cbr	r8,0x1f
80005920:	c6 60       	breq	800059ec <__avr32_f32_mul_op1_zero>
80005922:	bf db       	cbr	r11,0x1f
80005924:	f0 0b 0c 4a 	max	r10,r8,r11
80005928:	f0 0b 0d 49 	min	r9,r8,r11
8000592c:	f4 08 15 08 	lsl	r8,r10,0x8
80005930:	bf b8       	sbr	r8,0x1f
80005932:	b7 9a       	lsr	r10,0x17
80005934:	e0 4a 00 ff 	cp.w	r10,255
80005938:	c3 d0       	breq	800059b2 <__avr32_f32_mul_op1_nan_or_inf>
8000593a:	f2 0b 15 08 	lsl	r11,r9,0x8
8000593e:	bf bb       	sbr	r11,0x1f
80005940:	b7 99       	lsr	r9,0x17
80005942:	c2 40       	breq	8000598a <__avr32_f32_mul_op2_subnormal>
80005944:	14 09       	add	r9,r10
80005946:	f0 0b 06 4a 	mulu.d	r10,r8,r11
8000594a:	f6 08 15 01 	lsl	r8,r11,0x1
8000594e:	f0 0b 17 20 	movhs	r11,r8
80005952:	f7 b9 02 01 	subhs	r9,1
80005956:	a9 8a       	lsr	r10,0x8
80005958:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
8000595c:	27 e9       	sub	r9,126
8000595e:	e0 8a 00 39 	brle	800059d0 <__avr32_f32_mul_res_subnormal>
80005962:	e0 49 00 ff 	cp.w	r9,255
80005966:	c0 f4       	brge	80005984 <__avr32_f32_mul_round+0x14>
80005968:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000596c:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80005970 <__avr32_f32_mul_round>:
80005970:	fc 18 80 00 	movh	r8,0x8000
80005974:	ed bc 00 00 	bld	r12,0x0
80005978:	f7 b8 01 ff 	subne	r8,-1
8000597c:	10 3a       	cp.w	r10,r8
8000597e:	f7 bc 02 ff 	subhs	r12,-1
80005982:	5e fc       	retal	r12
80005984:	ea 1c 7f 80 	orh	r12,0x7f80
80005988:	5e fc       	retal	r12

8000598a <__avr32_f32_mul_op2_subnormal>:
8000598a:	bf db       	cbr	r11,0x1f
8000598c:	f6 09 12 00 	clz	r9,r11
80005990:	5e 3d       	retlo	0
80005992:	20 89       	sub	r9,8
80005994:	f6 09 09 4b 	lsl	r11,r11,r9
80005998:	f2 09 11 01 	rsub	r9,r9,1
8000599c:	14 7a       	tst	r10,r10
8000599e:	cd 31       	brne	80005944 <__avr32_f32_mul+0x2e>
800059a0:	bf d8       	cbr	r8,0x1f
800059a2:	f6 0a 12 00 	clz	r10,r11
800059a6:	5e 3d       	retlo	0
800059a8:	f0 0a 09 48 	lsl	r8,r8,r10
800059ac:	f4 0a 11 01 	rsub	r10,r10,1
800059b0:	cc ab       	rjmp	80005944 <__avr32_f32_mul+0x2e>

800059b2 <__avr32_f32_mul_op1_nan_or_inf>:
800059b2:	f0 0b 15 01 	lsl	r11,r8,0x1
800059b6:	5e 1e       	retne	-1
800059b8:	12 79       	tst	r9,r9
800059ba:	5e 0e       	reteq	-1
800059bc:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800059c0:	f2 0b 16 17 	lsr	r11,r9,0x17
800059c4:	e0 4b 00 ff 	cp.w	r11,255
800059c8:	5e 1c       	retne	r12
800059ca:	a9 79       	lsl	r9,0x9
800059cc:	5e 0c       	reteq	r12
800059ce:	5e fe       	retal	-1

800059d0 <__avr32_f32_mul_res_subnormal>:
800059d0:	f2 09 11 09 	rsub	r9,r9,9
800059d4:	f2 08 11 20 	rsub	r8,r9,32
800059d8:	5e 3d       	retlo	0
800059da:	f6 09 0a 49 	lsr	r9,r11,r9
800059de:	12 4c       	or	r12,r9
800059e0:	f6 08 09 4b 	lsl	r11,r11,r8
800059e4:	e4 1a 00 ff 	andh	r10,0xff
800059e8:	16 4a       	or	r10,r11
800059ea:	cc 3b       	rjmp	80005970 <__avr32_f32_mul_round>

800059ec <__avr32_f32_mul_op1_zero>:
800059ec:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
800059f0:	e0 4a 00 ff 	cp.w	r10,255
800059f4:	5e 1c       	retne	r12
800059f6:	5e 0e       	reteq	-1
800059f8:	58 17       	cp.w	r7,1
800059fa:	58 09       	cp.w	r9,0
800059fc:	f5 b8 00 00 	subfeq	r8,0
80005a00:	1b 07       	ld.w	r7,sp++
80005a02:	1b 0e       	ld.w	lr,sp++
80005a04:	5e fc       	retal	r12

80005a06 <__avr32_u32_to_f32>:
80005a06:	58 0c       	cp.w	r12,0
80005a08:	5e 0c       	reteq	r12
80005a0a:	e0 6a 00 9e 	mov	r10,158
80005a0e:	f8 09 12 00 	clz	r9,r12
80005a12:	12 1a       	sub	r10,r9
80005a14:	f8 09 09 4c 	lsl	r12,r12,r9
80005a18:	58 0a       	cp.w	r10,0
80005a1a:	e0 8a 00 14 	brle	80005a42 <__avr32_u32_to_f32_subnormal>
80005a1e:	37 f9       	mov	r9,127
80005a20:	ed bc 00 08 	bld	r12,0x8
80005a24:	f7 b9 00 ff 	subeq	r9,-1
80005a28:	12 0c       	add	r12,r9
80005a2a:	f7 ba 03 fe 	sublo	r10,-2
80005a2e:	ed bc 00 1f 	bld	r12,0x1f
80005a32:	f7 ba 01 01 	subne	r10,1
80005a36:	f8 0c 16 07 	lsr	r12,r12,0x7
80005a3a:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80005a3e:	a1 9c       	lsr	r12,0x1
80005a40:	5e fc       	retal	r12

80005a42 <__avr32_u32_to_f32_subnormal>:
80005a42:	30 08       	mov	r8,0
80005a44:	f4 0a 11 01 	rsub	r10,r10,1
80005a48:	59 9a       	cp.w	r10,25
80005a4a:	f9 bc 02 00 	movhs	r12,0
80005a4e:	c1 32       	brcc	80005a74 <__avr32_u32_to_f32_subnormal+0x32>
80005a50:	f4 09 11 20 	rsub	r9,r10,32
80005a54:	f8 09 09 49 	lsl	r9,r12,r9
80005a58:	5f 19       	srne	r9
80005a5a:	f8 0a 0a 4c 	lsr	r12,r12,r10
80005a5e:	12 4c       	or	r12,r9
80005a60:	37 f9       	mov	r9,127
80005a62:	ed bc 00 08 	bld	r12,0x8
80005a66:	f7 b9 00 ff 	subeq	r9,-1
80005a6a:	12 0c       	add	r12,r9
80005a6c:	f8 0c 16 07 	lsr	r12,r12,0x7
80005a70:	a1 78       	lsl	r8,0x1
80005a72:	5d 0c       	ror	r12
80005a74:	5e fc       	retal	r12
80005a76:	58 17       	cp.w	r7,1
80005a78:	58 09       	cp.w	r9,0
80005a7a:	f5 b8 00 00 	subfeq	r8,0
80005a7e:	1b 07       	ld.w	r7,sp++
80005a80:	1b 0e       	ld.w	lr,sp++
80005a82:	5e fc       	retal	r12

80005a84 <__avr32_f32_to_s32>:
80005a84:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80005a88:	27 fb       	sub	r11,127
80005a8a:	5e 3d       	retlo	0
80005a8c:	f6 0b 11 1f 	rsub	r11,r11,31
80005a90:	f8 0a 15 08 	lsl	r10,r12,0x8
80005a94:	bf ba       	sbr	r10,0x1f
80005a96:	f4 0b 0a 4a 	lsr	r10,r10,r11
80005a9a:	a1 7c       	lsl	r12,0x1
80005a9c:	5e 2a       	reths	r10
80005a9e:	5c 3a       	neg	r10
80005aa0:	5e fa       	retal	r10
80005aa2:	58 17       	cp.w	r7,1
80005aa4:	58 09       	cp.w	r9,0
80005aa6:	f5 b8 00 00 	subfeq	r8,0
80005aaa:	1b 07       	ld.w	r7,sp++
80005aac:	1b 0e       	ld.w	lr,sp++
80005aae:	5e fc       	retal	r12

80005ab0 <__avr32_f32_to_u32>:
80005ab0:	58 0c       	cp.w	r12,0
80005ab2:	5e 6d       	retmi	0
80005ab4:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80005ab8:	27 fb       	sub	r11,127
80005aba:	5e 3d       	retlo	0
80005abc:	f6 0b 11 1f 	rsub	r11,r11,31
80005ac0:	a9 6c       	lsl	r12,0x8
80005ac2:	bf bc       	sbr	r12,0x1f
80005ac4:	f8 0b 0a 4c 	lsr	r12,r12,r11
80005ac8:	5e fc       	retal	r12
80005aca:	58 17       	cp.w	r7,1
80005acc:	58 09       	cp.w	r9,0
80005ace:	f5 b8 00 00 	subfeq	r8,0
80005ad2:	1b 07       	ld.w	r7,sp++
80005ad4:	1b 0e       	ld.w	lr,sp++
80005ad6:	5e fc       	retal	r12

80005ad8 <__avr32_f32_to_f64>:
80005ad8:	f8 0b 15 01 	lsl	r11,r12,0x1
80005adc:	f9 ba 00 00 	moveq	r10,0
80005ae0:	5e 0b       	reteq	r11
80005ae2:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80005ae6:	e0 49 00 ff 	cp.w	r9,255
80005aea:	c1 e0       	breq	80005b26 <__extendsfdf_return_op1+0x6>
80005aec:	a7 7b       	lsl	r11,0x7
80005aee:	30 0a       	mov	r10,0
80005af0:	58 09       	cp.w	r9,0
80005af2:	f7 b9 00 ff 	subeq	r9,-1
80005af6:	5f 18       	srne	r8
80005af8:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80005afc:	fe 39 fc 80 	sub	r9,-896
80005b00:	f6 08 12 00 	clz	r8,r11
80005b04:	10 19       	sub	r9,r8
80005b06:	f6 08 09 4b 	lsl	r11,r11,r8
80005b0a:	ed bb 00 1f 	bld	r11,0x1f
80005b0e:	f7 b9 01 01 	subne	r9,1
80005b12:	ab 9a       	lsr	r10,0xb
80005b14:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005b18:	a1 7b       	lsl	r11,0x1
80005b1a:	ab 9b       	lsr	r11,0xb
80005b1c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80005b20 <__extendsfdf_return_op1>:
80005b20:	a1 7c       	lsl	r12,0x1
80005b22:	5d 0b       	ror	r11
80005b24:	5e fb       	retal	r11
80005b26:	fc 1a ff e0 	movh	r10,0xffe0
80005b2a:	a9 6b       	lsl	r11,0x8
80005b2c:	f9 bb 01 ff 	movne	r11,-1
80005b30:	f4 0b 17 00 	moveq	r11,r10
80005b34:	30 0a       	mov	r10,0
80005b36:	cf 5b       	rjmp	80005b20 <__extendsfdf_return_op1>
80005b38:	58 17       	cp.w	r7,1
80005b3a:	58 09       	cp.w	r9,0
80005b3c:	f5 b8 00 00 	subfeq	r8,0
80005b40:	1b 07       	ld.w	r7,sp++
80005b42:	1b 0e       	ld.w	lr,sp++
80005b44:	5e fc       	retal	r12

80005b46 <__avr32_f64_to_f32>:
80005b46:	f6 09 15 01 	lsl	r9,r11,0x1
80005b4a:	b5 99       	lsr	r9,0x15
80005b4c:	5e 0d       	reteq	0
80005b4e:	f6 08 15 0a 	lsl	r8,r11,0xa
80005b52:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80005b56:	ab 6a       	lsl	r10,0xa
80005b58:	5c 3a       	neg	r10
80005b5a:	5c fc       	rol	r12
80005b5c:	e0 49 07 ff 	cp.w	r9,2047
80005b60:	c1 a0       	breq	80005b94 <__truncdfsf_return_op1+0x6>
80005b62:	e0 29 03 80 	sub	r9,896
80005b66:	bf bc       	sbr	r12,0x1f
80005b68:	58 09       	cp.w	r9,0
80005b6a:	e0 8a 00 1a 	brle	80005b9e <__truncdfsf_return_op1+0x10>
80005b6e:	37 fa       	mov	r10,127
80005b70:	ed bc 00 08 	bld	r12,0x8
80005b74:	f7 ba 00 ff 	subeq	r10,-1
80005b78:	14 0c       	add	r12,r10
80005b7a:	f7 b9 03 fe 	sublo	r9,-2
80005b7e:	ed bc 00 1f 	bld	r12,0x1f
80005b82:	f7 b9 01 01 	subne	r9,1
80005b86:	f8 0c 16 07 	lsr	r12,r12,0x7
80005b8a:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80005b8e <__truncdfsf_return_op1>:
80005b8e:	a1 7b       	lsl	r11,0x1
80005b90:	5d 0c       	ror	r12
80005b92:	5e fc       	retal	r12
80005b94:	bf dc       	cbr	r12,0x1f
80005b96:	5e 1e       	retne	-1
80005b98:	fc 1c 7f 80 	movh	r12,0x7f80
80005b9c:	5e fc       	retal	r12
80005b9e:	f2 09 11 01 	rsub	r9,r9,1
80005ba2:	59 99       	cp.w	r9,25
80005ba4:	f9 bc 02 00 	movhs	r12,0
80005ba8:	c1 32       	brcc	80005bce <__truncdfsf_return_op1+0x40>
80005baa:	f2 0a 11 20 	rsub	r10,r9,32
80005bae:	f8 0a 09 4a 	lsl	r10,r12,r10
80005bb2:	5f 1a       	srne	r10
80005bb4:	f8 09 0a 4c 	lsr	r12,r12,r9
80005bb8:	14 4c       	or	r12,r10
80005bba:	37 fa       	mov	r10,127
80005bbc:	ed bc 00 08 	bld	r12,0x8
80005bc0:	f7 ba 00 ff 	subeq	r10,-1
80005bc4:	14 0c       	add	r12,r10
80005bc6:	f8 0c 16 07 	lsr	r12,r12,0x7
80005bca:	a1 7b       	lsl	r11,0x1
80005bcc:	5d 0c       	ror	r12
80005bce:	5e fc       	retal	r12

80005bd0 <__avr32_udiv64>:
80005bd0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80005bd4:	1a 97       	mov	r7,sp
80005bd6:	14 92       	mov	r2,r10
80005bd8:	10 95       	mov	r5,r8
80005bda:	16 96       	mov	r6,r11
80005bdc:	10 9c       	mov	r12,r8
80005bde:	12 9e       	mov	lr,r9
80005be0:	14 93       	mov	r3,r10
80005be2:	58 09       	cp.w	r9,0
80005be4:	c4 31       	brne	80005c6a <__avr32_udiv64+0x9a>
80005be6:	16 38       	cp.w	r8,r11
80005be8:	e0 8b 00 95 	brhi	80005d12 <__avr32_udiv64+0x142>
80005bec:	58 08       	cp.w	r8,0
80005bee:	c0 51       	brne	80005bf8 <__avr32_udiv64+0x28>
80005bf0:	30 19       	mov	r9,1
80005bf2:	f2 08 0d 08 	divu	r8,r9,r8
80005bf6:	10 9c       	mov	r12,r8
80005bf8:	f8 0e 12 00 	clz	lr,r12
80005bfc:	c4 e1       	brne	80005c98 <__avr32_udiv64+0xc8>
80005bfe:	ec 0c 01 0b 	sub	r11,r6,r12
80005c02:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80005c06:	f8 06 16 10 	lsr	r6,r12,0x10
80005c0a:	30 12       	mov	r2,1
80005c0c:	f6 06 0d 08 	divu	r8,r11,r6
80005c10:	e6 0a 16 10 	lsr	r10,r3,0x10
80005c14:	10 9e       	mov	lr,r8
80005c16:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80005c1a:	ab 38       	mul	r8,r5
80005c1c:	12 38       	cp.w	r8,r9
80005c1e:	e0 88 00 0c 	brls	80005c36 <__avr32_udiv64+0x66>
80005c22:	20 1e       	sub	lr,1
80005c24:	18 09       	add	r9,r12
80005c26:	12 3c       	cp.w	r12,r9
80005c28:	e0 8b 00 07 	brhi	80005c36 <__avr32_udiv64+0x66>
80005c2c:	12 38       	cp.w	r8,r9
80005c2e:	f7 be 0b 01 	subhi	lr,1
80005c32:	f3 dc eb 09 	addhi	r9,r9,r12
80005c36:	10 19       	sub	r9,r8
80005c38:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
80005c3c:	f2 06 0d 08 	divu	r8,r9,r6
80005c40:	10 9b       	mov	r11,r8
80005c42:	f5 e9 11 0a 	or	r10,r10,r9<<0x10
80005c46:	ab 38       	mul	r8,r5
80005c48:	14 38       	cp.w	r8,r10
80005c4a:	e0 88 00 0a 	brls	80005c5e <__avr32_udiv64+0x8e>
80005c4e:	20 1b       	sub	r11,1
80005c50:	18 0a       	add	r10,r12
80005c52:	14 3c       	cp.w	r12,r10
80005c54:	e0 8b 00 05 	brhi	80005c5e <__avr32_udiv64+0x8e>
80005c58:	14 38       	cp.w	r8,r10
80005c5a:	f7 bb 0b 01 	subhi	r11,1
80005c5e:	f7 ee 11 0c 	or	r12,r11,lr<<0x10
80005c62:	04 9b       	mov	r11,r2
80005c64:	18 9a       	mov	r10,r12
80005c66:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80005c6a:	16 39       	cp.w	r9,r11
80005c6c:	e0 88 00 07 	brls	80005c7a <__avr32_udiv64+0xaa>
80005c70:	30 0b       	mov	r11,0
80005c72:	16 9c       	mov	r12,r11
80005c74:	18 9a       	mov	r10,r12
80005c76:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80005c7a:	f2 03 12 00 	clz	r3,r9
80005c7e:	e0 81 00 89 	brne	80005d90 <__avr32_udiv64+0x1c0>
80005c82:	16 39       	cp.w	r9,r11
80005c84:	5f 38       	srlo	r8
80005c86:	14 35       	cp.w	r5,r10
80005c88:	5f 89       	srls	r9
80005c8a:	12 48       	or	r8,r9
80005c8c:	e6 08 18 00 	cp.b	r8,r3
80005c90:	cf 00       	breq	80005c70 <__avr32_udiv64+0xa0>
80005c92:	06 9b       	mov	r11,r3
80005c94:	30 1c       	mov	r12,1
80005c96:	ce fb       	rjmp	80005c74 <__avr32_udiv64+0xa4>
80005c98:	ec 0e 09 4b 	lsl	r11,r6,lr
80005c9c:	fc 09 11 20 	rsub	r9,lr,32
80005ca0:	e4 09 0a 4a 	lsr	r10,r2,r9
80005ca4:	f8 0e 09 4c 	lsl	r12,r12,lr
80005ca8:	f5 eb 10 03 	or	r3,r10,r11
80005cac:	ec 09 0a 49 	lsr	r9,r6,r9
80005cb0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80005cb4:	f8 06 16 10 	lsr	r6,r12,0x10
80005cb8:	e6 0a 16 10 	lsr	r10,r3,0x10
80005cbc:	f2 06 0d 08 	divu	r8,r9,r6
80005cc0:	10 91       	mov	r1,r8
80005cc2:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
80005cc6:	ab 38       	mul	r8,r5
80005cc8:	16 38       	cp.w	r8,r11
80005cca:	e0 88 00 07 	brls	80005cd8 <__avr32_udiv64+0x108>
80005cce:	20 11       	sub	r1,1
80005cd0:	18 0b       	add	r11,r12
80005cd2:	16 3c       	cp.w	r12,r11
80005cd4:	e0 88 00 b5 	brls	80005e3e <__avr32_udiv64+0x26e>
80005cd8:	f6 08 01 09 	sub	r9,r11,r8
80005cdc:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
80005ce0:	f2 06 0d 08 	divu	r8,r9,r6
80005ce4:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
80005ce8:	f0 05 02 49 	mul	r9,r8,r5
80005cec:	16 39       	cp.w	r9,r11
80005cee:	e0 88 00 0c 	brls	80005d06 <__avr32_udiv64+0x136>
80005cf2:	20 18       	sub	r8,1
80005cf4:	18 0b       	add	r11,r12
80005cf6:	16 3c       	cp.w	r12,r11
80005cf8:	e0 8b 00 07 	brhi	80005d06 <__avr32_udiv64+0x136>
80005cfc:	16 39       	cp.w	r9,r11
80005cfe:	f7 b8 0b 01 	subhi	r8,1
80005d02:	f7 dc eb 0b 	addhi	r11,r11,r12
80005d06:	e4 0e 09 43 	lsl	r3,r2,lr
80005d0a:	12 1b       	sub	r11,r9
80005d0c:	f1 e1 11 02 	or	r2,r8,r1<<0x10
80005d10:	c7 eb       	rjmp	80005c0c <__avr32_udiv64+0x3c>
80005d12:	f0 0a 12 00 	clz	r10,r8
80005d16:	c0 d0       	breq	80005d30 <__avr32_udiv64+0x160>
80005d18:	f6 0a 09 49 	lsl	r9,r11,r10
80005d1c:	f0 0a 09 4c 	lsl	r12,r8,r10
80005d20:	e4 0a 09 43 	lsl	r3,r2,r10
80005d24:	f4 08 11 20 	rsub	r8,r10,32
80005d28:	e4 08 0a 48 	lsr	r8,r2,r8
80005d2c:	f1 e9 10 06 	or	r6,r8,r9
80005d30:	e6 08 16 10 	lsr	r8,r3,0x10
80005d34:	f8 05 16 10 	lsr	r5,r12,0x10
80005d38:	ec 05 0d 0a 	divu	r10,r6,r5
80005d3c:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80005d40:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80005d44:	14 9e       	mov	lr,r10
80005d46:	f4 06 02 48 	mul	r8,r10,r6
80005d4a:	16 38       	cp.w	r8,r11
80005d4c:	e0 88 00 07 	brls	80005d5a <__avr32_udiv64+0x18a>
80005d50:	20 1e       	sub	lr,1
80005d52:	18 0b       	add	r11,r12
80005d54:	16 3c       	cp.w	r12,r11
80005d56:	e0 88 00 7a 	brls	80005e4a <__avr32_udiv64+0x27a>
80005d5a:	f6 08 01 09 	sub	r9,r11,r8
80005d5e:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
80005d62:	f2 05 0d 08 	divu	r8,r9,r5
80005d66:	10 9b       	mov	r11,r8
80005d68:	f5 e9 11 0a 	or	r10,r10,r9<<0x10
80005d6c:	ad 38       	mul	r8,r6
80005d6e:	14 38       	cp.w	r8,r10
80005d70:	e0 88 00 0a 	brls	80005d84 <__avr32_udiv64+0x1b4>
80005d74:	20 1b       	sub	r11,1
80005d76:	18 0a       	add	r10,r12
80005d78:	14 3c       	cp.w	r12,r10
80005d7a:	e0 8b 00 05 	brhi	80005d84 <__avr32_udiv64+0x1b4>
80005d7e:	14 38       	cp.w	r8,r10
80005d80:	f7 bb 0b 01 	subhi	r11,1
80005d84:	f7 ee 11 0c 	or	r12,r11,lr<<0x10
80005d88:	30 0b       	mov	r11,0
80005d8a:	18 9a       	mov	r10,r12
80005d8c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80005d90:	f6 03 09 4c 	lsl	r12,r11,r3
80005d94:	f2 03 09 4e 	lsl	lr,r9,r3
80005d98:	e6 09 11 20 	rsub	r9,r3,32
80005d9c:	f0 09 0a 4b 	lsr	r11,r8,r9
80005da0:	f4 09 0a 4a 	lsr	r10,r10,r9
80005da4:	f7 ee 10 0e 	or	lr,r11,lr
80005da8:	f5 ec 10 01 	or	r1,r10,r12
80005dac:	ec 09 0a 49 	lsr	r9,r6,r9
80005db0:	f0 03 09 40 	lsl	r0,r8,r3
80005db4:	fc 06 16 10 	lsr	r6,lr,0x10
80005db8:	eb de c0 10 	bfextu	r5,lr,0x0,0x10
80005dbc:	f2 06 0d 08 	divu	r8,r9,r6
80005dc0:	e2 0a 16 10 	lsr	r10,r1,0x10
80005dc4:	10 9b       	mov	r11,r8
80005dc6:	f5 e9 11 0c 	or	r12,r10,r9<<0x10
80005dca:	ab 38       	mul	r8,r5
80005dcc:	18 38       	cp.w	r8,r12
80005dce:	e0 88 00 0c 	brls	80005de6 <__avr32_udiv64+0x216>
80005dd2:	20 1b       	sub	r11,1
80005dd4:	1c 0c       	add	r12,lr
80005dd6:	18 3e       	cp.w	lr,r12
80005dd8:	e0 8b 00 07 	brhi	80005de6 <__avr32_udiv64+0x216>
80005ddc:	18 38       	cp.w	r8,r12
80005dde:	f7 bb 0b 01 	subhi	r11,1
80005de2:	f9 de eb 0c 	addhi	r12,r12,lr
80005de6:	f8 08 01 09 	sub	r9,r12,r8
80005dea:	f5 d1 c0 10 	bfextu	r10,r1,0x0,0x10
80005dee:	f2 06 0d 08 	divu	r8,r9,r6
80005df2:	10 9c       	mov	r12,r8
80005df4:	f5 e9 11 0a 	or	r10,r10,r9<<0x10
80005df8:	ab 38       	mul	r8,r5
80005dfa:	14 38       	cp.w	r8,r10
80005dfc:	e0 88 00 0c 	brls	80005e14 <__avr32_udiv64+0x244>
80005e00:	20 1c       	sub	r12,1
80005e02:	1c 0a       	add	r10,lr
80005e04:	14 3e       	cp.w	lr,r10
80005e06:	e0 8b 00 07 	brhi	80005e14 <__avr32_udiv64+0x244>
80005e0a:	14 38       	cp.w	r8,r10
80005e0c:	f5 de eb 0a 	addhi	r10,r10,lr
80005e10:	f7 bc 0b 01 	subhi	r12,1
80005e14:	f9 eb 11 0c 	or	r12,r12,r11<<0x10
80005e18:	10 1a       	sub	r10,r8
80005e1a:	f8 00 06 48 	mulu.d	r8,r12,r0
80005e1e:	10 9b       	mov	r11,r8
80005e20:	12 3a       	cp.w	r10,r9
80005e22:	c0 42       	brcc	80005e2a <__avr32_udiv64+0x25a>
80005e24:	20 1c       	sub	r12,1
80005e26:	30 0b       	mov	r11,0
80005e28:	c2 6b       	rjmp	80005c74 <__avr32_udiv64+0xa4>
80005e2a:	12 3a       	cp.w	r10,r9
80005e2c:	5f 08       	sreq	r8
80005e2e:	e4 03 09 49 	lsl	r9,r2,r3
80005e32:	16 39       	cp.w	r9,r11
80005e34:	5f 3a       	srlo	r10
80005e36:	14 68       	and	r8,r10
80005e38:	cf 70       	breq	80005e26 <__avr32_udiv64+0x256>
80005e3a:	20 1c       	sub	r12,1
80005e3c:	cf 5b       	rjmp	80005e26 <__avr32_udiv64+0x256>
80005e3e:	16 38       	cp.w	r8,r11
80005e40:	f7 b1 0b 01 	subhi	r1,1
80005e44:	f7 dc eb 0b 	addhi	r11,r11,r12
80005e48:	c4 8b       	rjmp	80005cd8 <__avr32_udiv64+0x108>
80005e4a:	16 38       	cp.w	r8,r11
80005e4c:	f7 be 0b 01 	subhi	lr,1
80005e50:	f7 dc eb 0b 	addhi	r11,r11,r12
80005e54:	c8 3b       	rjmp	80005d5a <__avr32_udiv64+0x18a>
80005e56:	d7 03       	nop

80005e58 <atexit>:
80005e58:	d4 01       	pushm	lr
80005e5a:	30 09       	mov	r9,0
80005e5c:	18 9b       	mov	r11,r12
80005e5e:	12 9a       	mov	r10,r9
80005e60:	12 9c       	mov	r12,r9
80005e62:	f0 1f 00 02 	mcall	80005e68 <atexit+0x10>
80005e66:	d8 02       	popm	pc
80005e68:	80 00       	ld.sh	r0,r0[0x0]
80005e6a:	63 cc       	ld.w	r12,r1[0x70]

80005e6c <__errno>:
80005e6c:	48 28       	lddpc	r8,80005e74 <__errno+0x8>
80005e6e:	70 0c       	ld.w	r12,r8[0x0]
80005e70:	2f 4c       	sub	r12,-12
80005e72:	5e fc       	retal	r12
80005e74:	00 00       	add	r0,r0
80005e76:	01 30       	ld.ub	r0,r0++

80005e78 <exit>:
80005e78:	d4 21       	pushm	r4-r7,lr
80005e7a:	30 0b       	mov	r11,0
80005e7c:	18 97       	mov	r7,r12
80005e7e:	f0 1f 00 06 	mcall	80005e94 <exit+0x1c>
80005e82:	48 68       	lddpc	r8,80005e98 <exit+0x20>
80005e84:	70 0c       	ld.w	r12,r8[0x0]
80005e86:	78 a9       	ld.w	r9,r12[0x28]
80005e88:	58 09       	cp.w	r9,0
80005e8a:	c0 20       	breq	80005e8e <exit+0x16>
80005e8c:	5d 19       	icall	r9
80005e8e:	0e 9c       	mov	r12,r7
80005e90:	f0 1f 00 03 	mcall	80005e9c <exit+0x24>
80005e94:	80 00       	ld.sh	r0,r0[0x0]
80005e96:	64 78       	ld.w	r8,r2[0x1c]
80005e98:	80 00       	ld.sh	r0,r0[0x0]
80005e9a:	b8 f8       	st.b	r12[0x7],r8
80005e9c:	80 00       	ld.sh	r0,r0[0x0]
80005e9e:	50 34       	stdsp	sp[0xc],r4

80005ea0 <free>:
80005ea0:	d4 01       	pushm	lr
80005ea2:	48 48       	lddpc	r8,80005eb0 <free+0x10>
80005ea4:	18 9b       	mov	r11,r12
80005ea6:	70 0c       	ld.w	r12,r8[0x0]
80005ea8:	f0 1f 00 03 	mcall	80005eb4 <free+0x14>
80005eac:	d8 02       	popm	pc
80005eae:	00 00       	add	r0,r0
80005eb0:	00 00       	add	r0,r0
80005eb2:	01 30       	ld.ub	r0,r0++
80005eb4:	80 00       	ld.sh	r0,r0[0x0]
80005eb6:	67 6c       	ld.w	r12,r3[0x58]

80005eb8 <malloc>:
80005eb8:	d4 01       	pushm	lr
80005eba:	48 48       	lddpc	r8,80005ec8 <malloc+0x10>
80005ebc:	18 9b       	mov	r11,r12
80005ebe:	70 0c       	ld.w	r12,r8[0x0]
80005ec0:	f0 1f 00 03 	mcall	80005ecc <malloc+0x14>
80005ec4:	d8 02       	popm	pc
80005ec6:	00 00       	add	r0,r0
80005ec8:	00 00       	add	r0,r0
80005eca:	01 30       	ld.ub	r0,r0++
80005ecc:	80 00       	ld.sh	r0,r0[0x0]
80005ece:	5e d0       	retvc	r0

80005ed0 <_malloc_r>:
80005ed0:	d4 31       	pushm	r0-r7,lr
80005ed2:	f6 c8 ff f5 	sub	r8,r11,-11
80005ed6:	18 92       	mov	r2,r12
80005ed8:	59 68       	cp.w	r8,22
80005eda:	f9 b5 08 10 	movls	r5,16
80005ede:	f9 b9 0b f8 	movhi	r9,-8
80005ee2:	f1 d9 eb 25 	andhi	r5,r8,r9
80005ee6:	16 35       	cp.w	r5,r11
80005ee8:	5f 38       	srlo	r8
80005eea:	f1 e5 13 f8 	or	r8,r8,r5>>0x1f
80005eee:	c0 50       	breq	80005ef8 <_malloc_r+0x28>
80005ef0:	30 c8       	mov	r8,12
80005ef2:	99 38       	st.w	r12[0xc],r8
80005ef4:	e0 8f 02 0b 	bral	8000630a <_malloc_r+0x43a>
80005ef8:	f0 1f 00 53 	mcall	80006044 <_malloc_r+0x174>
80005efc:	e0 45 01 f7 	cp.w	r5,503
80005f00:	e0 8b 00 1a 	brhi	80005f34 <_malloc_r+0x64>
80005f04:	ea 09 16 03 	lsr	r9,r5,0x3
80005f08:	4d 08       	lddpc	r8,80006048 <_malloc_r+0x178>
80005f0a:	f0 09 00 38 	add	r8,r8,r9<<0x3
80005f0e:	70 36       	ld.w	r6,r8[0xc]
80005f10:	10 36       	cp.w	r6,r8
80005f12:	c0 61       	brne	80005f1e <_malloc_r+0x4e>
80005f14:	ec c8 ff f8 	sub	r8,r6,-8
80005f18:	70 36       	ld.w	r6,r8[0xc]
80005f1a:	10 36       	cp.w	r6,r8
80005f1c:	c0 90       	breq	80005f2e <_malloc_r+0x5e>
80005f1e:	6c 19       	ld.w	r9,r6[0x4]
80005f20:	04 9c       	mov	r12,r2
80005f22:	e0 19 ff fc 	andl	r9,0xfffc
80005f26:	6c 3a       	ld.w	r10,r6[0xc]
80005f28:	ec 09 00 09 	add	r9,r6,r9
80005f2c:	c4 88       	rjmp	80005fbc <_malloc_r+0xec>
80005f2e:	f2 c7 ff fe 	sub	r7,r9,-2
80005f32:	c5 18       	rjmp	80005fd4 <_malloc_r+0x104>
80005f34:	ea 08 16 09 	lsr	r8,r5,0x9
80005f38:	c0 41       	brne	80005f40 <_malloc_r+0x70>
80005f3a:	ea 09 16 03 	lsr	r9,r5,0x3
80005f3e:	c2 a8       	rjmp	80005f92 <_malloc_r+0xc2>
80005f40:	58 48       	cp.w	r8,4
80005f42:	e0 8b 00 07 	brhi	80005f50 <_malloc_r+0x80>
80005f46:	ea 08 16 06 	lsr	r8,r5,0x6
80005f4a:	f0 c9 ff c8 	sub	r9,r8,-56
80005f4e:	c2 28       	rjmp	80005f92 <_malloc_r+0xc2>
80005f50:	59 48       	cp.w	r8,20
80005f52:	e0 8b 00 05 	brhi	80005f5c <_malloc_r+0x8c>
80005f56:	f0 c9 ff a5 	sub	r9,r8,-91
80005f5a:	c1 c8       	rjmp	80005f92 <_malloc_r+0xc2>
80005f5c:	e0 48 00 54 	cp.w	r8,84
80005f60:	e0 8b 00 07 	brhi	80005f6e <_malloc_r+0x9e>
80005f64:	ea 08 16 0c 	lsr	r8,r5,0xc
80005f68:	f0 c9 ff 92 	sub	r9,r8,-110
80005f6c:	c1 38       	rjmp	80005f92 <_malloc_r+0xc2>
80005f6e:	e0 48 01 54 	cp.w	r8,340
80005f72:	e0 8b 00 07 	brhi	80005f80 <_malloc_r+0xb0>
80005f76:	ea 08 16 0f 	lsr	r8,r5,0xf
80005f7a:	f0 c9 ff 89 	sub	r9,r8,-119
80005f7e:	c0 a8       	rjmp	80005f92 <_malloc_r+0xc2>
80005f80:	ea 09 16 12 	lsr	r9,r5,0x12
80005f84:	e0 48 05 54 	cp.w	r8,1364
80005f88:	e0 88 00 04 	brls	80005f90 <_malloc_r+0xc0>
80005f8c:	37 e9       	mov	r9,126
80005f8e:	c0 28       	rjmp	80005f92 <_malloc_r+0xc2>
80005f90:	28 49       	sub	r9,-124
80005f92:	4a e8       	lddpc	r8,80006048 <_malloc_r+0x178>
80005f94:	f0 09 00 3c 	add	r12,r8,r9<<0x3
80005f98:	78 36       	ld.w	r6,r12[0xc]
80005f9a:	c1 98       	rjmp	80005fcc <_malloc_r+0xfc>
80005f9c:	6c 18       	ld.w	r8,r6[0x4]
80005f9e:	e0 18 ff fc 	andl	r8,0xfffc
80005fa2:	f0 05 01 0b 	sub	r11,r8,r5
80005fa6:	58 fb       	cp.w	r11,15
80005fa8:	e0 8a 00 04 	brle	80005fb0 <_malloc_r+0xe0>
80005fac:	20 19       	sub	r9,1
80005fae:	c1 18       	rjmp	80005fd0 <_malloc_r+0x100>
80005fb0:	6c 3a       	ld.w	r10,r6[0xc]
80005fb2:	58 0b       	cp.w	r11,0
80005fb4:	c0 b5       	brlt	80005fca <_malloc_r+0xfa>
80005fb6:	ec 08 00 09 	add	r9,r6,r8
80005fba:	04 9c       	mov	r12,r2
80005fbc:	6c 28       	ld.w	r8,r6[0x8]
80005fbe:	95 28       	st.w	r10[0x8],r8
80005fc0:	91 3a       	st.w	r8[0xc],r10
80005fc2:	72 18       	ld.w	r8,r9[0x4]
80005fc4:	a1 a8       	sbr	r8,0x0
80005fc6:	93 18       	st.w	r9[0x4],r8
80005fc8:	cc d8       	rjmp	80006162 <_malloc_r+0x292>
80005fca:	14 96       	mov	r6,r10
80005fcc:	18 36       	cp.w	r6,r12
80005fce:	ce 71       	brne	80005f9c <_malloc_r+0xcc>
80005fd0:	f2 c7 ff ff 	sub	r7,r9,-1
80005fd4:	49 db       	lddpc	r11,80006048 <_malloc_r+0x178>
80005fd6:	f6 c4 ff f8 	sub	r4,r11,-8
80005fda:	68 26       	ld.w	r6,r4[0x8]
80005fdc:	08 36       	cp.w	r6,r4
80005fde:	c7 e0       	breq	800060da <_malloc_r+0x20a>
80005fe0:	6c 19       	ld.w	r9,r6[0x4]
80005fe2:	e0 19 ff fc 	andl	r9,0xfffc
80005fe6:	f2 05 01 08 	sub	r8,r9,r5
80005fea:	58 f8       	cp.w	r8,15
80005fec:	e0 8a 00 0e 	brle	80006008 <_malloc_r+0x138>
80005ff0:	ec 05 00 09 	add	r9,r6,r5
80005ff4:	89 39       	st.w	r4[0xc],r9
80005ff6:	89 29       	st.w	r4[0x8],r9
80005ff8:	a1 a5       	sbr	r5,0x0
80005ffa:	f2 08 09 08 	st.w	r9[r8],r8
80005ffe:	8d 15       	st.w	r6[0x4],r5
80006000:	93 24       	st.w	r9[0x8],r4
80006002:	93 34       	st.w	r9[0xc],r4
80006004:	04 9c       	mov	r12,r2
80006006:	cd fb       	rjmp	80005fc4 <_malloc_r+0xf4>
80006008:	89 34       	st.w	r4[0xc],r4
8000600a:	89 24       	st.w	r4[0x8],r4
8000600c:	58 08       	cp.w	r8,0
8000600e:	c0 55       	brlt	80006018 <_malloc_r+0x148>
80006010:	ec 09 00 09 	add	r9,r6,r9
80006014:	04 9c       	mov	r12,r2
80006016:	cd 6b       	rjmp	80005fc2 <_malloc_r+0xf2>
80006018:	e0 49 01 ff 	cp.w	r9,511
8000601c:	e0 8b 00 18 	brhi	8000604c <_malloc_r+0x17c>
80006020:	f2 0a 16 03 	lsr	r10,r9,0x3
80006024:	f6 0a 00 38 	add	r8,r11,r10<<0x3
80006028:	70 29       	ld.w	r9,r8[0x8]
8000602a:	8d 38       	st.w	r6[0xc],r8
8000602c:	8d 29       	st.w	r6[0x8],r9
8000602e:	93 36       	st.w	r9[0xc],r6
80006030:	91 26       	st.w	r8[0x8],r6
80006032:	76 19       	ld.w	r9,r11[0x4]
80006034:	a3 4a       	asr	r10,0x2
80006036:	30 18       	mov	r8,1
80006038:	f0 0a 09 48 	lsl	r8,r8,r10
8000603c:	10 49       	or	r9,r8
8000603e:	97 19       	st.w	r11[0x4],r9
80006040:	c4 d8       	rjmp	800060da <_malloc_r+0x20a>
80006042:	00 00       	add	r0,r0
80006044:	80 00       	ld.sh	r0,r0[0x0]
80006046:	63 50       	ld.w	r0,r1[0x54]
80006048:	00 00       	add	r0,r0
8000604a:	01 34       	ld.ub	r4,r0++
8000604c:	f2 0a 16 09 	lsr	r10,r9,0x9
80006050:	58 4a       	cp.w	r10,4
80006052:	e0 8b 00 07 	brhi	80006060 <_malloc_r+0x190>
80006056:	f2 08 16 06 	lsr	r8,r9,0x6
8000605a:	f0 ca ff c8 	sub	r10,r8,-56
8000605e:	c2 28       	rjmp	800060a2 <_malloc_r+0x1d2>
80006060:	59 4a       	cp.w	r10,20
80006062:	e0 8b 00 04 	brhi	8000606a <_malloc_r+0x19a>
80006066:	2a 5a       	sub	r10,-91
80006068:	c1 d8       	rjmp	800060a2 <_malloc_r+0x1d2>
8000606a:	e0 4a 00 54 	cp.w	r10,84
8000606e:	e0 8b 00 07 	brhi	8000607c <_malloc_r+0x1ac>
80006072:	f2 08 16 0c 	lsr	r8,r9,0xc
80006076:	f0 ca ff 92 	sub	r10,r8,-110
8000607a:	c1 48       	rjmp	800060a2 <_malloc_r+0x1d2>
8000607c:	e0 4a 01 54 	cp.w	r10,340
80006080:	e0 8b 00 07 	brhi	8000608e <_malloc_r+0x1be>
80006084:	f2 08 16 0f 	lsr	r8,r9,0xf
80006088:	f0 ca ff 89 	sub	r10,r8,-119
8000608c:	c0 b8       	rjmp	800060a2 <_malloc_r+0x1d2>
8000608e:	f2 08 16 12 	lsr	r8,r9,0x12
80006092:	e0 4a 05 54 	cp.w	r10,1364
80006096:	f9 ba 0b 7e 	movhi	r10,126
8000609a:	f9 bb 08 7c 	movls	r11,124
8000609e:	f1 db e8 0a 	addls	r10,r8,r11
800060a2:	4c 7e       	lddpc	lr,800061bc <_malloc_r+0x2ec>
800060a4:	fc 0a 00 3c 	add	r12,lr,r10<<0x3
800060a8:	78 2b       	ld.w	r11,r12[0x8]
800060aa:	18 3b       	cp.w	r11,r12
800060ac:	c0 d1       	brne	800060c6 <_malloc_r+0x1f6>
800060ae:	a3 4a       	asr	r10,0x2
800060b0:	30 18       	mov	r8,1
800060b2:	f0 0a 09 48 	lsl	r8,r8,r10
800060b6:	7c 19       	ld.w	r9,lr[0x4]
800060b8:	10 49       	or	r9,r8
800060ba:	16 98       	mov	r8,r11
800060bc:	9d 19       	st.w	lr[0x4],r9
800060be:	c0 a8       	rjmp	800060d2 <_malloc_r+0x202>
800060c0:	76 2b       	ld.w	r11,r11[0x8]
800060c2:	18 3b       	cp.w	r11,r12
800060c4:	c0 60       	breq	800060d0 <_malloc_r+0x200>
800060c6:	76 18       	ld.w	r8,r11[0x4]
800060c8:	e0 18 ff fc 	andl	r8,0xfffc
800060cc:	10 39       	cp.w	r9,r8
800060ce:	cf 93       	brcs	800060c0 <_malloc_r+0x1f0>
800060d0:	76 38       	ld.w	r8,r11[0xc]
800060d2:	8d 38       	st.w	r6[0xc],r8
800060d4:	8d 2b       	st.w	r6[0x8],r11
800060d6:	97 36       	st.w	r11[0xc],r6
800060d8:	91 26       	st.w	r8[0x8],r6
800060da:	ee 09 14 02 	asr	r9,r7,0x2
800060de:	30 18       	mov	r8,1
800060e0:	4b 71       	lddpc	r1,800061bc <_malloc_r+0x2ec>
800060e2:	f0 09 09 4b 	lsl	r11,r8,r9
800060e6:	62 19       	ld.w	r9,r1[0x4]
800060e8:	12 3b       	cp.w	r11,r9
800060ea:	e0 8b 00 6d 	brhi	800061c4 <_malloc_r+0x2f4>
800060ee:	f7 e9 00 08 	and	r8,r11,r9
800060f2:	c0 d1       	brne	8000610c <_malloc_r+0x23c>
800060f4:	0e 98       	mov	r8,r7
800060f6:	a1 7b       	lsl	r11,0x1
800060f8:	e0 18 ff fc 	andl	r8,0xfffc
800060fc:	f0 c7 ff fc 	sub	r7,r8,-4
80006100:	c0 38       	rjmp	80006106 <_malloc_r+0x236>
80006102:	2f c7       	sub	r7,-4
80006104:	a1 7b       	lsl	r11,0x1
80006106:	f7 e9 00 08 	and	r8,r11,r9
8000610a:	cf c0       	breq	80006102 <_malloc_r+0x232>
8000610c:	e2 07 00 33 	add	r3,r1,r7<<0x3
80006110:	0e 9c       	mov	r12,r7
80006112:	06 99       	mov	r9,r3
80006114:	72 36       	ld.w	r6,r9[0xc]
80006116:	c2 c8       	rjmp	8000616e <_malloc_r+0x29e>
80006118:	6c 18       	ld.w	r8,r6[0x4]
8000611a:	e0 18 ff fc 	andl	r8,0xfffc
8000611e:	f0 05 01 0e 	sub	lr,r8,r5
80006122:	58 fe       	cp.w	lr,15
80006124:	e0 8a 00 13 	brle	8000614a <_malloc_r+0x27a>
80006128:	6c 39       	ld.w	r9,r6[0xc]
8000612a:	6c 28       	ld.w	r8,r6[0x8]
8000612c:	93 28       	st.w	r9[0x8],r8
8000612e:	91 39       	st.w	r8[0xc],r9
80006130:	ec 05 00 09 	add	r9,r6,r5
80006134:	89 39       	st.w	r4[0xc],r9
80006136:	89 29       	st.w	r4[0x8],r9
80006138:	a1 a5       	sbr	r5,0x0
8000613a:	f2 0e 09 0e 	st.w	r9[lr],lr
8000613e:	8d 15       	st.w	r6[0x4],r5
80006140:	93 24       	st.w	r9[0x8],r4
80006142:	93 34       	st.w	r9[0xc],r4
80006144:	04 9c       	mov	r12,r2
80006146:	1c 98       	mov	r8,lr
80006148:	c3 eb       	rjmp	80005fc4 <_malloc_r+0xf4>
8000614a:	6c 3a       	ld.w	r10,r6[0xc]
8000614c:	58 0e       	cp.w	lr,0
8000614e:	c0 f5       	brlt	8000616c <_malloc_r+0x29c>
80006150:	ec 08 00 08 	add	r8,r6,r8
80006154:	04 9c       	mov	r12,r2
80006156:	70 19       	ld.w	r9,r8[0x4]
80006158:	a1 a9       	sbr	r9,0x0
8000615a:	91 19       	st.w	r8[0x4],r9
8000615c:	6c 28       	ld.w	r8,r6[0x8]
8000615e:	95 28       	st.w	r10[0x8],r8
80006160:	91 3a       	st.w	r8[0xc],r10
80006162:	f0 1f 00 18 	mcall	800061c0 <_malloc_r+0x2f0>
80006166:	ec cc ff f8 	sub	r12,r6,-8
8000616a:	d8 32       	popm	r0-r7,pc
8000616c:	14 96       	mov	r6,r10
8000616e:	12 36       	cp.w	r6,r9
80006170:	cd 41       	brne	80006118 <_malloc_r+0x248>
80006172:	2f fc       	sub	r12,-1
80006174:	f1 dc c0 02 	bfextu	r8,r12,0x0,0x2
80006178:	c0 30       	breq	8000617e <_malloc_r+0x2ae>
8000617a:	2f 89       	sub	r9,-8
8000617c:	cc cb       	rjmp	80006114 <_malloc_r+0x244>
8000617e:	0e 99       	mov	r9,r7
80006180:	06 9a       	mov	r10,r3
80006182:	f1 d9 c0 02 	bfextu	r8,r9,0x0,0x2
80006186:	c0 51       	brne	80006190 <_malloc_r+0x2c0>
80006188:	62 18       	ld.w	r8,r1[0x4]
8000618a:	16 88       	andn	r8,r11
8000618c:	83 18       	st.w	r1[0x4],r8
8000618e:	c0 78       	rjmp	8000619c <_malloc_r+0x2cc>
80006190:	f4 c8 00 08 	sub	r8,r10,8
80006194:	20 19       	sub	r9,1
80006196:	74 0a       	ld.w	r10,r10[0x0]
80006198:	10 3a       	cp.w	r10,r8
8000619a:	cf 40       	breq	80006182 <_malloc_r+0x2b2>
8000619c:	a1 7b       	lsl	r11,0x1
8000619e:	62 19       	ld.w	r9,r1[0x4]
800061a0:	12 3b       	cp.w	r11,r9
800061a2:	e0 8b 00 11 	brhi	800061c4 <_malloc_r+0x2f4>
800061a6:	58 0b       	cp.w	r11,0
800061a8:	c0 e0       	breq	800061c4 <_malloc_r+0x2f4>
800061aa:	18 97       	mov	r7,r12
800061ac:	c0 38       	rjmp	800061b2 <_malloc_r+0x2e2>
800061ae:	2f c7       	sub	r7,-4
800061b0:	a1 7b       	lsl	r11,0x1
800061b2:	f7 e9 00 08 	and	r8,r11,r9
800061b6:	ca b1       	brne	8000610c <_malloc_r+0x23c>
800061b8:	cf bb       	rjmp	800061ae <_malloc_r+0x2de>
800061ba:	00 00       	add	r0,r0
800061bc:	00 00       	add	r0,r0
800061be:	01 34       	ld.ub	r4,r0++
800061c0:	80 00       	ld.sh	r0,r0[0x0]
800061c2:	63 52       	ld.w	r2,r1[0x54]
800061c4:	62 23       	ld.w	r3,r1[0x8]
800061c6:	66 14       	ld.w	r4,r3[0x4]
800061c8:	e0 14 ff fc 	andl	r4,0xfffc
800061cc:	0a 34       	cp.w	r4,r5
800061ce:	5f 39       	srlo	r9
800061d0:	e8 05 01 0a 	sub	r10,r4,r5
800061d4:	58 fa       	cp.w	r10,15
800061d6:	5f a8       	srle	r8
800061d8:	10 49       	or	r9,r8
800061da:	e0 80 00 a9 	breq	8000632c <_malloc_r+0x45c>
800061de:	4c c8       	lddpc	r8,8000630c <_malloc_r+0x43c>
800061e0:	70 08       	ld.w	r8,r8[0x0]
800061e2:	2f 08       	sub	r8,-16
800061e4:	f0 05 00 07 	add	r7,r8,r5
800061e8:	4c a8       	lddpc	r8,80006310 <_malloc_r+0x440>
800061ea:	70 08       	ld.w	r8,r8[0x0]
800061ec:	5b f8       	cp.w	r8,-1
800061ee:	f9 b9 01 7f 	movne	r9,127
800061f2:	ef d9 e1 08 	addne	r8,r7,r9
800061f6:	f9 b9 01 80 	movne	r9,-128
800061fa:	f1 d9 e1 27 	andne	r7,r8,r9
800061fe:	04 9c       	mov	r12,r2
80006200:	0e 9b       	mov	r11,r7
80006202:	f0 1f 00 45 	mcall	80006314 <_malloc_r+0x444>
80006206:	18 96       	mov	r6,r12
80006208:	5b fc       	cp.w	r12,-1
8000620a:	c7 10       	breq	800062ec <_malloc_r+0x41c>
8000620c:	e6 04 00 0a 	add	r10,r3,r4
80006210:	14 3c       	cp.w	r12,r10
80006212:	c0 32       	brcc	80006218 <_malloc_r+0x348>
80006214:	02 33       	cp.w	r3,r1
80006216:	c6 b1       	brne	800062ec <_malloc_r+0x41c>
80006218:	4c 09       	lddpc	r9,80006318 <_malloc_r+0x448>
8000621a:	72 08       	ld.w	r8,r9[0x0]
8000621c:	ee 08 00 0b 	add	r11,r7,r8
80006220:	93 0b       	st.w	r9[0x0],r11
80006222:	14 36       	cp.w	r6,r10
80006224:	c0 a1       	brne	80006238 <_malloc_r+0x368>
80006226:	f1 d6 c0 07 	bfextu	r8,r6,0x0,0x7
8000622a:	c0 71       	brne	80006238 <_malloc_r+0x368>
8000622c:	ee 04 00 08 	add	r8,r7,r4
80006230:	62 29       	ld.w	r9,r1[0x8]
80006232:	a1 a8       	sbr	r8,0x0
80006234:	93 18       	st.w	r9[0x4],r8
80006236:	c4 f8       	rjmp	800062d4 <_malloc_r+0x404>
80006238:	4b 69       	lddpc	r9,80006310 <_malloc_r+0x440>
8000623a:	72 08       	ld.w	r8,r9[0x0]
8000623c:	5b f8       	cp.w	r8,-1
8000623e:	c0 31       	brne	80006244 <_malloc_r+0x374>
80006240:	93 06       	st.w	r9[0x0],r6
80006242:	c0 68       	rjmp	8000624e <_malloc_r+0x37e>
80006244:	ec 0b 00 09 	add	r9,r6,r11
80006248:	4b 48       	lddpc	r8,80006318 <_malloc_r+0x448>
8000624a:	14 19       	sub	r9,r10
8000624c:	91 09       	st.w	r8[0x0],r9
8000624e:	f3 d6 c0 03 	bfextu	r9,r6,0x0,0x3
80006252:	f2 08 11 08 	rsub	r8,r9,8
80006256:	58 09       	cp.w	r9,0
80006258:	f0 09 17 10 	movne	r9,r8
8000625c:	ed d9 e1 06 	addne	r6,r6,r9
80006260:	28 09       	sub	r9,-128
80006262:	ec 07 00 08 	add	r8,r6,r7
80006266:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000626a:	f2 08 01 07 	sub	r7,r9,r8
8000626e:	04 9c       	mov	r12,r2
80006270:	0e 9b       	mov	r11,r7
80006272:	f0 1f 00 29 	mcall	80006314 <_malloc_r+0x444>
80006276:	5b fc       	cp.w	r12,-1
80006278:	ec 0c 17 00 	moveq	r12,r6
8000627c:	f9 b7 00 00 	moveq	r7,0
80006280:	f8 06 01 08 	sub	r8,r12,r6
80006284:	0e 08       	add	r8,r7
80006286:	a1 a8       	sbr	r8,0x0
80006288:	4a 49       	lddpc	r9,80006318 <_malloc_r+0x448>
8000628a:	8d 18       	st.w	r6[0x4],r8
8000628c:	83 26       	st.w	r1[0x8],r6
8000628e:	72 08       	ld.w	r8,r9[0x0]
80006290:	ee 08 00 08 	add	r8,r7,r8
80006294:	93 08       	st.w	r9[0x0],r8
80006296:	02 33       	cp.w	r3,r1
80006298:	c1 e0       	breq	800062d4 <_malloc_r+0x404>
8000629a:	58 f4       	cp.w	r4,15
8000629c:	e0 8b 00 05 	brhi	800062a6 <_malloc_r+0x3d6>
800062a0:	30 18       	mov	r8,1
800062a2:	8d 18       	st.w	r6[0x4],r8
800062a4:	c2 48       	rjmp	800062ec <_malloc_r+0x41c>
800062a6:	30 5a       	mov	r10,5
800062a8:	e8 c9 00 0c 	sub	r9,r4,12
800062ac:	e0 19 ff f8 	andl	r9,0xfff8
800062b0:	e6 09 00 08 	add	r8,r3,r9
800062b4:	91 2a       	st.w	r8[0x8],r10
800062b6:	91 1a       	st.w	r8[0x4],r10
800062b8:	66 18       	ld.w	r8,r3[0x4]
800062ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800062be:	f3 e8 10 08 	or	r8,r9,r8
800062c2:	87 18       	st.w	r3[0x4],r8
800062c4:	58 f9       	cp.w	r9,15
800062c6:	e0 88 00 07 	brls	800062d4 <_malloc_r+0x404>
800062ca:	e6 cb ff f8 	sub	r11,r3,-8
800062ce:	04 9c       	mov	r12,r2
800062d0:	f0 1f 00 13 	mcall	8000631c <_malloc_r+0x44c>
800062d4:	49 18       	lddpc	r8,80006318 <_malloc_r+0x448>
800062d6:	49 3a       	lddpc	r10,80006320 <_malloc_r+0x450>
800062d8:	70 09       	ld.w	r9,r8[0x0]
800062da:	74 08       	ld.w	r8,r10[0x0]
800062dc:	10 39       	cp.w	r9,r8
800062de:	f5 f9 ba 00 	st.whi	r10[0x0],r9
800062e2:	49 1a       	lddpc	r10,80006324 <_malloc_r+0x454>
800062e4:	74 08       	ld.w	r8,r10[0x0]
800062e6:	10 39       	cp.w	r9,r8
800062e8:	f5 f9 ba 00 	st.whi	r10[0x0],r9
800062ec:	62 28       	ld.w	r8,r1[0x8]
800062ee:	70 18       	ld.w	r8,r8[0x4]
800062f0:	e0 18 ff fc 	andl	r8,0xfffc
800062f4:	0a 38       	cp.w	r8,r5
800062f6:	5f 39       	srlo	r9
800062f8:	f0 05 01 0a 	sub	r10,r8,r5
800062fc:	58 fa       	cp.w	r10,15
800062fe:	5f a8       	srle	r8
80006300:	10 49       	or	r9,r8
80006302:	c1 50       	breq	8000632c <_malloc_r+0x45c>
80006304:	04 9c       	mov	r12,r2
80006306:	f0 1f 00 09 	mcall	80006328 <_malloc_r+0x458>
8000630a:	d8 3a       	popm	r0-r7,pc,r12=0
8000630c:	00 00       	add	r0,r0
8000630e:	06 78       	tst	r8,r3
80006310:	00 00       	add	r0,r0
80006312:	05 40       	ld.w	r0,--r2
80006314:	80 00       	ld.sh	r0,r0[0x0]
80006316:	63 54       	ld.w	r4,r1[0x54]
80006318:	00 00       	add	r0,r0
8000631a:	06 7c       	tst	r12,r3
8000631c:	80 00       	ld.sh	r0,r0[0x0]
8000631e:	67 6c       	ld.w	r12,r3[0x58]
80006320:	00 00       	add	r0,r0
80006322:	06 74       	tst	r4,r3
80006324:	00 00       	add	r0,r0
80006326:	06 70       	tst	r0,r3
80006328:	80 00       	ld.sh	r0,r0[0x0]
8000632a:	63 52       	ld.w	r2,r1[0x54]
8000632c:	0a 98       	mov	r8,r5
8000632e:	a1 a8       	sbr	r8,0x0
80006330:	62 26       	ld.w	r6,r1[0x8]
80006332:	a1 aa       	sbr	r10,0x0
80006334:	8d 18       	st.w	r6[0x4],r8
80006336:	ec 05 00 08 	add	r8,r6,r5
8000633a:	04 9c       	mov	r12,r2
8000633c:	83 28       	st.w	r1[0x8],r8
8000633e:	91 1a       	st.w	r8[0x4],r10
80006340:	f0 1f 00 03 	mcall	8000634c <_malloc_r+0x47c>
80006344:	ec cc ff f8 	sub	r12,r6,-8
80006348:	d8 32       	popm	r0-r7,pc
8000634a:	00 00       	add	r0,r0
8000634c:	80 00       	ld.sh	r0,r0[0x0]
8000634e:	63 52       	ld.w	r2,r1[0x54]

80006350 <__malloc_lock>:
80006350:	5e fc       	retal	r12

80006352 <__malloc_unlock>:
80006352:	5e fc       	retal	r12

80006354 <_sbrk_r>:
80006354:	d4 21       	pushm	r4-r7,lr
80006356:	30 08       	mov	r8,0
80006358:	18 96       	mov	r6,r12
8000635a:	48 77       	lddpc	r7,80006374 <_sbrk_r+0x20>
8000635c:	16 9c       	mov	r12,r11
8000635e:	8f 08       	st.w	r7[0x0],r8
80006360:	f0 1f 00 06 	mcall	80006378 <_sbrk_r+0x24>
80006364:	5b fc       	cp.w	r12,-1
80006366:	c0 51       	brne	80006370 <_sbrk_r+0x1c>
80006368:	6e 08       	ld.w	r8,r7[0x0]
8000636a:	58 08       	cp.w	r8,0
8000636c:	ed f8 1a 03 	st.wne	r6[0xc],r8
80006370:	d8 22       	popm	r4-r7,pc
80006372:	00 00       	add	r0,r0
80006374:	00 00       	add	r0,r0
80006376:	06 a4       	st.w	r3++,r4
80006378:	80 00       	ld.sh	r0,r0[0x0]
8000637a:	4f 60       	lddpc	r0,80006550 <__sfp_lock_acquire>

8000637c <_vsprintf_r>:
8000637c:	d4 01       	pushm	lr
8000637e:	21 7d       	sub	sp,92
80006380:	e0 68 ff ff 	mov	r8,65535
80006384:	ea 18 7f ff 	orh	r8,0x7fff
80006388:	50 58       	stdsp	sp[0x14],r8
8000638a:	50 28       	stdsp	sp[0x8],r8
8000638c:	e0 68 02 08 	mov	r8,520
80006390:	ba 68       	st.h	sp[0xc],r8
80006392:	3f f8       	mov	r8,-1
80006394:	50 4b       	stdsp	sp[0x10],r11
80006396:	50 0b       	stdsp	sp[0x0],r11
80006398:	ba 78       	st.h	sp[0xe],r8
8000639a:	1a 9b       	mov	r11,sp
8000639c:	f0 1f 00 04 	mcall	800063ac <_vsprintf_r+0x30>
800063a0:	30 09       	mov	r9,0
800063a2:	40 08       	lddsp	r8,sp[0x0]
800063a4:	b0 89       	st.b	r8[0x0],r9
800063a6:	2e 9d       	sub	sp,-92
800063a8:	d8 02       	popm	pc
800063aa:	00 00       	add	r0,r0
800063ac:	80 00       	ld.sh	r0,r0[0x0]
800063ae:	6d 50       	ld.w	r0,r6[0x54]

800063b0 <vsprintf>:
800063b0:	d4 01       	pushm	lr
800063b2:	48 58       	lddpc	r8,800063c4 <vsprintf+0x14>
800063b4:	14 99       	mov	r9,r10
800063b6:	16 9a       	mov	r10,r11
800063b8:	18 9b       	mov	r11,r12
800063ba:	70 0c       	ld.w	r12,r8[0x0]
800063bc:	f0 1f 00 03 	mcall	800063c8 <vsprintf+0x18>
800063c0:	d8 02       	popm	pc
800063c2:	00 00       	add	r0,r0
800063c4:	00 00       	add	r0,r0
800063c6:	01 30       	ld.ub	r0,r0++
800063c8:	80 00       	ld.sh	r0,r0[0x0]
800063ca:	63 7c       	ld.w	r12,r1[0x5c]

800063cc <__register_exitproc>:
800063cc:	d4 31       	pushm	r0-r7,lr
800063ce:	4a 98       	lddpc	r8,80006470 <__register_exitproc+0xa4>
800063d0:	70 06       	ld.w	r6,r8[0x0]
800063d2:	6d 27       	ld.w	r7,r6[0x48]
800063d4:	58 07       	cp.w	r7,0
800063d6:	f9 b8 00 4c 	moveq	r8,76
800063da:	ed d8 e0 07 	addeq	r7,r6,r8
800063de:	ed f7 0a 12 	st.weq	r6[0x48],r7
800063e2:	18 95       	mov	r5,r12
800063e4:	16 92       	mov	r2,r11
800063e6:	14 94       	mov	r4,r10
800063e8:	12 93       	mov	r3,r9
800063ea:	6e 18       	ld.w	r8,r7[0x4]
800063ec:	59 f8       	cp.w	r8,31
800063ee:	e0 8a 00 0e 	brle	8000640a <__register_exitproc+0x3e>
800063f2:	e0 6c 00 8c 	mov	r12,140
800063f6:	f0 1f 00 20 	mcall	80006474 <__register_exitproc+0xa8>
800063fa:	18 97       	mov	r7,r12
800063fc:	c3 80       	breq	8000646c <__register_exitproc+0xa0>
800063fe:	6d 28       	ld.w	r8,r6[0x48]
80006400:	99 08       	st.w	r12[0x0],r8
80006402:	ed 4c 00 48 	st.w	r6[72],r12
80006406:	30 08       	mov	r8,0
80006408:	99 18       	st.w	r12[0x4],r8
8000640a:	58 05       	cp.w	r5,0
8000640c:	c2 70       	breq	8000645a <__register_exitproc+0x8e>
8000640e:	ee fc 00 88 	ld.w	r12,r7[136]
80006412:	58 0c       	cp.w	r12,0
80006414:	c0 d1       	brne	8000642e <__register_exitproc+0x62>
80006416:	e0 6c 01 08 	mov	r12,264
8000641a:	f0 1f 00 17 	mcall	80006474 <__register_exitproc+0xa8>
8000641e:	c2 70       	breq	8000646c <__register_exitproc+0xa0>
80006420:	30 08       	mov	r8,0
80006422:	ef 4c 00 88 	st.w	r7[136],r12
80006426:	f9 48 01 04 	st.w	r12[260],r8
8000642a:	f9 48 01 00 	st.w	r12[256],r8
8000642e:	6e 1a       	ld.w	r10,r7[0x4]
80006430:	f4 c8 ff e0 	sub	r8,r10,-32
80006434:	30 19       	mov	r9,1
80006436:	f8 08 09 23 	st.w	r12[r8<<0x2],r3
8000643a:	f2 0a 09 49 	lsl	r9,r9,r10
8000643e:	f8 f8 01 00 	ld.w	r8,r12[256]
80006442:	f8 0a 09 24 	st.w	r12[r10<<0x2],r4
80006446:	12 48       	or	r8,r9
80006448:	f9 48 01 00 	st.w	r12[256],r8
8000644c:	58 25       	cp.w	r5,2
8000644e:	f9 f8 00 41 	ld.weq	r8,r12[0x104]
80006452:	f1 d9 e0 38 	oreq	r8,r8,r9
80006456:	f9 f8 0a 41 	st.weq	r12[0x104],r8
8000645a:	6e 18       	ld.w	r8,r7[0x4]
8000645c:	30 0c       	mov	r12,0
8000645e:	f0 c9 ff ff 	sub	r9,r8,-1
80006462:	2f e8       	sub	r8,-2
80006464:	8f 19       	st.w	r7[0x4],r9
80006466:	ee 08 09 22 	st.w	r7[r8<<0x2],r2
8000646a:	d8 32       	popm	r0-r7,pc
8000646c:	dc 3a       	popm	r0-r7,pc,r12=-1
8000646e:	00 00       	add	r0,r0
80006470:	80 00       	ld.sh	r0,r0[0x0]
80006472:	b8 f8       	st.b	r12[0x7],r8
80006474:	80 00       	ld.sh	r0,r0[0x0]
80006476:	5e b8       	rethi	r8

80006478 <__call_exitprocs>:
80006478:	d4 31       	pushm	r0-r7,lr
8000647a:	20 3d       	sub	sp,12
8000647c:	4b 38       	lddpc	r8,80006548 <__call_exitprocs+0xd0>
8000647e:	50 0c       	stdsp	sp[0x0],r12
80006480:	70 08       	ld.w	r8,r8[0x0]
80006482:	16 90       	mov	r0,r11
80006484:	50 18       	stdsp	sp[0x4],r8
80006486:	2b 88       	sub	r8,-72
80006488:	50 28       	stdsp	sp[0x8],r8
8000648a:	40 18       	lddsp	r8,sp[0x4]
8000648c:	40 22       	lddsp	r2,sp[0x8]
8000648e:	71 27       	ld.w	r7,r8[0x48]
80006490:	c5 78       	rjmp	8000653e <__call_exitprocs+0xc6>
80006492:	6e 19       	ld.w	r9,r7[0x4]
80006494:	ee f5 00 88 	ld.w	r5,r7[136]
80006498:	f2 c8 ff ff 	sub	r8,r9,-1
8000649c:	f2 c6 00 01 	sub	r6,r9,1
800064a0:	ee 08 00 23 	add	r3,r7,r8<<0x2
800064a4:	ea 06 00 24 	add	r4,r5,r6<<0x2
800064a8:	c3 68       	rjmp	80006514 <__call_exitprocs+0x9c>
800064aa:	58 00       	cp.w	r0,0
800064ac:	c0 70       	breq	800064ba <__call_exitprocs+0x42>
800064ae:	58 05       	cp.w	r5,0
800064b0:	c2 f0       	breq	8000650e <__call_exitprocs+0x96>
800064b2:	e8 f8 00 80 	ld.w	r8,r4[128]
800064b6:	00 38       	cp.w	r8,r0
800064b8:	c2 b1       	brne	8000650e <__call_exitprocs+0x96>
800064ba:	6e 18       	ld.w	r8,r7[0x4]
800064bc:	66 0a       	ld.w	r10,r3[0x0]
800064be:	20 18       	sub	r8,1
800064c0:	10 36       	cp.w	r6,r8
800064c2:	ef f6 0a 01 	st.weq	r7[0x4],r6
800064c6:	f9 b8 01 00 	movne	r8,0
800064ca:	e7 f8 1a 00 	st.wne	r3[0x0],r8
800064ce:	58 0a       	cp.w	r10,0
800064d0:	c1 f0       	breq	8000650e <__call_exitprocs+0x96>
800064d2:	6e 11       	ld.w	r1,r7[0x4]
800064d4:	58 05       	cp.w	r5,0
800064d6:	c0 90       	breq	800064e8 <__call_exitprocs+0x70>
800064d8:	30 18       	mov	r8,1
800064da:	f0 06 09 49 	lsl	r9,r8,r6
800064de:	ea f8 01 00 	ld.w	r8,r5[256]
800064e2:	f3 e8 00 08 	and	r8,r9,r8
800064e6:	c0 31       	brne	800064ec <__call_exitprocs+0x74>
800064e8:	5d 1a       	icall	r10
800064ea:	c0 c8       	rjmp	80006502 <__call_exitprocs+0x8a>
800064ec:	ea f8 01 04 	ld.w	r8,r5[260]
800064f0:	68 0c       	ld.w	r12,r4[0x0]
800064f2:	f3 e8 00 08 	and	r8,r9,r8
800064f6:	c0 51       	brne	80006500 <__call_exitprocs+0x88>
800064f8:	18 9b       	mov	r11,r12
800064fa:	40 0c       	lddsp	r12,sp[0x0]
800064fc:	5d 1a       	icall	r10
800064fe:	c0 28       	rjmp	80006502 <__call_exitprocs+0x8a>
80006500:	5d 1a       	icall	r10
80006502:	6e 18       	ld.w	r8,r7[0x4]
80006504:	10 31       	cp.w	r1,r8
80006506:	cc 21       	brne	8000648a <__call_exitprocs+0x12>
80006508:	64 08       	ld.w	r8,r2[0x0]
8000650a:	0e 38       	cp.w	r8,r7
8000650c:	cb f1       	brne	8000648a <__call_exitprocs+0x12>
8000650e:	20 16       	sub	r6,1
80006510:	20 44       	sub	r4,4
80006512:	20 43       	sub	r3,4
80006514:	58 06       	cp.w	r6,0
80006516:	cc a4       	brge	800064aa <__call_exitprocs+0x32>
80006518:	6e 18       	ld.w	r8,r7[0x4]
8000651a:	58 08       	cp.w	r8,0
8000651c:	c0 f1       	brne	8000653a <__call_exitprocs+0xc2>
8000651e:	6e 08       	ld.w	r8,r7[0x0]
80006520:	58 08       	cp.w	r8,0
80006522:	c0 c0       	breq	8000653a <__call_exitprocs+0xc2>
80006524:	85 08       	st.w	r2[0x0],r8
80006526:	58 05       	cp.w	r5,0
80006528:	c0 40       	breq	80006530 <__call_exitprocs+0xb8>
8000652a:	0a 9c       	mov	r12,r5
8000652c:	f0 1f 00 08 	mcall	8000654c <__call_exitprocs+0xd4>
80006530:	0e 9c       	mov	r12,r7
80006532:	f0 1f 00 07 	mcall	8000654c <__call_exitprocs+0xd4>
80006536:	64 07       	ld.w	r7,r2[0x0]
80006538:	c0 38       	rjmp	8000653e <__call_exitprocs+0xc6>
8000653a:	0e 92       	mov	r2,r7
8000653c:	6e 07       	ld.w	r7,r7[0x0]
8000653e:	58 07       	cp.w	r7,0
80006540:	ca 91       	brne	80006492 <__call_exitprocs+0x1a>
80006542:	2f dd       	sub	sp,-12
80006544:	d8 32       	popm	r0-r7,pc
80006546:	00 00       	add	r0,r0
80006548:	80 00       	ld.sh	r0,r0[0x0]
8000654a:	b8 f8       	st.b	r12[0x7],r8
8000654c:	80 00       	ld.sh	r0,r0[0x0]
8000654e:	5e a0       	retle	r0

80006550 <__sfp_lock_acquire>:
80006550:	5e fc       	retal	r12

80006552 <__sfp_lock_release>:
80006552:	5e fc       	retal	r12

80006554 <_cleanup_r>:
80006554:	d4 01       	pushm	lr
80006556:	48 3b       	lddpc	r11,80006560 <_cleanup_r+0xc>
80006558:	f0 1f 00 03 	mcall	80006564 <_cleanup_r+0x10>
8000655c:	d8 02       	popm	pc
8000655e:	00 00       	add	r0,r0
80006560:	80 00       	ld.sh	r0,r0[0x0]
80006562:	9b ec       	st.w	sp[0x38],r12
80006564:	80 00       	ld.sh	r0,r0[0x0]
80006566:	69 18       	ld.w	r8,r4[0x44]

80006568 <__sfmoreglue>:
80006568:	d4 21       	pushm	r4-r7,lr
8000656a:	16 95       	mov	r5,r11
8000656c:	f6 06 10 5c 	mul	r6,r11,92
80006570:	ec cb ff f4 	sub	r11,r6,-12
80006574:	f0 1f 00 07 	mcall	80006590 <__sfmoreglue+0x28>
80006578:	18 97       	mov	r7,r12
8000657a:	c0 90       	breq	8000658c <__sfmoreglue+0x24>
8000657c:	99 15       	st.w	r12[0x4],r5
8000657e:	30 0b       	mov	r11,0
80006580:	2f 4c       	sub	r12,-12
80006582:	0c 9a       	mov	r10,r6
80006584:	8f 2c       	st.w	r7[0x8],r12
80006586:	8f 0b       	st.w	r7[0x0],r11
80006588:	f0 1f 00 03 	mcall	80006594 <__sfmoreglue+0x2c>
8000658c:	0e 9c       	mov	r12,r7
8000658e:	d8 22       	popm	r4-r7,pc
80006590:	80 00       	ld.sh	r0,r0[0x0]
80006592:	5e d0       	retvc	r0
80006594:	80 00       	ld.sh	r0,r0[0x0]
80006596:	69 6c       	ld.w	r12,r4[0x58]

80006598 <__sfp>:
80006598:	d4 21       	pushm	r4-r7,lr
8000659a:	49 c8       	lddpc	r8,80006608 <__sfp+0x70>
8000659c:	18 96       	mov	r6,r12
8000659e:	70 07       	ld.w	r7,r8[0x0]
800065a0:	6e 68       	ld.w	r8,r7[0x18]
800065a2:	58 08       	cp.w	r8,0
800065a4:	c0 41       	brne	800065ac <__sfp+0x14>
800065a6:	0e 9c       	mov	r12,r7
800065a8:	f0 1f 00 19 	mcall	8000660c <__sfp+0x74>
800065ac:	ee c7 ff 28 	sub	r7,r7,-216
800065b0:	30 05       	mov	r5,0
800065b2:	6e 2c       	ld.w	r12,r7[0x8]
800065b4:	6e 19       	ld.w	r9,r7[0x4]
800065b6:	c0 68       	rjmp	800065c2 <__sfp+0x2a>
800065b8:	98 68       	ld.sh	r8,r12[0xc]
800065ba:	ea 08 19 00 	cp.h	r8,r5
800065be:	c1 20       	breq	800065e2 <__sfp+0x4a>
800065c0:	2a 4c       	sub	r12,-92
800065c2:	20 19       	sub	r9,1
800065c4:	cf a7       	brpl	800065b8 <__sfp+0x20>
800065c6:	6e 08       	ld.w	r8,r7[0x0]
800065c8:	58 08       	cp.w	r8,0
800065ca:	c0 71       	brne	800065d8 <__sfp+0x40>
800065cc:	30 4b       	mov	r11,4
800065ce:	0c 9c       	mov	r12,r6
800065d0:	f0 1f 00 10 	mcall	80006610 <__sfp+0x78>
800065d4:	8f 0c       	st.w	r7[0x0],r12
800065d6:	c0 30       	breq	800065dc <__sfp+0x44>
800065d8:	6e 07       	ld.w	r7,r7[0x0]
800065da:	ce cb       	rjmp	800065b2 <__sfp+0x1a>
800065dc:	30 c8       	mov	r8,12
800065de:	8d 38       	st.w	r6[0xc],r8
800065e0:	d8 22       	popm	r4-r7,pc
800065e2:	30 08       	mov	r8,0
800065e4:	f9 48 00 4c 	st.w	r12[76],r8
800065e8:	99 08       	st.w	r12[0x0],r8
800065ea:	99 28       	st.w	r12[0x8],r8
800065ec:	99 18       	st.w	r12[0x4],r8
800065ee:	99 48       	st.w	r12[0x10],r8
800065f0:	99 58       	st.w	r12[0x14],r8
800065f2:	99 68       	st.w	r12[0x18],r8
800065f4:	99 d8       	st.w	r12[0x34],r8
800065f6:	99 e8       	st.w	r12[0x38],r8
800065f8:	f9 48 00 48 	st.w	r12[72],r8
800065fc:	3f f8       	mov	r8,-1
800065fe:	b8 78       	st.h	r12[0xe],r8
80006600:	30 18       	mov	r8,1
80006602:	b8 68       	st.h	r12[0xc],r8
80006604:	d8 22       	popm	r4-r7,pc
80006606:	00 00       	add	r0,r0
80006608:	80 00       	ld.sh	r0,r0[0x0]
8000660a:	b8 f8       	st.b	r12[0x7],r8
8000660c:	80 00       	ld.sh	r0,r0[0x0]
8000660e:	66 14       	ld.w	r4,r3[0x4]
80006610:	80 00       	ld.sh	r0,r0[0x0]
80006612:	65 68       	ld.w	r8,r2[0x58]

80006614 <__sinit>:
80006614:	d4 31       	pushm	r0-r7,lr
80006616:	18 94       	mov	r4,r12
80006618:	78 67       	ld.w	r7,r12[0x18]
8000661a:	58 07       	cp.w	r7,0
8000661c:	c4 71       	brne	800066aa <__sinit+0x96>
8000661e:	4a 48       	lddpc	r8,800066ac <__sinit+0x98>
80006620:	30 13       	mov	r3,1
80006622:	99 a8       	st.w	r12[0x28],r8
80006624:	f9 47 00 d8 	st.w	r12[216],r7
80006628:	f9 47 00 dc 	st.w	r12[220],r7
8000662c:	f9 47 00 e0 	st.w	r12[224],r7
80006630:	99 63       	st.w	r12[0x18],r3
80006632:	f0 1f 00 20 	mcall	800066b0 <__sinit+0x9c>
80006636:	89 0c       	st.w	r4[0x0],r12
80006638:	08 9c       	mov	r12,r4
8000663a:	f0 1f 00 1e 	mcall	800066b0 <__sinit+0x9c>
8000663e:	89 1c       	st.w	r4[0x4],r12
80006640:	08 9c       	mov	r12,r4
80006642:	f0 1f 00 1c 	mcall	800066b0 <__sinit+0x9c>
80006646:	68 08       	ld.w	r8,r4[0x0]
80006648:	30 49       	mov	r9,4
8000664a:	91 07       	st.w	r8[0x0],r7
8000664c:	b0 69       	st.h	r8[0xc],r9
8000664e:	91 17       	st.w	r8[0x4],r7
80006650:	91 27       	st.w	r8[0x8],r7
80006652:	68 19       	ld.w	r9,r4[0x4]
80006654:	b0 77       	st.h	r8[0xe],r7
80006656:	91 47       	st.w	r8[0x10],r7
80006658:	91 57       	st.w	r8[0x14],r7
8000665a:	91 67       	st.w	r8[0x18],r7
8000665c:	91 88       	st.w	r8[0x20],r8
8000665e:	49 65       	lddpc	r5,800066b4 <__sinit+0xa0>
80006660:	49 66       	lddpc	r6,800066b8 <__sinit+0xa4>
80006662:	91 95       	st.w	r8[0x24],r5
80006664:	91 a6       	st.w	r8[0x28],r6
80006666:	49 6b       	lddpc	r11,800066bc <__sinit+0xa8>
80006668:	49 6a       	lddpc	r10,800066c0 <__sinit+0xac>
8000666a:	91 bb       	st.w	r8[0x2c],r11
8000666c:	91 ca       	st.w	r8[0x30],r10
8000666e:	93 07       	st.w	r9[0x0],r7
80006670:	93 17       	st.w	r9[0x4],r7
80006672:	93 27       	st.w	r9[0x8],r7
80006674:	30 98       	mov	r8,9
80006676:	b2 68       	st.h	r9[0xc],r8
80006678:	b2 73       	st.h	r9[0xe],r3
8000667a:	31 28       	mov	r8,18
8000667c:	93 ca       	st.w	r9[0x30],r10
8000667e:	b8 68       	st.h	r12[0xc],r8
80006680:	89 2c       	st.w	r4[0x8],r12
80006682:	93 47       	st.w	r9[0x10],r7
80006684:	93 57       	st.w	r9[0x14],r7
80006686:	93 67       	st.w	r9[0x18],r7
80006688:	93 89       	st.w	r9[0x20],r9
8000668a:	93 95       	st.w	r9[0x24],r5
8000668c:	93 a6       	st.w	r9[0x28],r6
8000668e:	93 bb       	st.w	r9[0x2c],r11
80006690:	99 07       	st.w	r12[0x0],r7
80006692:	99 17       	st.w	r12[0x4],r7
80006694:	99 27       	st.w	r12[0x8],r7
80006696:	30 28       	mov	r8,2
80006698:	b8 78       	st.h	r12[0xe],r8
8000669a:	99 ca       	st.w	r12[0x30],r10
8000669c:	99 67       	st.w	r12[0x18],r7
8000669e:	99 95       	st.w	r12[0x24],r5
800066a0:	99 a6       	st.w	r12[0x28],r6
800066a2:	99 bb       	st.w	r12[0x2c],r11
800066a4:	99 47       	st.w	r12[0x10],r7
800066a6:	99 57       	st.w	r12[0x14],r7
800066a8:	99 8c       	st.w	r12[0x20],r12
800066aa:	d8 32       	popm	r0-r7,pc
800066ac:	80 00       	ld.sh	r0,r0[0x0]
800066ae:	65 54       	ld.w	r4,r2[0x54]
800066b0:	80 00       	ld.sh	r0,r0[0x0]
800066b2:	65 98       	ld.w	r8,r2[0x64]
800066b4:	80 00       	ld.sh	r0,r0[0x0]
800066b6:	69 f0       	ld.w	r0,r4[0x7c]
800066b8:	80 00       	ld.sh	r0,r0[0x0]
800066ba:	69 b8       	ld.w	r8,r4[0x6c]
800066bc:	80 00       	ld.sh	r0,r0[0x0]
800066be:	69 8c       	ld.w	r12,r4[0x60]
800066c0:	80 00       	ld.sh	r0,r0[0x0]
800066c2:	69 7c       	ld.w	r12,r4[0x5c]

800066c4 <_malloc_trim_r>:
800066c4:	d4 21       	pushm	r4-r7,lr
800066c6:	16 96       	mov	r6,r11
800066c8:	18 97       	mov	r7,r12
800066ca:	f0 1f 00 23 	mcall	80006754 <_malloc_trim_r+0x90>
800066ce:	4a 34       	lddpc	r4,80006758 <_malloc_trim_r+0x94>
800066d0:	68 28       	ld.w	r8,r4[0x8]
800066d2:	70 15       	ld.w	r5,r8[0x4]
800066d4:	e0 15 ff fc 	andl	r5,0xfffc
800066d8:	ea c8 ff 91 	sub	r8,r5,-111
800066dc:	0c 18       	sub	r8,r6
800066de:	e0 18 ff 80 	andl	r8,0xff80
800066e2:	f0 c6 00 80 	sub	r6,r8,128
800066e6:	e0 46 00 7f 	cp.w	r6,127
800066ea:	e0 8a 00 23 	brle	80006730 <_malloc_trim_r+0x6c>
800066ee:	30 0b       	mov	r11,0
800066f0:	0e 9c       	mov	r12,r7
800066f2:	f0 1f 00 1b 	mcall	8000675c <_malloc_trim_r+0x98>
800066f6:	68 28       	ld.w	r8,r4[0x8]
800066f8:	0a 08       	add	r8,r5
800066fa:	10 3c       	cp.w	r12,r8
800066fc:	c1 a1       	brne	80006730 <_malloc_trim_r+0x6c>
800066fe:	ec 0b 11 00 	rsub	r11,r6,0
80006702:	0e 9c       	mov	r12,r7
80006704:	f0 1f 00 16 	mcall	8000675c <_malloc_trim_r+0x98>
80006708:	5b fc       	cp.w	r12,-1
8000670a:	c1 71       	brne	80006738 <_malloc_trim_r+0x74>
8000670c:	30 0b       	mov	r11,0
8000670e:	0e 9c       	mov	r12,r7
80006710:	f0 1f 00 13 	mcall	8000675c <_malloc_trim_r+0x98>
80006714:	68 29       	ld.w	r9,r4[0x8]
80006716:	f8 09 01 08 	sub	r8,r12,r9
8000671a:	58 f8       	cp.w	r8,15
8000671c:	e0 8a 00 0a 	brle	80006730 <_malloc_trim_r+0x6c>
80006720:	a1 a8       	sbr	r8,0x0
80006722:	93 18       	st.w	r9[0x4],r8
80006724:	48 f8       	lddpc	r8,80006760 <_malloc_trim_r+0x9c>
80006726:	70 09       	ld.w	r9,r8[0x0]
80006728:	48 f8       	lddpc	r8,80006764 <_malloc_trim_r+0xa0>
8000672a:	f8 09 01 09 	sub	r9,r12,r9
8000672e:	91 09       	st.w	r8[0x0],r9
80006730:	0e 9c       	mov	r12,r7
80006732:	f0 1f 00 0e 	mcall	80006768 <_malloc_trim_r+0xa4>
80006736:	d8 2a       	popm	r4-r7,pc,r12=0
80006738:	68 29       	ld.w	r9,r4[0x8]
8000673a:	ea 06 01 08 	sub	r8,r5,r6
8000673e:	a1 a8       	sbr	r8,0x0
80006740:	93 18       	st.w	r9[0x4],r8
80006742:	48 99       	lddpc	r9,80006764 <_malloc_trim_r+0xa0>
80006744:	72 08       	ld.w	r8,r9[0x0]
80006746:	0c 18       	sub	r8,r6
80006748:	0e 9c       	mov	r12,r7
8000674a:	93 08       	st.w	r9[0x0],r8
8000674c:	f0 1f 00 07 	mcall	80006768 <_malloc_trim_r+0xa4>
80006750:	da 2a       	popm	r4-r7,pc,r12=1
80006752:	00 00       	add	r0,r0
80006754:	80 00       	ld.sh	r0,r0[0x0]
80006756:	63 50       	ld.w	r0,r1[0x54]
80006758:	00 00       	add	r0,r0
8000675a:	01 34       	ld.ub	r4,r0++
8000675c:	80 00       	ld.sh	r0,r0[0x0]
8000675e:	63 54       	ld.w	r4,r1[0x54]
80006760:	00 00       	add	r0,r0
80006762:	05 40       	ld.w	r0,--r2
80006764:	00 00       	add	r0,r0
80006766:	06 7c       	tst	r12,r3
80006768:	80 00       	ld.sh	r0,r0[0x0]
8000676a:	63 52       	ld.w	r2,r1[0x54]

8000676c <_free_r>:
8000676c:	d4 21       	pushm	r4-r7,lr
8000676e:	16 97       	mov	r7,r11
80006770:	18 95       	mov	r5,r12
80006772:	58 0b       	cp.w	r11,0
80006774:	e0 80 00 ce 	breq	80006910 <_free_r+0x1a4>
80006778:	f0 1f 00 4c 	mcall	800068a8 <_free_r+0x13c>
8000677c:	ee cb 00 08 	sub	r11,r7,8
80006780:	76 18       	ld.w	r8,r11[0x4]
80006782:	4c b6       	lddpc	r6,800068ac <_free_r+0x140>
80006784:	10 9e       	mov	lr,r8
80006786:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
8000678a:	a1 ce       	cbr	lr,0x0
8000678c:	6c 28       	ld.w	r8,r6[0x8]
8000678e:	f6 0e 00 0a 	add	r10,r11,lr
80006792:	74 1c       	ld.w	r12,r10[0x4]
80006794:	e0 1c ff fc 	andl	r12,0xfffc
80006798:	10 3a       	cp.w	r10,r8
8000679a:	c1 d1       	brne	800067d4 <_free_r+0x68>
8000679c:	f8 0e 00 0a 	add	r10,r12,lr
800067a0:	58 07       	cp.w	r7,0
800067a2:	c0 81       	brne	800067b2 <_free_r+0x46>
800067a4:	76 08       	ld.w	r8,r11[0x0]
800067a6:	10 1b       	sub	r11,r8
800067a8:	10 0a       	add	r10,r8
800067aa:	76 39       	ld.w	r9,r11[0xc]
800067ac:	76 28       	ld.w	r8,r11[0x8]
800067ae:	93 28       	st.w	r9[0x8],r8
800067b0:	91 39       	st.w	r8[0xc],r9
800067b2:	14 98       	mov	r8,r10
800067b4:	8d 2b       	st.w	r6[0x8],r11
800067b6:	a1 a8       	sbr	r8,0x0
800067b8:	97 18       	st.w	r11[0x4],r8
800067ba:	4b e8       	lddpc	r8,800068b0 <_free_r+0x144>
800067bc:	70 08       	ld.w	r8,r8[0x0]
800067be:	10 3a       	cp.w	r10,r8
800067c0:	c0 63       	brcs	800067cc <_free_r+0x60>
800067c2:	4b d8       	lddpc	r8,800068b4 <_free_r+0x148>
800067c4:	0a 9c       	mov	r12,r5
800067c6:	70 0b       	ld.w	r11,r8[0x0]
800067c8:	f0 1f 00 3c 	mcall	800068b8 <_free_r+0x14c>
800067cc:	0a 9c       	mov	r12,r5
800067ce:	f0 1f 00 3c 	mcall	800068bc <_free_r+0x150>
800067d2:	d8 22       	popm	r4-r7,pc
800067d4:	95 1c       	st.w	r10[0x4],r12
800067d6:	58 07       	cp.w	r7,0
800067d8:	c0 30       	breq	800067de <_free_r+0x72>
800067da:	30 07       	mov	r7,0
800067dc:	c1 08       	rjmp	800067fc <_free_r+0x90>
800067de:	76 08       	ld.w	r8,r11[0x0]
800067e0:	10 1b       	sub	r11,r8
800067e2:	10 0e       	add	lr,r8
800067e4:	76 29       	ld.w	r9,r11[0x8]
800067e6:	ec c8 ff f8 	sub	r8,r6,-8
800067ea:	10 39       	cp.w	r9,r8
800067ec:	f9 b7 00 01 	moveq	r7,1
800067f0:	f7 f8 10 03 	ld.wne	r8,r11[0xc]
800067f4:	f1 f9 1a 02 	st.wne	r8[0x8],r9
800067f8:	f3 f8 1a 03 	st.wne	r9[0xc],r8
800067fc:	f4 0c 00 08 	add	r8,r10,r12
80006800:	70 18       	ld.w	r8,r8[0x4]
80006802:	ed b8 00 00 	bld	r8,0x0
80006806:	c1 30       	breq	8000682c <_free_r+0xc0>
80006808:	18 0e       	add	lr,r12
8000680a:	58 07       	cp.w	r7,0
8000680c:	c0 c1       	brne	80006824 <_free_r+0xb8>
8000680e:	4a 88       	lddpc	r8,800068ac <_free_r+0x140>
80006810:	74 29       	ld.w	r9,r10[0x8]
80006812:	2f 88       	sub	r8,-8
80006814:	10 39       	cp.w	r9,r8
80006816:	c0 71       	brne	80006824 <_free_r+0xb8>
80006818:	93 3b       	st.w	r9[0xc],r11
8000681a:	93 2b       	st.w	r9[0x8],r11
8000681c:	97 29       	st.w	r11[0x8],r9
8000681e:	97 39       	st.w	r11[0xc],r9
80006820:	30 17       	mov	r7,1
80006822:	c0 58       	rjmp	8000682c <_free_r+0xc0>
80006824:	74 29       	ld.w	r9,r10[0x8]
80006826:	74 38       	ld.w	r8,r10[0xc]
80006828:	91 29       	st.w	r8[0x8],r9
8000682a:	93 38       	st.w	r9[0xc],r8
8000682c:	1c 98       	mov	r8,lr
8000682e:	f6 0e 09 0e 	st.w	r11[lr],lr
80006832:	a1 a8       	sbr	r8,0x0
80006834:	97 18       	st.w	r11[0x4],r8
80006836:	58 07       	cp.w	r7,0
80006838:	c6 91       	brne	8000690a <_free_r+0x19e>
8000683a:	e0 4e 01 ff 	cp.w	lr,511
8000683e:	e0 8b 00 13 	brhi	80006864 <_free_r+0xf8>
80006842:	fc 0a 16 03 	lsr	r10,lr,0x3
80006846:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000684a:	70 29       	ld.w	r9,r8[0x8]
8000684c:	97 38       	st.w	r11[0xc],r8
8000684e:	97 29       	st.w	r11[0x8],r9
80006850:	93 3b       	st.w	r9[0xc],r11
80006852:	91 2b       	st.w	r8[0x8],r11
80006854:	6c 19       	ld.w	r9,r6[0x4]
80006856:	a3 4a       	asr	r10,0x2
80006858:	30 18       	mov	r8,1
8000685a:	f0 0a 09 48 	lsl	r8,r8,r10
8000685e:	10 49       	or	r9,r8
80006860:	8d 19       	st.w	r6[0x4],r9
80006862:	c5 48       	rjmp	8000690a <_free_r+0x19e>
80006864:	fc 0a 16 09 	lsr	r10,lr,0x9
80006868:	58 4a       	cp.w	r10,4
8000686a:	e0 8b 00 07 	brhi	80006878 <_free_r+0x10c>
8000686e:	fc 08 16 06 	lsr	r8,lr,0x6
80006872:	f0 ca ff c8 	sub	r10,r8,-56
80006876:	c2 f8       	rjmp	800068d4 <_free_r+0x168>
80006878:	59 4a       	cp.w	r10,20
8000687a:	e0 8b 00 04 	brhi	80006882 <_free_r+0x116>
8000687e:	2a 5a       	sub	r10,-91
80006880:	c2 a8       	rjmp	800068d4 <_free_r+0x168>
80006882:	e0 4a 00 54 	cp.w	r10,84
80006886:	e0 8b 00 07 	brhi	80006894 <_free_r+0x128>
8000688a:	fc 08 16 0c 	lsr	r8,lr,0xc
8000688e:	f0 ca ff 92 	sub	r10,r8,-110
80006892:	c2 18       	rjmp	800068d4 <_free_r+0x168>
80006894:	e0 4a 01 54 	cp.w	r10,340
80006898:	e0 8b 00 14 	brhi	800068c0 <_free_r+0x154>
8000689c:	fc 08 16 0f 	lsr	r8,lr,0xf
800068a0:	f0 ca ff 89 	sub	r10,r8,-119
800068a4:	c1 88       	rjmp	800068d4 <_free_r+0x168>
800068a6:	00 00       	add	r0,r0
800068a8:	80 00       	ld.sh	r0,r0[0x0]
800068aa:	63 50       	ld.w	r0,r1[0x54]
800068ac:	00 00       	add	r0,r0
800068ae:	01 34       	ld.ub	r4,r0++
800068b0:	00 00       	add	r0,r0
800068b2:	05 3c       	ld.ub	r12,r2++
800068b4:	00 00       	add	r0,r0
800068b6:	06 78       	tst	r8,r3
800068b8:	80 00       	ld.sh	r0,r0[0x0]
800068ba:	66 c4       	ld.w	r4,r3[0x30]
800068bc:	80 00       	ld.sh	r0,r0[0x0]
800068be:	63 52       	ld.w	r2,r1[0x54]
800068c0:	fc 08 16 12 	lsr	r8,lr,0x12
800068c4:	e0 4a 05 54 	cp.w	r10,1364
800068c8:	f9 ba 0b 7e 	movhi	r10,126
800068cc:	f9 b9 08 7c 	movls	r9,124
800068d0:	f1 d9 e8 0a 	addls	r10,r8,r9
800068d4:	ec 0a 00 39 	add	r9,r6,r10<<0x3
800068d8:	72 2c       	ld.w	r12,r9[0x8]
800068da:	12 3c       	cp.w	r12,r9
800068dc:	c0 d1       	brne	800068f6 <_free_r+0x18a>
800068de:	a3 4a       	asr	r10,0x2
800068e0:	30 18       	mov	r8,1
800068e2:	f0 0a 09 48 	lsl	r8,r8,r10
800068e6:	6c 19       	ld.w	r9,r6[0x4]
800068e8:	10 49       	or	r9,r8
800068ea:	18 98       	mov	r8,r12
800068ec:	8d 19       	st.w	r6[0x4],r9
800068ee:	c0 a8       	rjmp	80006902 <_free_r+0x196>
800068f0:	78 2c       	ld.w	r12,r12[0x8]
800068f2:	12 3c       	cp.w	r12,r9
800068f4:	c0 60       	breq	80006900 <_free_r+0x194>
800068f6:	78 18       	ld.w	r8,r12[0x4]
800068f8:	e0 18 ff fc 	andl	r8,0xfffc
800068fc:	10 3e       	cp.w	lr,r8
800068fe:	cf 93       	brcs	800068f0 <_free_r+0x184>
80006900:	78 38       	ld.w	r8,r12[0xc]
80006902:	97 38       	st.w	r11[0xc],r8
80006904:	97 2c       	st.w	r11[0x8],r12
80006906:	99 3b       	st.w	r12[0xc],r11
80006908:	91 2b       	st.w	r8[0x8],r11
8000690a:	0a 9c       	mov	r12,r5
8000690c:	f0 1f 00 02 	mcall	80006914 <_free_r+0x1a8>
80006910:	d8 22       	popm	r4-r7,pc
80006912:	00 00       	add	r0,r0
80006914:	80 00       	ld.sh	r0,r0[0x0]
80006916:	63 52       	ld.w	r2,r1[0x54]

80006918 <_fwalk>:
80006918:	d4 31       	pushm	r0-r7,lr
8000691a:	30 04       	mov	r4,0
8000691c:	16 93       	mov	r3,r11
8000691e:	f8 c5 ff 28 	sub	r5,r12,-216
80006922:	08 91       	mov	r1,r4
80006924:	f0 1f 00 10 	mcall	80006964 <_fwalk+0x4c>
80006928:	3f f2       	mov	r2,-1
8000692a:	c1 78       	rjmp	80006958 <_fwalk+0x40>
8000692c:	6a 28       	ld.w	r8,r5[0x8]
8000692e:	6a 16       	ld.w	r6,r5[0x4]
80006930:	f0 c7 ff f4 	sub	r7,r8,-12
80006934:	c0 c8       	rjmp	8000694c <_fwalk+0x34>
80006936:	8e 08       	ld.sh	r8,r7[0x0]
80006938:	e2 08 19 00 	cp.h	r8,r1
8000693c:	c0 70       	breq	8000694a <_fwalk+0x32>
8000693e:	8e 18       	ld.sh	r8,r7[0x2]
80006940:	e4 08 19 00 	cp.h	r8,r2
80006944:	c0 30       	breq	8000694a <_fwalk+0x32>
80006946:	5d 13       	icall	r3
80006948:	18 44       	or	r4,r12
8000694a:	2a 47       	sub	r7,-92
8000694c:	20 16       	sub	r6,1
8000694e:	ee cc 00 0c 	sub	r12,r7,12
80006952:	58 06       	cp.w	r6,0
80006954:	cf 14       	brge	80006936 <_fwalk+0x1e>
80006956:	6a 05       	ld.w	r5,r5[0x0]
80006958:	58 05       	cp.w	r5,0
8000695a:	ce 91       	brne	8000692c <_fwalk+0x14>
8000695c:	f0 1f 00 03 	mcall	80006968 <_fwalk+0x50>
80006960:	08 9c       	mov	r12,r4
80006962:	d8 32       	popm	r0-r7,pc
80006964:	80 00       	ld.sh	r0,r0[0x0]
80006966:	65 50       	ld.w	r0,r2[0x54]
80006968:	80 00       	ld.sh	r0,r0[0x0]
8000696a:	65 52       	ld.w	r2,r2[0x54]

8000696c <memset>:
8000696c:	18 98       	mov	r8,r12
8000696e:	c0 38       	rjmp	80006974 <memset+0x8>
80006970:	10 cb       	st.b	r8++,r11
80006972:	20 1a       	sub	r10,1
80006974:	58 0a       	cp.w	r10,0
80006976:	cf d1       	brne	80006970 <memset+0x4>
80006978:	5e fc       	retal	r12
8000697a:	d7 03       	nop

8000697c <__sclose>:
8000697c:	d4 01       	pushm	lr
8000697e:	96 7b       	ld.sh	r11,r11[0xe]
80006980:	f0 1f 00 02 	mcall	80006988 <__sclose+0xc>
80006984:	d8 02       	popm	pc
80006986:	00 00       	add	r0,r0
80006988:	80 00       	ld.sh	r0,r0[0x0]
8000698a:	8d 40       	st.w	r6[0x10],r0

8000698c <__sseek>:
8000698c:	d4 21       	pushm	r4-r7,lr
8000698e:	16 97       	mov	r7,r11
80006990:	96 7b       	ld.sh	r11,r11[0xe]
80006992:	f0 1f 00 09 	mcall	800069b4 <__sseek+0x28>
80006996:	8e 68       	ld.sh	r8,r7[0xc]
80006998:	10 99       	mov	r9,r8
8000699a:	ad c9       	cbr	r9,0xc
8000699c:	5b fc       	cp.w	r12,-1
8000699e:	ef f9 0c 06 	st.heq	r7[0xc],r9
800069a2:	ef fc 1a 15 	st.wne	r7[0x54],r12
800069a6:	e0 69 10 00 	mov	r9,4096
800069aa:	f1 d9 e1 38 	orne	r8,r8,r9
800069ae:	ef f8 1c 06 	st.hne	r7[0xc],r8
800069b2:	d8 22       	popm	r4-r7,pc
800069b4:	80 00       	ld.sh	r0,r0[0x0]
800069b6:	9f d8       	st.w	pc[0x34],r8

800069b8 <__swrite>:
800069b8:	d4 21       	pushm	r4-r7,lr
800069ba:	96 68       	ld.sh	r8,r11[0xc]
800069bc:	16 97       	mov	r7,r11
800069be:	14 94       	mov	r4,r10
800069c0:	12 95       	mov	r5,r9
800069c2:	e2 18 01 00 	andl	r8,0x100,COH
800069c6:	18 96       	mov	r6,r12
800069c8:	c0 60       	breq	800069d4 <__swrite+0x1c>
800069ca:	30 29       	mov	r9,2
800069cc:	30 0a       	mov	r10,0
800069ce:	96 7b       	ld.sh	r11,r11[0xe]
800069d0:	f0 1f 00 06 	mcall	800069e8 <__swrite+0x30>
800069d4:	8e 68       	ld.sh	r8,r7[0xc]
800069d6:	ad c8       	cbr	r8,0xc
800069d8:	0a 99       	mov	r9,r5
800069da:	08 9a       	mov	r10,r4
800069dc:	8e 7b       	ld.sh	r11,r7[0xe]
800069de:	0c 9c       	mov	r12,r6
800069e0:	ae 68       	st.h	r7[0xc],r8
800069e2:	f0 1f 00 03 	mcall	800069ec <__swrite+0x34>
800069e6:	d8 22       	popm	r4-r7,pc
800069e8:	80 00       	ld.sh	r0,r0[0x0]
800069ea:	9f d8       	st.w	pc[0x34],r8
800069ec:	80 00       	ld.sh	r0,r0[0x0]
800069ee:	8c 28       	ld.sh	r8,r6[0x4]

800069f0 <__sread>:
800069f0:	d4 21       	pushm	r4-r7,lr
800069f2:	16 97       	mov	r7,r11
800069f4:	96 7b       	ld.sh	r11,r11[0xe]
800069f6:	f0 1f 00 07 	mcall	80006a10 <__sread+0x20>
800069fa:	c0 65       	brlt	80006a06 <__sread+0x16>
800069fc:	6f 58       	ld.w	r8,r7[0x54]
800069fe:	18 08       	add	r8,r12
80006a00:	ef 48 00 54 	st.w	r7[84],r8
80006a04:	d8 22       	popm	r4-r7,pc
80006a06:	8e 68       	ld.sh	r8,r7[0xc]
80006a08:	ad c8       	cbr	r8,0xc
80006a0a:	ae 68       	st.h	r7[0xc],r8
80006a0c:	d8 22       	popm	r4-r7,pc
80006a0e:	00 00       	add	r0,r0
80006a10:	80 00       	ld.sh	r0,r0[0x0]
80006a12:	a8 dc       	st.b	r4[0x5],r12

80006a14 <get_arg>:
80006a14:	d4 31       	pushm	r0-r7,lr
80006a16:	20 6d       	sub	sp,24
80006a18:	fa cc ff c4 	sub	r12,sp,-60
80006a1c:	50 2b       	stdsp	sp[0x8],r11
80006a1e:	50 18       	stdsp	sp[0x4],r8
80006a20:	78 01       	ld.w	r1,r12[0x0]
80006a22:	78 28       	ld.w	r8,r12[0x8]
80006a24:	78 10       	ld.w	r0,r12[0x4]
80006a26:	70 0b       	ld.w	r11,r8[0x0]
80006a28:	40 1c       	lddsp	r12,sp[0x4]
80006a2a:	58 0b       	cp.w	r11,0
80006a2c:	f4 0b 17 00 	moveq	r11,r10
80006a30:	50 08       	stdsp	sp[0x0],r8
80006a32:	40 2a       	lddsp	r10,sp[0x8]
80006a34:	12 95       	mov	r5,r9
80006a36:	78 06       	ld.w	r6,r12[0x0]
80006a38:	50 5a       	stdsp	sp[0x14],r10
80006a3a:	c2 69       	rjmp	80006c86 <get_arg+0x272>
80006a3c:	2f fb       	sub	r11,-1
80006a3e:	30 09       	mov	r9,0
80006a40:	17 8a       	ld.ub	r10,r11[0x0]
80006a42:	32 5c       	mov	r12,37
80006a44:	f2 0a 18 00 	cp.b	r10,r9
80006a48:	5f 18       	srne	r8
80006a4a:	f8 0a 18 00 	cp.b	r10,r12
80006a4e:	5f 19       	srne	r9
80006a50:	12 68       	and	r8,r9
80006a52:	30 09       	mov	r9,0
80006a54:	f2 08 18 00 	cp.b	r8,r9
80006a58:	cf 21       	brne	80006a3c <get_arg+0x28>
80006a5a:	58 0a       	cp.w	r10,0
80006a5c:	e0 80 01 22 	breq	80006ca0 <get_arg+0x28c>
80006a60:	30 04       	mov	r4,0
80006a62:	3f f8       	mov	r8,-1
80006a64:	08 93       	mov	r3,r4
80006a66:	50 48       	stdsp	sp[0x10],r8
80006a68:	08 92       	mov	r2,r4
80006a6a:	08 99       	mov	r9,r4
80006a6c:	4c dc       	lddpc	r12,80006ba0 <get_arg+0x18c>
80006a6e:	f2 09 00 38 	add	r8,r9,r9<<0x3
80006a72:	16 97       	mov	r7,r11
80006a74:	0f 3a       	ld.ub	r10,r7++
80006a76:	f8 0a 07 09 	ld.ub	r9,r12[r10]
80006a7a:	4c bc       	lddpc	r12,80006ba4 <get_arg+0x190>
80006a7c:	12 08       	add	r8,r9
80006a7e:	f8 08 07 09 	ld.ub	r9,r12[r8]
80006a82:	4c ac       	lddpc	r12,80006ba8 <get_arg+0x194>
80006a84:	f8 08 07 08 	ld.ub	r8,r12[r8]
80006a88:	50 38       	stdsp	sp[0xc],r8
80006a8a:	20 19       	sub	r9,1
80006a8c:	58 79       	cp.w	r9,7
80006a8e:	e0 8b 00 f5 	brhi	80006c78 <get_arg+0x264>
80006a92:	4c 78       	lddpc	r8,80006bac <get_arg+0x198>
80006a94:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
80006a98:	36 88       	mov	r8,104
80006a9a:	f0 0a 18 00 	cp.b	r10,r8
80006a9e:	e0 80 00 ed 	breq	80006c78 <get_arg+0x264>
80006aa2:	37 18       	mov	r8,113
80006aa4:	f0 0a 18 00 	cp.b	r10,r8
80006aa8:	c0 70       	breq	80006ab6 <get_arg+0xa2>
80006aaa:	34 c8       	mov	r8,76
80006aac:	f0 0a 18 00 	cp.b	r10,r8
80006ab0:	c0 51       	brne	80006aba <get_arg+0xa6>
80006ab2:	a3 b3       	sbr	r3,0x3
80006ab4:	ce 28       	rjmp	80006c78 <get_arg+0x264>
80006ab6:	a5 b3       	sbr	r3,0x5
80006ab8:	ce 08       	rjmp	80006c78 <get_arg+0x264>
80006aba:	0f 89       	ld.ub	r9,r7[0x0]
80006abc:	36 c8       	mov	r8,108
80006abe:	f0 09 18 00 	cp.b	r9,r8
80006ac2:	c0 51       	brne	80006acc <get_arg+0xb8>
80006ac4:	a5 b3       	sbr	r3,0x5
80006ac6:	ee cb ff ff 	sub	r11,r7,-1
80006aca:	cd 88       	rjmp	80006c7a <get_arg+0x266>
80006acc:	a5 a3       	sbr	r3,0x4
80006ace:	cd 58       	rjmp	80006c78 <get_arg+0x264>
80006ad0:	ed d6 c0 05 	bfextu	r6,r6,0x0,0x5
80006ad4:	36 7c       	mov	r12,103
80006ad6:	f8 0a 18 00 	cp.b	r10,r12
80006ada:	e0 8b 00 27 	brhi	80006b28 <get_arg+0x114>
80006ade:	36 58       	mov	r8,101
80006ae0:	f0 0a 18 00 	cp.b	r10,r8
80006ae4:	c4 82       	brcc	80006b74 <get_arg+0x160>
80006ae6:	34 f8       	mov	r8,79
80006ae8:	f0 0a 18 00 	cp.b	r10,r8
80006aec:	c4 80       	breq	80006b7c <get_arg+0x168>
80006aee:	e0 8b 00 0c 	brhi	80006b06 <get_arg+0xf2>
80006af2:	34 58       	mov	r8,69
80006af4:	f0 0a 18 00 	cp.b	r10,r8
80006af8:	c3 e0       	breq	80006b74 <get_arg+0x160>
80006afa:	34 78       	mov	r8,71
80006afc:	f0 0a 18 00 	cp.b	r10,r8
80006b00:	c3 a0       	breq	80006b74 <get_arg+0x160>
80006b02:	34 48       	mov	r8,68
80006b04:	c0 88       	rjmp	80006b14 <get_arg+0x100>
80006b06:	35 88       	mov	r8,88
80006b08:	f0 0a 18 00 	cp.b	r10,r8
80006b0c:	c2 c0       	breq	80006b64 <get_arg+0x150>
80006b0e:	e0 8b 00 07 	brhi	80006b1c <get_arg+0x108>
80006b12:	35 58       	mov	r8,85
80006b14:	f0 0a 18 00 	cp.b	r10,r8
80006b18:	c3 51       	brne	80006b82 <get_arg+0x16e>
80006b1a:	c3 18       	rjmp	80006b7c <get_arg+0x168>
80006b1c:	36 38       	mov	r8,99
80006b1e:	f0 0a 18 00 	cp.b	r10,r8
80006b22:	c2 f0       	breq	80006b80 <get_arg+0x16c>
80006b24:	36 48       	mov	r8,100
80006b26:	c0 e8       	rjmp	80006b42 <get_arg+0x12e>
80006b28:	37 08       	mov	r8,112
80006b2a:	f0 0a 18 00 	cp.b	r10,r8
80006b2e:	c2 50       	breq	80006b78 <get_arg+0x164>
80006b30:	e0 8b 00 0d 	brhi	80006b4a <get_arg+0x136>
80006b34:	36 e8       	mov	r8,110
80006b36:	f0 0a 18 00 	cp.b	r10,r8
80006b3a:	c1 f0       	breq	80006b78 <get_arg+0x164>
80006b3c:	e0 8b 00 14 	brhi	80006b64 <get_arg+0x150>
80006b40:	36 98       	mov	r8,105
80006b42:	f0 0a 18 00 	cp.b	r10,r8
80006b46:	c1 e1       	brne	80006b82 <get_arg+0x16e>
80006b48:	c0 e8       	rjmp	80006b64 <get_arg+0x150>
80006b4a:	37 58       	mov	r8,117
80006b4c:	f0 0a 18 00 	cp.b	r10,r8
80006b50:	c0 a0       	breq	80006b64 <get_arg+0x150>
80006b52:	37 88       	mov	r8,120
80006b54:	f0 0a 18 00 	cp.b	r10,r8
80006b58:	c0 60       	breq	80006b64 <get_arg+0x150>
80006b5a:	37 38       	mov	r8,115
80006b5c:	f0 0a 18 00 	cp.b	r10,r8
80006b60:	c1 11       	brne	80006b82 <get_arg+0x16e>
80006b62:	c0 b8       	rjmp	80006b78 <get_arg+0x164>
80006b64:	ed b3 00 04 	bld	r3,0x4
80006b68:	c0 a0       	breq	80006b7c <get_arg+0x168>
80006b6a:	ed b3 00 05 	bld	r3,0x5
80006b6e:	c0 91       	brne	80006b80 <get_arg+0x16c>
80006b70:	30 22       	mov	r2,2
80006b72:	c0 88       	rjmp	80006b82 <get_arg+0x16e>
80006b74:	30 42       	mov	r2,4
80006b76:	c0 68       	rjmp	80006b82 <get_arg+0x16e>
80006b78:	30 32       	mov	r2,3
80006b7a:	c0 48       	rjmp	80006b82 <get_arg+0x16e>
80006b7c:	30 12       	mov	r2,1
80006b7e:	c0 28       	rjmp	80006b82 <get_arg+0x16e>
80006b80:	30 02       	mov	r2,0
80006b82:	40 4a       	lddsp	r10,sp[0x10]
80006b84:	5b fa       	cp.w	r10,-1
80006b86:	c0 40       	breq	80006b8e <get_arg+0x17a>
80006b88:	e0 0a 09 22 	st.w	r0[r10<<0x2],r2
80006b8c:	c7 68       	rjmp	80006c78 <get_arg+0x264>
80006b8e:	58 62       	cp.w	r2,6
80006b90:	e0 8b 00 74 	brhi	80006c78 <get_arg+0x264>
80006b94:	6a 09       	ld.w	r9,r5[0x0]
80006b96:	ec ca ff ff 	sub	r10,r6,-1
80006b9a:	48 68       	lddpc	r8,80006bb0 <get_arg+0x19c>
80006b9c:	f0 02 03 2f 	ld.w	pc,r8[r2<<0x2]
80006ba0:	80 00       	ld.sh	r0,r0[0x0]
80006ba2:	bc 4c       	st.h	lr[0x8],r12
80006ba4:	80 00       	ld.sh	r0,r0[0x0]
80006ba6:	bb 78       	lsl	r8,0x1b
80006ba8:	80 00       	ld.sh	r0,r0[0x0]
80006baa:	ba fc       	st.b	sp[0x7],r12
80006bac:	80 00       	ld.sh	r0,r0[0x0]
80006bae:	b9 5c       	asr	r12,0x19
80006bb0:	80 00       	ld.sh	r0,r0[0x0]
80006bb2:	b9 7c       	lsl	r12,0x19
80006bb4:	f2 c8 ff f8 	sub	r8,r9,-8
80006bb8:	8b 08       	st.w	r5[0x0],r8
80006bba:	f2 e8 00 00 	ld.d	r8,r9[0]
80006bbe:	e2 06 08 38 	st.d	r1[r6<<0x3],r8
80006bc2:	c0 f8       	rjmp	80006be0 <get_arg+0x1cc>
80006bc4:	f2 c8 ff fc 	sub	r8,r9,-4
80006bc8:	8b 08       	st.w	r5[0x0],r8
80006bca:	72 08       	ld.w	r8,r9[0x0]
80006bcc:	e2 06 09 38 	st.w	r1[r6<<0x3],r8
80006bd0:	c0 88       	rjmp	80006be0 <get_arg+0x1cc>
80006bd2:	f2 c8 ff f8 	sub	r8,r9,-8
80006bd6:	8b 08       	st.w	r5[0x0],r8
80006bd8:	f2 e8 00 00 	ld.d	r8,r9[0]
80006bdc:	e2 06 08 38 	st.d	r1[r6<<0x3],r8
80006be0:	0e 9b       	mov	r11,r7
80006be2:	14 96       	mov	r6,r10
80006be4:	c4 b8       	rjmp	80006c7a <get_arg+0x266>
80006be6:	60 08       	ld.w	r8,r0[0x0]
80006be8:	5b f8       	cp.w	r8,-1
80006bea:	c0 71       	brne	80006bf8 <get_arg+0x1e4>
80006bec:	e0 6a 00 80 	mov	r10,128
80006bf0:	30 0b       	mov	r11,0
80006bf2:	00 9c       	mov	r12,r0
80006bf4:	f0 1f 00 4e 	mcall	80006d2c <get_arg+0x318>
80006bf8:	e8 cc 00 01 	sub	r12,r4,1
80006bfc:	40 5a       	lddsp	r10,sp[0x14]
80006bfe:	0e 9b       	mov	r11,r7
80006c00:	f4 0c 0c 4a 	max	r10,r10,r12
80006c04:	50 4c       	stdsp	sp[0x10],r12
80006c06:	50 5a       	stdsp	sp[0x14],r10
80006c08:	c3 98       	rjmp	80006c7a <get_arg+0x266>
80006c0a:	60 08       	ld.w	r8,r0[0x0]
80006c0c:	5b f8       	cp.w	r8,-1
80006c0e:	c0 71       	brne	80006c1c <get_arg+0x208>
80006c10:	e0 6a 00 80 	mov	r10,128
80006c14:	30 0b       	mov	r11,0
80006c16:	00 9c       	mov	r12,r0
80006c18:	f0 1f 00 45 	mcall	80006d2c <get_arg+0x318>
80006c1c:	20 14       	sub	r4,1
80006c1e:	40 58       	lddsp	r8,sp[0x14]
80006c20:	30 09       	mov	r9,0
80006c22:	f0 04 0c 48 	max	r8,r8,r4
80006c26:	0e 9b       	mov	r11,r7
80006c28:	e0 04 09 29 	st.w	r0[r4<<0x2],r9
80006c2c:	50 58       	stdsp	sp[0x14],r8
80006c2e:	c2 68       	rjmp	80006c7a <get_arg+0x266>
80006c30:	16 97       	mov	r7,r11
80006c32:	6a 08       	ld.w	r8,r5[0x0]
80006c34:	f0 c9 ff fc 	sub	r9,r8,-4
80006c38:	8b 09       	st.w	r5[0x0],r9
80006c3a:	70 08       	ld.w	r8,r8[0x0]
80006c3c:	0e 9b       	mov	r11,r7
80006c3e:	e2 06 09 38 	st.w	r1[r6<<0x3],r8
80006c42:	2f f6       	sub	r6,-1
80006c44:	c1 b8       	rjmp	80006c7a <get_arg+0x266>
80006c46:	f4 c4 00 30 	sub	r4,r10,48
80006c4a:	c0 68       	rjmp	80006c56 <get_arg+0x242>
80006c4c:	e8 04 00 28 	add	r8,r4,r4<<0x2
80006c50:	2f f7       	sub	r7,-1
80006c52:	f2 08 00 14 	add	r4,r9,r8<<0x1
80006c56:	0f 88       	ld.ub	r8,r7[0x0]
80006c58:	58 08       	cp.w	r8,0
80006c5a:	c0 f0       	breq	80006c78 <get_arg+0x264>
80006c5c:	f0 c9 00 30 	sub	r9,r8,48
80006c60:	58 99       	cp.w	r9,9
80006c62:	fe 98 ff f5 	brls	80006c4c <get_arg+0x238>
80006c66:	c0 98       	rjmp	80006c78 <get_arg+0x264>
80006c68:	2f f7       	sub	r7,-1
80006c6a:	0f 88       	ld.ub	r8,r7[0x0]
80006c6c:	58 08       	cp.w	r8,0
80006c6e:	c0 50       	breq	80006c78 <get_arg+0x264>
80006c70:	23 08       	sub	r8,48
80006c72:	58 98       	cp.w	r8,9
80006c74:	fe 98 ff fa 	brls	80006c68 <get_arg+0x254>
80006c78:	0e 9b       	mov	r11,r7
80006c7a:	40 39       	lddsp	r9,sp[0xc]
80006c7c:	30 b8       	mov	r8,11
80006c7e:	f0 09 18 00 	cp.b	r9,r8
80006c82:	fe 91 fe f5 	brne	80006a6c <get_arg+0x58>
80006c86:	40 2c       	lddsp	r12,sp[0x8]
80006c88:	17 88       	ld.ub	r8,r11[0x0]
80006c8a:	0c 3c       	cp.w	r12,r6
80006c8c:	5f 49       	srge	r9
80006c8e:	30 0a       	mov	r10,0
80006c90:	f4 08 18 00 	cp.b	r8,r10
80006c94:	5f 18       	srne	r8
80006c96:	12 68       	and	r8,r9
80006c98:	f4 08 18 00 	cp.b	r8,r10
80006c9c:	fe 91 fe d1 	brne	80006a3e <get_arg+0x2a>
80006ca0:	40 2a       	lddsp	r10,sp[0x8]
80006ca2:	0c 9e       	mov	lr,r6
80006ca4:	e0 06 00 2c 	add	r12,r0,r6<<0x2
80006ca8:	17 89       	ld.ub	r9,r11[0x0]
80006caa:	30 08       	mov	r8,0
80006cac:	40 56       	lddsp	r6,sp[0x14]
80006cae:	f0 09 18 00 	cp.b	r9,r8
80006cb2:	ec 07 17 00 	moveq	r7,r6
80006cb6:	f4 07 17 10 	movne	r7,r10
80006cba:	e2 0e 00 3a 	add	r10,r1,lr<<0x3
80006cbe:	c2 a8       	rjmp	80006d12 <get_arg+0x2fe>
80006cc0:	78 08       	ld.w	r8,r12[0x0]
80006cc2:	58 38       	cp.w	r8,3
80006cc4:	c1 e0       	breq	80006d00 <get_arg+0x2ec>
80006cc6:	e0 89 00 07 	brgt	80006cd4 <get_arg+0x2c0>
80006cca:	58 18       	cp.w	r8,1
80006ccc:	c1 a0       	breq	80006d00 <get_arg+0x2ec>
80006cce:	58 28       	cp.w	r8,2
80006cd0:	c1 81       	brne	80006d00 <get_arg+0x2ec>
80006cd2:	c0 58       	rjmp	80006cdc <get_arg+0x2c8>
80006cd4:	58 58       	cp.w	r8,5
80006cd6:	c0 c0       	breq	80006cee <get_arg+0x2da>
80006cd8:	c0 b5       	brlt	80006cee <get_arg+0x2da>
80006cda:	c1 38       	rjmp	80006d00 <get_arg+0x2ec>
80006cdc:	6a 09       	ld.w	r9,r5[0x0]
80006cde:	f2 c8 ff f8 	sub	r8,r9,-8
80006ce2:	8b 08       	st.w	r5[0x0],r8
80006ce4:	f2 e8 00 00 	ld.d	r8,r9[0]
80006ce8:	f4 e9 00 00 	st.d	r10[0],r8
80006cec:	c1 08       	rjmp	80006d0c <get_arg+0x2f8>
80006cee:	6a 09       	ld.w	r9,r5[0x0]
80006cf0:	f2 c8 ff f8 	sub	r8,r9,-8
80006cf4:	8b 08       	st.w	r5[0x0],r8
80006cf6:	f2 e8 00 00 	ld.d	r8,r9[0]
80006cfa:	f4 e9 00 00 	st.d	r10[0],r8
80006cfe:	c0 78       	rjmp	80006d0c <get_arg+0x2f8>
80006d00:	6a 08       	ld.w	r8,r5[0x0]
80006d02:	f0 c9 ff fc 	sub	r9,r8,-4
80006d06:	8b 09       	st.w	r5[0x0],r9
80006d08:	70 08       	ld.w	r8,r8[0x0]
80006d0a:	95 08       	st.w	r10[0x0],r8
80006d0c:	2f fe       	sub	lr,-1
80006d0e:	2f 8a       	sub	r10,-8
80006d10:	2f cc       	sub	r12,-4
80006d12:	0e 3e       	cp.w	lr,r7
80006d14:	fe 9a ff d6 	brle	80006cc0 <get_arg+0x2ac>
80006d18:	40 19       	lddsp	r9,sp[0x4]
80006d1a:	40 08       	lddsp	r8,sp[0x0]
80006d1c:	40 26       	lddsp	r6,sp[0x8]
80006d1e:	93 0e       	st.w	r9[0x0],lr
80006d20:	91 0b       	st.w	r8[0x0],r11
80006d22:	e2 06 00 3c 	add	r12,r1,r6<<0x3
80006d26:	2f ad       	sub	sp,-24
80006d28:	d8 32       	popm	r0-r7,pc
80006d2a:	00 00       	add	r0,r0
80006d2c:	80 00       	ld.sh	r0,r0[0x0]
80006d2e:	69 6c       	ld.w	r12,r4[0x58]

80006d30 <__sprint_r>:
80006d30:	d4 21       	pushm	r4-r7,lr
80006d32:	14 97       	mov	r7,r10
80006d34:	74 28       	ld.w	r8,r10[0x8]
80006d36:	58 08       	cp.w	r8,0
80006d38:	c0 41       	brne	80006d40 <__sprint_r+0x10>
80006d3a:	95 18       	st.w	r10[0x4],r8
80006d3c:	10 9c       	mov	r12,r8
80006d3e:	d8 22       	popm	r4-r7,pc
80006d40:	f0 1f 00 03 	mcall	80006d4c <__sprint_r+0x1c>
80006d44:	30 08       	mov	r8,0
80006d46:	8f 18       	st.w	r7[0x4],r8
80006d48:	8f 28       	st.w	r7[0x8],r8
80006d4a:	d8 22       	popm	r4-r7,pc
80006d4c:	80 00       	ld.sh	r0,r0[0x0]
80006d4e:	9d 1c       	st.w	lr[0x4],r12

80006d50 <_vfprintf_r>:
80006d50:	d4 31       	pushm	r0-r7,lr
80006d52:	fa cd 06 cc 	sub	sp,sp,1740
80006d56:	50 4b       	stdsp	sp[0x10],r11
80006d58:	51 49       	stdsp	sp[0x50],r9
80006d5a:	14 97       	mov	r7,r10
80006d5c:	50 5c       	stdsp	sp[0x14],r12
80006d5e:	f0 1f 00 4b 	mcall	80006e88 <_vfprintf_r+0x138>
80006d62:	78 0c       	ld.w	r12,r12[0x0]
80006d64:	50 dc       	stdsp	sp[0x34],r12
80006d66:	40 5b       	lddsp	r11,sp[0x14]
80006d68:	58 0b       	cp.w	r11,0
80006d6a:	c0 70       	breq	80006d78 <_vfprintf_r+0x28>
80006d6c:	76 68       	ld.w	r8,r11[0x18]
80006d6e:	58 08       	cp.w	r8,0
80006d70:	c0 41       	brne	80006d78 <_vfprintf_r+0x28>
80006d72:	16 9c       	mov	r12,r11
80006d74:	f0 1f 00 46 	mcall	80006e8c <_vfprintf_r+0x13c>
80006d78:	4c 68       	lddpc	r8,80006e90 <_vfprintf_r+0x140>
80006d7a:	40 4a       	lddsp	r10,sp[0x10]
80006d7c:	10 3a       	cp.w	r10,r8
80006d7e:	c0 51       	brne	80006d88 <_vfprintf_r+0x38>
80006d80:	40 59       	lddsp	r9,sp[0x14]
80006d82:	72 09       	ld.w	r9,r9[0x0]
80006d84:	50 49       	stdsp	sp[0x10],r9
80006d86:	c1 28       	rjmp	80006daa <_vfprintf_r+0x5a>
80006d88:	4c 38       	lddpc	r8,80006e94 <_vfprintf_r+0x144>
80006d8a:	40 4b       	lddsp	r11,sp[0x10]
80006d8c:	10 3b       	cp.w	r11,r8
80006d8e:	c0 51       	brne	80006d98 <_vfprintf_r+0x48>
80006d90:	40 5a       	lddsp	r10,sp[0x14]
80006d92:	74 1a       	ld.w	r10,r10[0x4]
80006d94:	50 4a       	stdsp	sp[0x10],r10
80006d96:	c0 a8       	rjmp	80006daa <_vfprintf_r+0x5a>
80006d98:	4c 08       	lddpc	r8,80006e98 <_vfprintf_r+0x148>
80006d9a:	40 49       	lddsp	r9,sp[0x10]
80006d9c:	10 39       	cp.w	r9,r8
80006d9e:	fb f8 00 05 	ld.weq	r8,sp[0x14]
80006da2:	f1 f8 00 02 	ld.weq	r8,r8[0x8]
80006da6:	fb f8 0a 04 	st.weq	sp[0x10],r8
80006daa:	40 4b       	lddsp	r11,sp[0x10]
80006dac:	96 68       	ld.sh	r8,r11[0xc]
80006dae:	ed b8 00 03 	bld	r8,0x3
80006db2:	c0 41       	brne	80006dba <_vfprintf_r+0x6a>
80006db4:	76 48       	ld.w	r8,r11[0x10]
80006db6:	58 08       	cp.w	r8,0
80006db8:	c0 71       	brne	80006dc6 <_vfprintf_r+0x76>
80006dba:	40 4b       	lddsp	r11,sp[0x10]
80006dbc:	40 5c       	lddsp	r12,sp[0x14]
80006dbe:	f0 1f 00 38 	mcall	80006e9c <_vfprintf_r+0x14c>
80006dc2:	e0 81 0f 28 	brne	80008c12 <_vfprintf_r+0x1ec2>
80006dc6:	40 49       	lddsp	r9,sp[0x10]
80006dc8:	92 6a       	ld.sh	r10,r9[0xc]
80006dca:	14 98       	mov	r8,r10
80006dcc:	e2 18 00 1a 	andl	r8,0x1a,COH
80006dd0:	58 a8       	cp.w	r8,10
80006dd2:	c3 f1       	brne	80006e50 <_vfprintf_r+0x100>
80006dd4:	92 7b       	ld.sh	r11,r9[0xe]
80006dd6:	30 08       	mov	r8,0
80006dd8:	f0 0b 19 00 	cp.h	r11,r8
80006ddc:	c3 a5       	brlt	80006e50 <_vfprintf_r+0x100>
80006dde:	fb 5b 05 e2 	st.h	sp[1506],r11
80006de2:	40 4b       	lddsp	r11,sp[0x10]
80006de4:	76 88       	ld.w	r8,r11[0x20]
80006de6:	fb 48 05 f4 	st.w	sp[1524],r8
80006dea:	76 a8       	ld.w	r8,r11[0x28]
80006dec:	fb 48 05 fc 	st.w	sp[1532],r8
80006df0:	fa c8 ff ac 	sub	r8,sp,-84
80006df4:	fb 48 05 e4 	st.w	sp[1508],r8
80006df8:	fb 48 05 d4 	st.w	sp[1492],r8
80006dfc:	e0 68 04 00 	mov	r8,1024
80006e00:	a1 da       	cbr	r10,0x1
80006e02:	fb 48 05 e8 	st.w	sp[1512],r8
80006e06:	fb 48 05 dc 	st.w	sp[1500],r8
80006e0a:	30 08       	mov	r8,0
80006e0c:	fb 5a 05 e0 	st.h	sp[1504],r10
80006e10:	41 49       	lddsp	r9,sp[0x50]
80006e12:	0e 9a       	mov	r10,r7
80006e14:	fb 48 05 ec 	st.w	sp[1516],r8
80006e18:	fa c7 fa 2c 	sub	r7,sp,-1492
80006e1c:	40 5c       	lddsp	r12,sp[0x14]
80006e1e:	0e 9b       	mov	r11,r7
80006e20:	f0 1f 00 20 	mcall	80006ea0 <_vfprintf_r+0x150>
80006e24:	50 ac       	stdsp	sp[0x28],r12
80006e26:	c0 95       	brlt	80006e38 <_vfprintf_r+0xe8>
80006e28:	0e 9b       	mov	r11,r7
80006e2a:	40 5c       	lddsp	r12,sp[0x14]
80006e2c:	f0 1f 00 1e 	mcall	80006ea4 <_vfprintf_r+0x154>
80006e30:	40 aa       	lddsp	r10,sp[0x28]
80006e32:	f9 ba 01 ff 	movne	r10,-1
80006e36:	50 aa       	stdsp	sp[0x28],r10
80006e38:	fb 08 05 e0 	ld.sh	r8,sp[1504]
80006e3c:	ed b8 00 06 	bld	r8,0x6
80006e40:	e0 81 0e eb 	brne	80008c16 <_vfprintf_r+0x1ec6>
80006e44:	40 49       	lddsp	r9,sp[0x10]
80006e46:	92 68       	ld.sh	r8,r9[0xc]
80006e48:	a7 a8       	sbr	r8,0x6
80006e4a:	b2 68       	st.h	r9[0xc],r8
80006e4c:	e0 8f 0e e5 	bral	80008c16 <_vfprintf_r+0x1ec6>
80006e50:	30 08       	mov	r8,0
80006e52:	10 90       	mov	r0,r8
80006e54:	fb 48 06 a0 	st.w	sp[1696],r8
80006e58:	fb 48 06 9c 	st.w	sp[1692],r8
80006e5c:	fb 48 06 c0 	st.w	sp[1728],r8
80006e60:	fb 48 06 c4 	st.w	sp[1732],r8
80006e64:	fa c8 f9 d0 	sub	r8,sp,-1584
80006e68:	51 37       	stdsp	sp[0x4c],r7
80006e6a:	fb 48 06 98 	st.w	sp[1688],r8
80006e6e:	10 91       	mov	r1,r8
80006e70:	50 10       	stdsp	sp[0x4],r0
80006e72:	3f f8       	mov	r8,-1
80006e74:	50 00       	stdsp	sp[0x0],r0
80006e76:	fb 48 05 54 	st.w	sp[1364],r8
80006e7a:	50 a0       	stdsp	sp[0x28],r0
80006e7c:	50 f0       	stdsp	sp[0x3c],r0
80006e7e:	51 20       	stdsp	sp[0x48],r0
80006e80:	51 00       	stdsp	sp[0x40],r0
80006e82:	41 33       	lddsp	r3,sp[0x4c]
80006e84:	32 5a       	mov	r10,37
80006e86:	c1 28       	rjmp	80006eaa <_vfprintf_r+0x15a>
80006e88:	80 00       	ld.sh	r0,r0[0x0]
80006e8a:	9f d0       	st.w	pc[0x34],r0
80006e8c:	80 00       	ld.sh	r0,r0[0x0]
80006e8e:	66 14       	ld.w	r4,r3[0x4]
80006e90:	80 00       	ld.sh	r0,r0[0x0]
80006e92:	b8 fc       	st.b	r12[0x7],r12
80006e94:	80 00       	ld.sh	r0,r0[0x0]
80006e96:	b9 1c       	ld.d	r12,--r12
80006e98:	80 00       	ld.sh	r0,r0[0x0]
80006e9a:	b9 3c       	mul	r12,r12
80006e9c:	80 00       	ld.sh	r0,r0[0x0]
80006e9e:	8c 54       	ld.sh	r4,r6[0xa]
80006ea0:	80 00       	ld.sh	r0,r0[0x0]
80006ea2:	6d 50       	ld.w	r0,r6[0x54]
80006ea4:	80 00       	ld.sh	r0,r0[0x0]
80006ea6:	9c 04       	ld.sh	r4,lr[0x0]
80006ea8:	2f f3       	sub	r3,-1
80006eaa:	07 88       	ld.ub	r8,r3[0x0]
80006eac:	30 0b       	mov	r11,0
80006eae:	f4 08 18 00 	cp.b	r8,r10
80006eb2:	5f 19       	srne	r9
80006eb4:	f6 08 18 00 	cp.b	r8,r11
80006eb8:	5f 18       	srne	r8
80006eba:	12 68       	and	r8,r9
80006ebc:	f6 08 18 00 	cp.b	r8,r11
80006ec0:	cf 41       	brne	80006ea8 <_vfprintf_r+0x158>
80006ec2:	41 3a       	lddsp	r10,sp[0x4c]
80006ec4:	e6 0a 01 06 	sub	r6,r3,r10
80006ec8:	c1 f0       	breq	80006f06 <_vfprintf_r+0x1b6>
80006eca:	fa f8 06 a0 	ld.w	r8,sp[1696]
80006ece:	0c 08       	add	r8,r6
80006ed0:	83 0a       	st.w	r1[0x0],r10
80006ed2:	fb 48 06 a0 	st.w	sp[1696],r8
80006ed6:	83 16       	st.w	r1[0x4],r6
80006ed8:	fa f8 06 9c 	ld.w	r8,sp[1692]
80006edc:	2f f8       	sub	r8,-1
80006ede:	fb 48 06 9c 	st.w	sp[1692],r8
80006ee2:	58 78       	cp.w	r8,7
80006ee4:	e0 89 00 04 	brgt	80006eec <_vfprintf_r+0x19c>
80006ee8:	2f 81       	sub	r1,-8
80006eea:	c0 b8       	rjmp	80006f00 <_vfprintf_r+0x1b0>
80006eec:	fa ca f9 68 	sub	r10,sp,-1688
80006ef0:	40 4b       	lddsp	r11,sp[0x10]
80006ef2:	40 5c       	lddsp	r12,sp[0x14]
80006ef4:	f0 1f 00 60 	mcall	80007074 <_vfprintf_r+0x324>
80006ef8:	e0 81 0e 88 	brne	80008c08 <_vfprintf_r+0x1eb8>
80006efc:	fa c1 f9 d0 	sub	r1,sp,-1584
80006f00:	40 a9       	lddsp	r9,sp[0x28]
80006f02:	0c 09       	add	r9,r6
80006f04:	50 a9       	stdsp	sp[0x28],r9
80006f06:	07 88       	ld.ub	r8,r3[0x0]
80006f08:	30 0b       	mov	r11,0
80006f0a:	f6 08 18 00 	cp.b	r8,r11
80006f0e:	e0 80 0e 6f 	breq	80008bec <_vfprintf_r+0x1e9c>
80006f12:	30 0a       	mov	r10,0
80006f14:	3f f9       	mov	r9,-1
80006f16:	e6 c8 ff ff 	sub	r8,r3,-1
80006f1a:	fb 6b 06 cb 	st.b	sp[1739],r11
80006f1e:	50 9a       	stdsp	sp[0x24],r10
80006f20:	50 c9       	stdsp	sp[0x30],r9
80006f22:	51 38       	stdsp	sp[0x4c],r8
80006f24:	00 97       	mov	r7,r0
80006f26:	14 92       	mov	r2,r10
80006f28:	50 ba       	stdsp	sp[0x2c],r10
80006f2a:	c0 68       	rjmp	80006f36 <_vfprintf_r+0x1e6>
80006f2c:	3f fb       	mov	r11,-1
80006f2e:	51 36       	stdsp	sp[0x4c],r6
80006f30:	50 cb       	stdsp	sp[0x30],r11
80006f32:	c0 28       	rjmp	80006f36 <_vfprintf_r+0x1e6>
80006f34:	30 02       	mov	r2,0
80006f36:	41 3a       	lddsp	r10,sp[0x4c]
80006f38:	15 39       	ld.ub	r9,r10++
80006f3a:	51 3a       	stdsp	sp[0x4c],r10
80006f3c:	50 89       	stdsp	sp[0x20],r9
80006f3e:	c0 28       	rjmp	80006f42 <_vfprintf_r+0x1f2>
80006f40:	50 b9       	stdsp	sp[0x2c],r9
80006f42:	40 88       	lddsp	r8,sp[0x20]
80006f44:	22 08       	sub	r8,32
80006f46:	e0 48 00 58 	cp.w	r8,88
80006f4a:	e0 8b 09 c1 	brhi	800082cc <_vfprintf_r+0x157c>
80006f4e:	4c bb       	lddpc	r11,80007078 <_vfprintf_r+0x328>
80006f50:	f6 08 03 2f 	ld.w	pc,r11[r8<<0x2]
80006f54:	4c aa       	lddpc	r10,8000707c <_vfprintf_r+0x32c>
80006f56:	00 99       	mov	r9,r0
80006f58:	51 2a       	stdsp	sp[0x48],r10
80006f5a:	e0 8f 08 28 	bral	80007faa <_vfprintf_r+0x125a>
80006f5e:	fb 38 06 cb 	ld.ub	r8,sp[1739]
80006f62:	30 09       	mov	r9,0
80006f64:	f2 08 18 00 	cp.b	r8,r9
80006f68:	ce 71       	brne	80006f36 <_vfprintf_r+0x1e6>
80006f6a:	32 08       	mov	r8,32
80006f6c:	c7 88       	rjmp	8000705c <_vfprintf_r+0x30c>
80006f6e:	40 98       	lddsp	r8,sp[0x24]
80006f70:	a1 a8       	sbr	r8,0x0
80006f72:	c0 f9       	rjmp	80007190 <_vfprintf_r+0x440>
80006f74:	41 3b       	lddsp	r11,sp[0x4c]
80006f76:	17 89       	ld.ub	r9,r11[0x0]
80006f78:	f2 c8 00 30 	sub	r8,r9,48
80006f7c:	58 98       	cp.w	r8,9
80006f7e:	e0 8b 00 1e 	brhi	80006fba <_vfprintf_r+0x26a>
80006f82:	16 9a       	mov	r10,r11
80006f84:	30 0b       	mov	r11,0
80006f86:	2f fa       	sub	r10,-1
80006f88:	f2 c8 00 30 	sub	r8,r9,48
80006f8c:	f6 0b 00 29 	add	r9,r11,r11<<0x2
80006f90:	f0 09 00 1b 	add	r11,r8,r9<<0x1
80006f94:	15 39       	ld.ub	r9,r10++
80006f96:	f2 c8 00 30 	sub	r8,r9,48
80006f9a:	58 98       	cp.w	r8,9
80006f9c:	fe 98 ff f6 	brls	80006f88 <_vfprintf_r+0x238>
80006fa0:	e0 49 00 24 	cp.w	r9,36
80006fa4:	cc 81       	brne	80006f34 <_vfprintf_r+0x1e4>
80006fa6:	e0 4b 00 20 	cp.w	r11,32
80006faa:	e0 89 0e 2f 	brgt	80008c08 <_vfprintf_r+0x1eb8>
80006fae:	20 1b       	sub	r11,1
80006fb0:	fa f8 06 c4 	ld.w	r8,sp[1732]
80006fb4:	10 3b       	cp.w	r11,r8
80006fb6:	c0 95       	brlt	80006fc8 <_vfprintf_r+0x278>
80006fb8:	c0 e8       	rjmp	80006fd4 <_vfprintf_r+0x284>
80006fba:	fa f9 06 c4 	ld.w	r9,sp[1732]
80006fbe:	e0 ca ff ff 	sub	r10,r0,-1
80006fc2:	12 30       	cp.w	r0,r9
80006fc4:	c1 e5       	brlt	80007000 <_vfprintf_r+0x2b0>
80006fc6:	c2 68       	rjmp	80007012 <_vfprintf_r+0x2c2>
80006fc8:	fa c9 f9 34 	sub	r9,sp,-1740
80006fcc:	51 3a       	stdsp	sp[0x4c],r10
80006fce:	f2 0b 00 38 	add	r8,r9,r11<<0x3
80006fd2:	c1 c8       	rjmp	8000700a <_vfprintf_r+0x2ba>
80006fd4:	fa c8 f9 40 	sub	r8,sp,-1728
80006fd8:	51 3a       	stdsp	sp[0x4c],r10
80006fda:	1a d8       	st.w	--sp,r8
80006fdc:	fa c8 fa a8 	sub	r8,sp,-1368
80006fe0:	1a d8       	st.w	--sp,r8
80006fe2:	fa c8 fb a4 	sub	r8,sp,-1116
80006fe6:	06 9a       	mov	r10,r3
80006fe8:	1a d8       	st.w	--sp,r8
80006fea:	fa c8 f9 30 	sub	r8,sp,-1744
80006fee:	fa c9 ff a4 	sub	r9,sp,-92
80006ff2:	40 8c       	lddsp	r12,sp[0x20]
80006ff4:	f0 1f 00 23 	mcall	80007080 <_vfprintf_r+0x330>
80006ff8:	2f dd       	sub	sp,-12
80006ffa:	78 0c       	ld.w	r12,r12[0x0]
80006ffc:	50 bc       	stdsp	sp[0x2c],r12
80006ffe:	c2 58       	rjmp	80007048 <_vfprintf_r+0x2f8>
80007000:	fa cb f9 34 	sub	r11,sp,-1740
80007004:	14 90       	mov	r0,r10
80007006:	f6 07 00 38 	add	r8,r11,r7<<0x3
8000700a:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000700e:	50 b8       	stdsp	sp[0x2c],r8
80007010:	c1 c8       	rjmp	80007048 <_vfprintf_r+0x2f8>
80007012:	41 4c       	lddsp	r12,sp[0x50]
80007014:	59 f9       	cp.w	r9,31
80007016:	e0 89 00 13 	brgt	8000703c <_vfprintf_r+0x2ec>
8000701a:	f8 c8 ff fc 	sub	r8,r12,-4
8000701e:	78 0c       	ld.w	r12,r12[0x0]
80007020:	51 48       	stdsp	sp[0x50],r8
80007022:	50 bc       	stdsp	sp[0x2c],r12
80007024:	fa cb f9 34 	sub	r11,sp,-1740
80007028:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000702c:	f1 4c fd 88 	st.w	r8[-632],r12
80007030:	14 90       	mov	r0,r10
80007032:	f2 c8 ff ff 	sub	r8,r9,-1
80007036:	fb 48 06 c4 	st.w	sp[1732],r8
8000703a:	c0 78       	rjmp	80007048 <_vfprintf_r+0x2f8>
8000703c:	78 09       	ld.w	r9,r12[0x0]
8000703e:	f8 c8 ff fc 	sub	r8,r12,-4
80007042:	50 b9       	stdsp	sp[0x2c],r9
80007044:	14 90       	mov	r0,r10
80007046:	51 48       	stdsp	sp[0x50],r8
80007048:	40 b8       	lddsp	r8,sp[0x2c]
8000704a:	58 08       	cp.w	r8,0
8000704c:	fe 94 ff 75 	brge	80006f36 <_vfprintf_r+0x1e6>
80007050:	5c 38       	neg	r8
80007052:	50 b8       	stdsp	sp[0x2c],r8
80007054:	40 9b       	lddsp	r11,sp[0x24]
80007056:	a3 ab       	sbr	r11,0x2
80007058:	cc e8       	rjmp	800071f4 <_vfprintf_r+0x4a4>
8000705a:	32 b8       	mov	r8,43
8000705c:	fb 68 06 cb 	st.b	sp[1739],r8
80007060:	c6 bb       	rjmp	80006f36 <_vfprintf_r+0x1e6>
80007062:	41 3a       	lddsp	r10,sp[0x4c]
80007064:	15 39       	ld.ub	r9,r10++
80007066:	51 3a       	stdsp	sp[0x4c],r10
80007068:	50 89       	stdsp	sp[0x20],r9
8000706a:	e0 49 00 2a 	cp.w	r9,42
8000706e:	c0 b0       	breq	80007084 <_vfprintf_r+0x334>
80007070:	30 0c       	mov	r12,0
80007072:	c8 38       	rjmp	80007178 <_vfprintf_r+0x428>
80007074:	80 00       	ld.sh	r0,r0[0x0]
80007076:	6d 30       	ld.w	r0,r6[0x4c]
80007078:	80 00       	ld.sh	r0,r0[0x0]
8000707a:	b9 98       	lsr	r8,0x19
8000707c:	80 00       	ld.sh	r0,r0[0x0]
8000707e:	bb e4       	*unknown*
80007080:	80 00       	ld.sh	r0,r0[0x0]
80007082:	6a 14       	ld.w	r4,r5[0x4]
80007084:	41 38       	lddsp	r8,sp[0x4c]
80007086:	11 89       	ld.ub	r9,r8[0x0]
80007088:	f2 c8 00 30 	sub	r8,r9,48
8000708c:	58 98       	cp.w	r8,9
8000708e:	e0 8b 00 1f 	brhi	800070cc <_vfprintf_r+0x37c>
80007092:	41 36       	lddsp	r6,sp[0x4c]
80007094:	30 0b       	mov	r11,0
80007096:	2f f6       	sub	r6,-1
80007098:	f2 c8 00 30 	sub	r8,r9,48
8000709c:	f6 0b 00 29 	add	r9,r11,r11<<0x2
800070a0:	f0 09 00 1b 	add	r11,r8,r9<<0x1
800070a4:	0d 39       	ld.ub	r9,r6++
800070a6:	f2 c8 00 30 	sub	r8,r9,48
800070aa:	58 98       	cp.w	r8,9
800070ac:	fe 98 ff f6 	brls	80007098 <_vfprintf_r+0x348>
800070b0:	e0 49 00 24 	cp.w	r9,36
800070b4:	fe 91 ff 40 	brne	80006f34 <_vfprintf_r+0x1e4>
800070b8:	e0 4b 00 20 	cp.w	r11,32
800070bc:	e0 89 0d a6 	brgt	80008c08 <_vfprintf_r+0x1eb8>
800070c0:	20 1b       	sub	r11,1
800070c2:	fa f8 06 c4 	ld.w	r8,sp[1732]
800070c6:	10 3b       	cp.w	r11,r8
800070c8:	c0 95       	brlt	800070da <_vfprintf_r+0x38a>
800070ca:	c0 d8       	rjmp	800070e4 <_vfprintf_r+0x394>
800070cc:	fa f9 06 c4 	ld.w	r9,sp[1732]
800070d0:	e0 ca ff ff 	sub	r10,r0,-1
800070d4:	12 30       	cp.w	r0,r9
800070d6:	c1 c5       	brlt	8000710e <_vfprintf_r+0x3be>
800070d8:	c2 58       	rjmp	80007122 <_vfprintf_r+0x3d2>
800070da:	fa ca f9 34 	sub	r10,sp,-1740
800070de:	f4 0b 00 38 	add	r8,r10,r11<<0x3
800070e2:	c1 c8       	rjmp	8000711a <_vfprintf_r+0x3ca>
800070e4:	fa c8 f9 40 	sub	r8,sp,-1728
800070e8:	1a d8       	st.w	--sp,r8
800070ea:	fa c8 fa a8 	sub	r8,sp,-1368
800070ee:	1a d8       	st.w	--sp,r8
800070f0:	fa c8 fb a4 	sub	r8,sp,-1116
800070f4:	06 9a       	mov	r10,r3
800070f6:	1a d8       	st.w	--sp,r8
800070f8:	fa c8 f9 30 	sub	r8,sp,-1744
800070fc:	fa c9 ff a4 	sub	r9,sp,-92
80007100:	40 8c       	lddsp	r12,sp[0x20]
80007102:	f0 1f 01 66 	mcall	80007698 <_vfprintf_r+0x948>
80007106:	2f dd       	sub	sp,-12
80007108:	78 0c       	ld.w	r12,r12[0x0]
8000710a:	50 cc       	stdsp	sp[0x30],r12
8000710c:	c2 88       	rjmp	8000715c <_vfprintf_r+0x40c>
8000710e:	fa c9 f9 34 	sub	r9,sp,-1740
80007112:	14 90       	mov	r0,r10
80007114:	41 36       	lddsp	r6,sp[0x4c]
80007116:	f2 07 00 38 	add	r8,r9,r7<<0x3
8000711a:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000711e:	50 c8       	stdsp	sp[0x30],r8
80007120:	c1 e8       	rjmp	8000715c <_vfprintf_r+0x40c>
80007122:	41 4c       	lddsp	r12,sp[0x50]
80007124:	59 f9       	cp.w	r9,31
80007126:	e0 89 00 14 	brgt	8000714e <_vfprintf_r+0x3fe>
8000712a:	f8 c8 ff fc 	sub	r8,r12,-4
8000712e:	78 0c       	ld.w	r12,r12[0x0]
80007130:	51 48       	stdsp	sp[0x50],r8
80007132:	50 cc       	stdsp	sp[0x30],r12
80007134:	fa cb f9 34 	sub	r11,sp,-1740
80007138:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000713c:	f1 4c fd 88 	st.w	r8[-632],r12
80007140:	14 90       	mov	r0,r10
80007142:	f2 c8 ff ff 	sub	r8,r9,-1
80007146:	41 36       	lddsp	r6,sp[0x4c]
80007148:	fb 48 06 c4 	st.w	sp[1732],r8
8000714c:	c0 88       	rjmp	8000715c <_vfprintf_r+0x40c>
8000714e:	78 09       	ld.w	r9,r12[0x0]
80007150:	f8 c8 ff fc 	sub	r8,r12,-4
80007154:	50 c9       	stdsp	sp[0x30],r9
80007156:	14 90       	mov	r0,r10
80007158:	41 36       	lddsp	r6,sp[0x4c]
8000715a:	51 48       	stdsp	sp[0x50],r8
8000715c:	40 c8       	lddsp	r8,sp[0x30]
8000715e:	58 08       	cp.w	r8,0
80007160:	fe 95 fe e6 	brlt	80006f2c <_vfprintf_r+0x1dc>
80007164:	51 36       	stdsp	sp[0x4c],r6
80007166:	ce 8a       	rjmp	80006f36 <_vfprintf_r+0x1e6>
80007168:	41 3b       	lddsp	r11,sp[0x4c]
8000716a:	f8 0c 00 28 	add	r8,r12,r12<<0x2
8000716e:	17 3a       	ld.ub	r10,r11++
80007170:	f2 08 00 1c 	add	r12,r9,r8<<0x1
80007174:	51 3b       	stdsp	sp[0x4c],r11
80007176:	50 8a       	stdsp	sp[0x20],r10
80007178:	40 89       	lddsp	r9,sp[0x20]
8000717a:	23 09       	sub	r9,48
8000717c:	58 99       	cp.w	r9,9
8000717e:	fe 98 ff f5 	brls	80007168 <_vfprintf_r+0x418>
80007182:	3f f9       	mov	r9,-1
80007184:	f8 09 0c 4c 	max	r12,r12,r9
80007188:	50 cc       	stdsp	sp[0x30],r12
8000718a:	cd ca       	rjmp	80006f42 <_vfprintf_r+0x1f2>
8000718c:	40 98       	lddsp	r8,sp[0x24]
8000718e:	a7 b8       	sbr	r8,0x7
80007190:	50 98       	stdsp	sp[0x24],r8
80007192:	cd 2a       	rjmp	80006f36 <_vfprintf_r+0x1e6>
80007194:	30 09       	mov	r9,0
80007196:	40 88       	lddsp	r8,sp[0x20]
80007198:	41 3b       	lddsp	r11,sp[0x4c]
8000719a:	23 08       	sub	r8,48
8000719c:	17 3a       	ld.ub	r10,r11++
8000719e:	51 3b       	stdsp	sp[0x4c],r11
800071a0:	50 8a       	stdsp	sp[0x20],r10
800071a2:	f2 09 00 29 	add	r9,r9,r9<<0x2
800071a6:	f0 09 00 19 	add	r9,r8,r9<<0x1
800071aa:	14 98       	mov	r8,r10
800071ac:	23 08       	sub	r8,48
800071ae:	58 98       	cp.w	r8,9
800071b0:	fe 98 ff f3 	brls	80007196 <_vfprintf_r+0x446>
800071b4:	e0 4a 00 24 	cp.w	r10,36
800071b8:	fe 91 fe c4 	brne	80006f40 <_vfprintf_r+0x1f0>
800071bc:	e0 49 00 20 	cp.w	r9,32
800071c0:	e0 89 0d 24 	brgt	80008c08 <_vfprintf_r+0x1eb8>
800071c4:	f2 c7 00 01 	sub	r7,r9,1
800071c8:	30 12       	mov	r2,1
800071ca:	cb 6a       	rjmp	80006f36 <_vfprintf_r+0x1e6>
800071cc:	40 99       	lddsp	r9,sp[0x24]
800071ce:	a3 b9       	sbr	r9,0x3
800071d0:	c0 e8       	rjmp	800071ec <_vfprintf_r+0x49c>
800071d2:	40 98       	lddsp	r8,sp[0x24]
800071d4:	a7 a8       	sbr	r8,0x6
800071d6:	cd db       	rjmp	80007190 <_vfprintf_r+0x440>
800071d8:	41 3b       	lddsp	r11,sp[0x4c]
800071da:	36 ca       	mov	r10,108
800071dc:	17 88       	ld.ub	r8,r11[0x0]
800071de:	f4 08 18 00 	cp.b	r8,r10
800071e2:	c0 71       	brne	800071f0 <_vfprintf_r+0x4a0>
800071e4:	2f fb       	sub	r11,-1
800071e6:	40 99       	lddsp	r9,sp[0x24]
800071e8:	51 3b       	stdsp	sp[0x4c],r11
800071ea:	a5 b9       	sbr	r9,0x5
800071ec:	50 99       	stdsp	sp[0x24],r9
800071ee:	ca 4a       	rjmp	80006f36 <_vfprintf_r+0x1e6>
800071f0:	40 9b       	lddsp	r11,sp[0x24]
800071f2:	a5 ab       	sbr	r11,0x4
800071f4:	50 9b       	stdsp	sp[0x24],r11
800071f6:	ca 0a       	rjmp	80006f36 <_vfprintf_r+0x1e6>
800071f8:	40 9a       	lddsp	r10,sp[0x24]
800071fa:	a5 ba       	sbr	r10,0x5
800071fc:	50 9a       	stdsp	sp[0x24],r10
800071fe:	c9 ca       	rjmp	80006f36 <_vfprintf_r+0x1e6>
80007200:	00 98       	mov	r8,r0
80007202:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007206:	58 02       	cp.w	r2,0
80007208:	c1 d0       	breq	80007242 <_vfprintf_r+0x4f2>
8000720a:	1c 37       	cp.w	r7,lr
8000720c:	c0 64       	brge	80007218 <_vfprintf_r+0x4c8>
8000720e:	fa c9 f9 34 	sub	r9,sp,-1740
80007212:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007216:	c1 d8       	rjmp	80007250 <_vfprintf_r+0x500>
80007218:	fa c8 f9 40 	sub	r8,sp,-1728
8000721c:	1a d8       	st.w	--sp,r8
8000721e:	fa c8 fa a8 	sub	r8,sp,-1368
80007222:	0e 9b       	mov	r11,r7
80007224:	1a d8       	st.w	--sp,r8
80007226:	fa c8 fb a4 	sub	r8,sp,-1116
8000722a:	06 9a       	mov	r10,r3
8000722c:	1a d8       	st.w	--sp,r8
8000722e:	fa c8 f9 30 	sub	r8,sp,-1744
80007232:	fa c9 ff a4 	sub	r9,sp,-92
80007236:	40 8c       	lddsp	r12,sp[0x20]
80007238:	f0 1f 01 18 	mcall	80007698 <_vfprintf_r+0x948>
8000723c:	2f dd       	sub	sp,-12
8000723e:	19 bb       	ld.ub	r11,r12[0x3]
80007240:	c2 48       	rjmp	80007288 <_vfprintf_r+0x538>
80007242:	2f f0       	sub	r0,-1
80007244:	1c 38       	cp.w	r8,lr
80007246:	c0 84       	brge	80007256 <_vfprintf_r+0x506>
80007248:	fa cb f9 34 	sub	r11,sp,-1740
8000724c:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007250:	f1 3b fd 8b 	ld.ub	r11,r8[-629]
80007254:	c1 a8       	rjmp	80007288 <_vfprintf_r+0x538>
80007256:	41 4c       	lddsp	r12,sp[0x50]
80007258:	59 fe       	cp.w	lr,31
8000725a:	e0 89 00 13 	brgt	80007280 <_vfprintf_r+0x530>
8000725e:	f8 c8 ff fc 	sub	r8,r12,-4
80007262:	51 48       	stdsp	sp[0x50],r8
80007264:	78 09       	ld.w	r9,r12[0x0]
80007266:	fa ca f9 34 	sub	r10,sp,-1740
8000726a:	f4 0e 00 38 	add	r8,r10,lr<<0x3
8000726e:	f1 49 fd 88 	st.w	r8[-632],r9
80007272:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80007276:	fc c8 ff ff 	sub	r8,lr,-1
8000727a:	fb 48 06 c4 	st.w	sp[1732],r8
8000727e:	c0 58       	rjmp	80007288 <_vfprintf_r+0x538>
80007280:	f8 c8 ff fc 	sub	r8,r12,-4
80007284:	19 bb       	ld.ub	r11,r12[0x3]
80007286:	51 48       	stdsp	sp[0x50],r8
80007288:	fb 6b 06 70 	st.b	sp[1648],r11
8000728c:	e0 8f 08 26 	bral	800082d8 <_vfprintf_r+0x1588>
80007290:	40 98       	lddsp	r8,sp[0x24]
80007292:	a5 a8       	sbr	r8,0x4
80007294:	50 98       	stdsp	sp[0x24],r8
80007296:	00 99       	mov	r9,r0
80007298:	40 98       	lddsp	r8,sp[0x24]
8000729a:	ed b8 00 05 	bld	r8,0x5
8000729e:	c4 c1       	brne	80007336 <_vfprintf_r+0x5e6>
800072a0:	fa fe 06 c4 	ld.w	lr,sp[1732]
800072a4:	58 02       	cp.w	r2,0
800072a6:	c1 d0       	breq	800072e0 <_vfprintf_r+0x590>
800072a8:	1c 37       	cp.w	r7,lr
800072aa:	c0 64       	brge	800072b6 <_vfprintf_r+0x566>
800072ac:	fa cb f9 34 	sub	r11,sp,-1740
800072b0:	f6 07 00 38 	add	r8,r11,r7<<0x3
800072b4:	c1 d8       	rjmp	800072ee <_vfprintf_r+0x59e>
800072b6:	fa c8 f9 40 	sub	r8,sp,-1728
800072ba:	1a d8       	st.w	--sp,r8
800072bc:	fa c8 fa a8 	sub	r8,sp,-1368
800072c0:	1a d8       	st.w	--sp,r8
800072c2:	fa c8 fb a4 	sub	r8,sp,-1116
800072c6:	1a d8       	st.w	--sp,r8
800072c8:	fa c9 ff a4 	sub	r9,sp,-92
800072cc:	fa c8 f9 30 	sub	r8,sp,-1744
800072d0:	40 8c       	lddsp	r12,sp[0x20]
800072d2:	06 9a       	mov	r10,r3
800072d4:	0e 9b       	mov	r11,r7
800072d6:	f0 1f 00 f1 	mcall	80007698 <_vfprintf_r+0x948>
800072da:	2f dd       	sub	sp,-12
800072dc:	78 19       	ld.w	r9,r12[0x4]
800072de:	c2 78       	rjmp	8000732c <_vfprintf_r+0x5dc>
800072e0:	2f f0       	sub	r0,-1
800072e2:	1c 39       	cp.w	r9,lr
800072e4:	c0 a4       	brge	800072f8 <_vfprintf_r+0x5a8>
800072e6:	fa ca f9 34 	sub	r10,sp,-1740
800072ea:	f4 07 00 38 	add	r8,r10,r7<<0x3
800072ee:	f0 f9 fd 8c 	ld.w	r9,r8[-628]
800072f2:	f0 fc fd 88 	ld.w	r12,r8[-632]
800072f6:	c1 c8       	rjmp	8000732e <_vfprintf_r+0x5de>
800072f8:	41 4c       	lddsp	r12,sp[0x50]
800072fa:	59 fe       	cp.w	lr,31
800072fc:	e0 89 00 14 	brgt	80007324 <_vfprintf_r+0x5d4>
80007300:	f8 c8 ff f8 	sub	r8,r12,-8
80007304:	51 48       	stdsp	sp[0x50],r8
80007306:	78 19       	ld.w	r9,r12[0x4]
80007308:	fa cb f9 34 	sub	r11,sp,-1740
8000730c:	78 0c       	ld.w	r12,r12[0x0]
8000730e:	f6 0e 00 38 	add	r8,r11,lr<<0x3
80007312:	f1 49 fd 8c 	st.w	r8[-628],r9
80007316:	f1 4c fd 88 	st.w	r8[-632],r12
8000731a:	fc c8 ff ff 	sub	r8,lr,-1
8000731e:	fb 48 06 c4 	st.w	sp[1732],r8
80007322:	c0 68       	rjmp	8000732e <_vfprintf_r+0x5de>
80007324:	f8 c8 ff f8 	sub	r8,r12,-8
80007328:	78 19       	ld.w	r9,r12[0x4]
8000732a:	51 48       	stdsp	sp[0x50],r8
8000732c:	78 0c       	ld.w	r12,r12[0x0]
8000732e:	12 9a       	mov	r10,r9
80007330:	12 94       	mov	r4,r9
80007332:	18 95       	mov	r5,r12
80007334:	c9 d8       	rjmp	8000746e <_vfprintf_r+0x71e>
80007336:	40 98       	lddsp	r8,sp[0x24]
80007338:	ed b8 00 04 	bld	r8,0x4
8000733c:	c1 01       	brne	8000735c <_vfprintf_r+0x60c>
8000733e:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007342:	58 02       	cp.w	r2,0
80007344:	c0 80       	breq	80007354 <_vfprintf_r+0x604>
80007346:	1c 37       	cp.w	r7,lr
80007348:	c5 a4       	brge	800073fc <_vfprintf_r+0x6ac>
8000734a:	fa ca f9 34 	sub	r10,sp,-1740
8000734e:	f4 07 00 38 	add	r8,r10,r7<<0x3
80007352:	c7 18       	rjmp	80007434 <_vfprintf_r+0x6e4>
80007354:	2f f0       	sub	r0,-1
80007356:	1c 39       	cp.w	r9,lr
80007358:	c7 14       	brge	8000743a <_vfprintf_r+0x6ea>
8000735a:	c4 c8       	rjmp	800073f2 <_vfprintf_r+0x6a2>
8000735c:	40 98       	lddsp	r8,sp[0x24]
8000735e:	ed b8 00 06 	bld	r8,0x6
80007362:	c4 21       	brne	800073e6 <_vfprintf_r+0x696>
80007364:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007368:	58 02       	cp.w	r2,0
8000736a:	c1 d0       	breq	800073a4 <_vfprintf_r+0x654>
8000736c:	1c 37       	cp.w	r7,lr
8000736e:	c0 64       	brge	8000737a <_vfprintf_r+0x62a>
80007370:	fa c9 f9 34 	sub	r9,sp,-1740
80007374:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007378:	c1 d8       	rjmp	800073b2 <_vfprintf_r+0x662>
8000737a:	fa c8 f9 40 	sub	r8,sp,-1728
8000737e:	1a d8       	st.w	--sp,r8
80007380:	fa c8 fa a8 	sub	r8,sp,-1368
80007384:	0e 9b       	mov	r11,r7
80007386:	1a d8       	st.w	--sp,r8
80007388:	fa c8 fb a4 	sub	r8,sp,-1116
8000738c:	06 9a       	mov	r10,r3
8000738e:	1a d8       	st.w	--sp,r8
80007390:	fa c8 f9 30 	sub	r8,sp,-1744
80007394:	fa c9 ff a4 	sub	r9,sp,-92
80007398:	40 8c       	lddsp	r12,sp[0x20]
8000739a:	f0 1f 00 c0 	mcall	80007698 <_vfprintf_r+0x948>
8000739e:	2f dd       	sub	sp,-12
800073a0:	98 1b       	ld.sh	r11,r12[0x2]
800073a2:	c6 38       	rjmp	80007468 <_vfprintf_r+0x718>
800073a4:	2f f0       	sub	r0,-1
800073a6:	1c 39       	cp.w	r9,lr
800073a8:	c0 84       	brge	800073b8 <_vfprintf_r+0x668>
800073aa:	fa cb f9 34 	sub	r11,sp,-1740
800073ae:	f6 07 00 38 	add	r8,r11,r7<<0x3
800073b2:	f1 0b fd 8a 	ld.sh	r11,r8[-630]
800073b6:	c5 98       	rjmp	80007468 <_vfprintf_r+0x718>
800073b8:	41 4c       	lddsp	r12,sp[0x50]
800073ba:	59 fe       	cp.w	lr,31
800073bc:	e0 89 00 13 	brgt	800073e2 <_vfprintf_r+0x692>
800073c0:	f8 c8 ff fc 	sub	r8,r12,-4
800073c4:	51 48       	stdsp	sp[0x50],r8
800073c6:	78 09       	ld.w	r9,r12[0x0]
800073c8:	fa ca f9 34 	sub	r10,sp,-1740
800073cc:	f4 0e 00 38 	add	r8,r10,lr<<0x3
800073d0:	f1 49 fd 88 	st.w	r8[-632],r9
800073d4:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
800073d8:	fc c8 ff ff 	sub	r8,lr,-1
800073dc:	fb 48 06 c4 	st.w	sp[1732],r8
800073e0:	c4 48       	rjmp	80007468 <_vfprintf_r+0x718>
800073e2:	98 1b       	ld.sh	r11,r12[0x2]
800073e4:	c3 f8       	rjmp	80007462 <_vfprintf_r+0x712>
800073e6:	fa fe 06 c4 	ld.w	lr,sp[1732]
800073ea:	58 02       	cp.w	r2,0
800073ec:	c1 d0       	breq	80007426 <_vfprintf_r+0x6d6>
800073ee:	1c 37       	cp.w	r7,lr
800073f0:	c0 64       	brge	800073fc <_vfprintf_r+0x6ac>
800073f2:	fa c9 f9 34 	sub	r9,sp,-1740
800073f6:	f2 07 00 38 	add	r8,r9,r7<<0x3
800073fa:	c1 d8       	rjmp	80007434 <_vfprintf_r+0x6e4>
800073fc:	fa c8 f9 40 	sub	r8,sp,-1728
80007400:	1a d8       	st.w	--sp,r8
80007402:	fa c8 fa a8 	sub	r8,sp,-1368
80007406:	0e 9b       	mov	r11,r7
80007408:	1a d8       	st.w	--sp,r8
8000740a:	fa c8 fb a4 	sub	r8,sp,-1116
8000740e:	06 9a       	mov	r10,r3
80007410:	1a d8       	st.w	--sp,r8
80007412:	fa c8 f9 30 	sub	r8,sp,-1744
80007416:	fa c9 ff a4 	sub	r9,sp,-92
8000741a:	40 8c       	lddsp	r12,sp[0x20]
8000741c:	f0 1f 00 9f 	mcall	80007698 <_vfprintf_r+0x948>
80007420:	2f dd       	sub	sp,-12
80007422:	78 0b       	ld.w	r11,r12[0x0]
80007424:	c2 28       	rjmp	80007468 <_vfprintf_r+0x718>
80007426:	2f f0       	sub	r0,-1
80007428:	1c 39       	cp.w	r9,lr
8000742a:	c0 84       	brge	8000743a <_vfprintf_r+0x6ea>
8000742c:	fa cb f9 34 	sub	r11,sp,-1740
80007430:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007434:	f0 fb fd 88 	ld.w	r11,r8[-632]
80007438:	c1 88       	rjmp	80007468 <_vfprintf_r+0x718>
8000743a:	41 4c       	lddsp	r12,sp[0x50]
8000743c:	59 fe       	cp.w	lr,31
8000743e:	e0 89 00 11 	brgt	80007460 <_vfprintf_r+0x710>
80007442:	f8 c8 ff fc 	sub	r8,r12,-4
80007446:	51 48       	stdsp	sp[0x50],r8
80007448:	fa ca f9 34 	sub	r10,sp,-1740
8000744c:	78 0b       	ld.w	r11,r12[0x0]
8000744e:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80007452:	f1 4b fd 88 	st.w	r8[-632],r11
80007456:	fc c8 ff ff 	sub	r8,lr,-1
8000745a:	fb 48 06 c4 	st.w	sp[1732],r8
8000745e:	c0 58       	rjmp	80007468 <_vfprintf_r+0x718>
80007460:	78 0b       	ld.w	r11,r12[0x0]
80007462:	f8 c8 ff fc 	sub	r8,r12,-4
80007466:	51 48       	stdsp	sp[0x50],r8
80007468:	16 94       	mov	r4,r11
8000746a:	f6 05 14 1f 	asr	r5,r11,0x1f
8000746e:	58 04       	cp.w	r4,0
80007470:	5c 25       	cpc	r5
80007472:	c0 a4       	brge	80007486 <_vfprintf_r+0x736>
80007474:	30 08       	mov	r8,0
80007476:	30 09       	mov	r9,0
80007478:	f0 04 01 04 	sub	r4,r8,r4
8000747c:	f2 05 01 45 	sbc	r5,r9,r5
80007480:	32 d8       	mov	r8,45
80007482:	fb 68 06 cb 	st.b	sp[1739],r8
80007486:	30 1e       	mov	lr,1
80007488:	e0 8f 06 a2 	bral	800081cc <_vfprintf_r+0x147c>
8000748c:	00 99       	mov	r9,r0
8000748e:	40 98       	lddsp	r8,sp[0x24]
80007490:	ed b8 00 03 	bld	r8,0x3
80007494:	c3 b1       	brne	8000750a <_vfprintf_r+0x7ba>
80007496:	fa fe 06 c4 	ld.w	lr,sp[1732]
8000749a:	58 02       	cp.w	r2,0
8000749c:	c1 90       	breq	800074ce <_vfprintf_r+0x77e>
8000749e:	1c 37       	cp.w	r7,lr
800074a0:	c1 a5       	brlt	800074d4 <_vfprintf_r+0x784>
800074a2:	fa c8 f9 40 	sub	r8,sp,-1728
800074a6:	1a d8       	st.w	--sp,r8
800074a8:	fa c8 fa a8 	sub	r8,sp,-1368
800074ac:	06 9a       	mov	r10,r3
800074ae:	1a d8       	st.w	--sp,r8
800074b0:	fa c8 fb a4 	sub	r8,sp,-1116
800074b4:	0e 9b       	mov	r11,r7
800074b6:	1a d8       	st.w	--sp,r8
800074b8:	fa c8 f9 30 	sub	r8,sp,-1744
800074bc:	fa c9 ff a4 	sub	r9,sp,-92
800074c0:	40 8c       	lddsp	r12,sp[0x20]
800074c2:	f0 1f 00 76 	mcall	80007698 <_vfprintf_r+0x948>
800074c6:	2f dd       	sub	sp,-12
800074c8:	78 1a       	ld.w	r10,r12[0x4]
800074ca:	50 0a       	stdsp	sp[0x0],r10
800074cc:	c6 68       	rjmp	80007598 <_vfprintf_r+0x848>
800074ce:	2f f0       	sub	r0,-1
800074d0:	1c 39       	cp.w	r9,lr
800074d2:	c0 94       	brge	800074e4 <_vfprintf_r+0x794>
800074d4:	fa c9 f9 34 	sub	r9,sp,-1740
800074d8:	f2 07 00 38 	add	r8,r9,r7<<0x3
800074dc:	f0 fb fd 8c 	ld.w	r11,r8[-628]
800074e0:	50 0b       	stdsp	sp[0x0],r11
800074e2:	c3 a8       	rjmp	80007556 <_vfprintf_r+0x806>
800074e4:	41 4c       	lddsp	r12,sp[0x50]
800074e6:	59 fe       	cp.w	lr,31
800074e8:	e0 89 00 0e 	brgt	80007504 <_vfprintf_r+0x7b4>
800074ec:	78 1a       	ld.w	r10,r12[0x4]
800074ee:	f8 c8 ff f8 	sub	r8,r12,-8
800074f2:	50 0a       	stdsp	sp[0x0],r10
800074f4:	78 0c       	ld.w	r12,r12[0x0]
800074f6:	fa c9 f9 34 	sub	r9,sp,-1740
800074fa:	51 48       	stdsp	sp[0x50],r8
800074fc:	50 1c       	stdsp	sp[0x4],r12
800074fe:	f2 0e 00 3a 	add	r10,r9,lr<<0x3
80007502:	c3 d8       	rjmp	8000757c <_vfprintf_r+0x82c>
80007504:	78 18       	ld.w	r8,r12[0x4]
80007506:	50 08       	stdsp	sp[0x0],r8
80007508:	c4 58       	rjmp	80007592 <_vfprintf_r+0x842>
8000750a:	fa fe 06 c4 	ld.w	lr,sp[1732]
8000750e:	58 02       	cp.w	r2,0
80007510:	c1 90       	breq	80007542 <_vfprintf_r+0x7f2>
80007512:	1c 37       	cp.w	r7,lr
80007514:	c1 a5       	brlt	80007548 <_vfprintf_r+0x7f8>
80007516:	fa c8 f9 40 	sub	r8,sp,-1728
8000751a:	1a d8       	st.w	--sp,r8
8000751c:	fa c8 fa a8 	sub	r8,sp,-1368
80007520:	1a d8       	st.w	--sp,r8
80007522:	fa c8 fb a4 	sub	r8,sp,-1116
80007526:	1a d8       	st.w	--sp,r8
80007528:	fa c9 ff a4 	sub	r9,sp,-92
8000752c:	fa c8 f9 30 	sub	r8,sp,-1744
80007530:	40 8c       	lddsp	r12,sp[0x20]
80007532:	06 9a       	mov	r10,r3
80007534:	0e 9b       	mov	r11,r7
80007536:	f0 1f 00 59 	mcall	80007698 <_vfprintf_r+0x948>
8000753a:	2f dd       	sub	sp,-12
8000753c:	78 19       	ld.w	r9,r12[0x4]
8000753e:	50 09       	stdsp	sp[0x0],r9
80007540:	c2 c8       	rjmp	80007598 <_vfprintf_r+0x848>
80007542:	2f f0       	sub	r0,-1
80007544:	1c 39       	cp.w	r9,lr
80007546:	c0 c4       	brge	8000755e <_vfprintf_r+0x80e>
80007548:	fa cb f9 34 	sub	r11,sp,-1740
8000754c:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007550:	f0 fa fd 8c 	ld.w	r10,r8[-628]
80007554:	50 0a       	stdsp	sp[0x0],r10
80007556:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000755a:	50 18       	stdsp	sp[0x4],r8
8000755c:	c2 08       	rjmp	8000759c <_vfprintf_r+0x84c>
8000755e:	41 4c       	lddsp	r12,sp[0x50]
80007560:	59 fe       	cp.w	lr,31
80007562:	e0 89 00 16 	brgt	8000758e <_vfprintf_r+0x83e>
80007566:	f8 c8 ff f8 	sub	r8,r12,-8
8000756a:	78 19       	ld.w	r9,r12[0x4]
8000756c:	51 48       	stdsp	sp[0x50],r8
8000756e:	78 0c       	ld.w	r12,r12[0x0]
80007570:	fa c8 f9 34 	sub	r8,sp,-1740
80007574:	50 09       	stdsp	sp[0x0],r9
80007576:	50 1c       	stdsp	sp[0x4],r12
80007578:	f0 0e 00 3a 	add	r10,r8,lr<<0x3
8000757c:	40 08       	lddsp	r8,sp[0x0]
8000757e:	18 99       	mov	r9,r12
80007580:	f4 e9 fd 88 	st.d	r10[-632],r8
80007584:	fc c8 ff ff 	sub	r8,lr,-1
80007588:	fb 48 06 c4 	st.w	sp[1732],r8
8000758c:	c0 88       	rjmp	8000759c <_vfprintf_r+0x84c>
8000758e:	78 1b       	ld.w	r11,r12[0x4]
80007590:	50 0b       	stdsp	sp[0x0],r11
80007592:	f8 c8 ff f8 	sub	r8,r12,-8
80007596:	51 48       	stdsp	sp[0x50],r8
80007598:	78 0c       	ld.w	r12,r12[0x0]
8000759a:	50 1c       	stdsp	sp[0x4],r12
8000759c:	40 19       	lddsp	r9,sp[0x4]
8000759e:	40 08       	lddsp	r8,sp[0x0]
800075a0:	12 9b       	mov	r11,r9
800075a2:	10 9a       	mov	r10,r8
800075a4:	f0 1f 00 3e 	mcall	8000769c <_vfprintf_r+0x94c>
800075a8:	18 96       	mov	r6,r12
800075aa:	c1 90       	breq	800075dc <_vfprintf_r+0x88c>
800075ac:	30 08       	mov	r8,0
800075ae:	30 09       	mov	r9,0
800075b0:	40 1b       	lddsp	r11,sp[0x4]
800075b2:	40 0a       	lddsp	r10,sp[0x0]
800075b4:	f0 1f 00 3b 	mcall	800076a0 <_vfprintf_r+0x950>
800075b8:	c0 40       	breq	800075c0 <_vfprintf_r+0x870>
800075ba:	32 d8       	mov	r8,45
800075bc:	fb 68 06 cb 	st.b	sp[1739],r8
800075c0:	40 9a       	lddsp	r10,sp[0x24]
800075c2:	4b 99       	lddpc	r9,800076a4 <_vfprintf_r+0x954>
800075c4:	a7 da       	cbr	r10,0x7
800075c6:	4b 98       	lddpc	r8,800076a8 <_vfprintf_r+0x958>
800075c8:	40 8b       	lddsp	r11,sp[0x20]
800075ca:	50 9a       	stdsp	sp[0x24],r10
800075cc:	e0 4b 00 48 	cp.w	r11,72
800075d0:	f0 03 17 50 	movlt	r3,r8
800075d4:	f2 03 17 40 	movge	r3,r9
800075d8:	30 02       	mov	r2,0
800075da:	c1 58       	rjmp	80007604 <_vfprintf_r+0x8b4>
800075dc:	40 19       	lddsp	r9,sp[0x4]
800075de:	40 08       	lddsp	r8,sp[0x0]
800075e0:	12 9b       	mov	r11,r9
800075e2:	10 9a       	mov	r10,r8
800075e4:	f0 1f 00 32 	mcall	800076ac <_vfprintf_r+0x95c>
800075e8:	c1 10       	breq	8000760a <_vfprintf_r+0x8ba>
800075ea:	40 9a       	lddsp	r10,sp[0x24]
800075ec:	4b 19       	lddpc	r9,800076b0 <_vfprintf_r+0x960>
800075ee:	a7 da       	cbr	r10,0x7
800075f0:	4b 18       	lddpc	r8,800076b4 <_vfprintf_r+0x964>
800075f2:	40 8b       	lddsp	r11,sp[0x20]
800075f4:	50 9a       	stdsp	sp[0x24],r10
800075f6:	0c 92       	mov	r2,r6
800075f8:	e0 4b 00 48 	cp.w	r11,72
800075fc:	f0 03 17 50 	movlt	r3,r8
80007600:	f2 03 17 40 	movge	r3,r9
80007604:	30 37       	mov	r7,3
80007606:	e0 8f 06 73 	bral	800082ec <_vfprintf_r+0x159c>
8000760a:	40 ca       	lddsp	r10,sp[0x30]
8000760c:	5b fa       	cp.w	r10,-1
8000760e:	c0 31       	brne	80007614 <_vfprintf_r+0x8c4>
80007610:	30 69       	mov	r9,6
80007612:	c1 28       	rjmp	80007636 <_vfprintf_r+0x8e6>
80007614:	40 88       	lddsp	r8,sp[0x20]
80007616:	40 8b       	lddsp	r11,sp[0x20]
80007618:	e0 48 00 67 	cp.w	r8,103
8000761c:	5f 08       	sreq	r8
8000761e:	e0 4b 00 47 	cp.w	r11,71
80007622:	5f 09       	sreq	r9
80007624:	30 0a       	mov	r10,0
80007626:	12 48       	or	r8,r9
80007628:	f4 08 18 00 	cp.b	r8,r10
8000762c:	c0 60       	breq	80007638 <_vfprintf_r+0x8e8>
8000762e:	40 c9       	lddsp	r9,sp[0x30]
80007630:	58 09       	cp.w	r9,0
80007632:	f9 b9 00 01 	moveq	r9,1
80007636:	50 c9       	stdsp	sp[0x30],r9
80007638:	40 9b       	lddsp	r11,sp[0x24]
8000763a:	a9 ab       	sbr	r11,0x8
8000763c:	50 9b       	stdsp	sp[0x24],r11
8000763e:	40 19       	lddsp	r9,sp[0x4]
80007640:	58 09       	cp.w	r9,0
80007642:	c0 85       	brlt	80007652 <_vfprintf_r+0x902>
80007644:	40 1a       	lddsp	r10,sp[0x4]
80007646:	40 09       	lddsp	r9,sp[0x0]
80007648:	30 08       	mov	r8,0
8000764a:	50 3a       	stdsp	sp[0xc],r10
8000764c:	50 29       	stdsp	sp[0x8],r9
8000764e:	50 e8       	stdsp	sp[0x38],r8
80007650:	c0 98       	rjmp	80007662 <_vfprintf_r+0x912>
80007652:	40 1b       	lddsp	r11,sp[0x4]
80007654:	40 0a       	lddsp	r10,sp[0x0]
80007656:	ee 1b 80 00 	eorh	r11,0x8000
8000765a:	32 d9       	mov	r9,45
8000765c:	50 3b       	stdsp	sp[0xc],r11
8000765e:	50 2a       	stdsp	sp[0x8],r10
80007660:	50 e9       	stdsp	sp[0x38],r9
80007662:	40 88       	lddsp	r8,sp[0x20]
80007664:	e0 48 00 66 	cp.w	r8,102
80007668:	5f 09       	sreq	r9
8000766a:	e0 48 00 46 	cp.w	r8,70
8000766e:	5f 08       	sreq	r8
80007670:	f3 e8 10 07 	or	r7,r9,r8
80007674:	c0 40       	breq	8000767c <_vfprintf_r+0x92c>
80007676:	40 c2       	lddsp	r2,sp[0x30]
80007678:	30 39       	mov	r9,3
8000767a:	c2 38       	rjmp	800076c0 <_vfprintf_r+0x970>
8000767c:	40 8b       	lddsp	r11,sp[0x20]
8000767e:	e0 4b 00 65 	cp.w	r11,101
80007682:	5f 08       	sreq	r8
80007684:	e0 4b 00 45 	cp.w	r11,69
80007688:	5f 09       	sreq	r9
8000768a:	12 48       	or	r8,r9
8000768c:	ee 08 18 00 	cp.b	r8,r7
80007690:	c1 41       	brne	800076b8 <_vfprintf_r+0x968>
80007692:	40 c2       	lddsp	r2,sp[0x30]
80007694:	c1 58       	rjmp	800076be <_vfprintf_r+0x96e>
80007696:	00 00       	add	r0,r0
80007698:	80 00       	ld.sh	r0,r0[0x0]
8000769a:	6a 14       	ld.w	r4,r5[0x4]
8000769c:	80 00       	ld.sh	r0,r0[0x0]
8000769e:	ac 1c       	st.h	r6[0x2],r12
800076a0:	80 00       	ld.sh	r0,r0[0x0]
800076a2:	af b4       	sbr	r4,0xf
800076a4:	80 00       	ld.sh	r0,r0[0x0]
800076a6:	bb f8       	*unknown*
800076a8:	80 00       	ld.sh	r0,r0[0x0]
800076aa:	bb fc       	*unknown*
800076ac:	80 00       	ld.sh	r0,r0[0x0]
800076ae:	ac 3e       	st.h	r6[0x6],lr
800076b0:	80 00       	ld.sh	r0,r0[0x0]
800076b2:	bc 00       	st.h	lr[0x0],r0
800076b4:	80 00       	ld.sh	r0,r0[0x0]
800076b6:	bc 04       	st.h	lr[0x0],r4
800076b8:	40 ca       	lddsp	r10,sp[0x30]
800076ba:	f4 c2 ff ff 	sub	r2,r10,-1
800076be:	30 29       	mov	r9,2
800076c0:	fa c8 f9 4c 	sub	r8,sp,-1716
800076c4:	1a d8       	st.w	--sp,r8
800076c6:	fa c8 f9 44 	sub	r8,sp,-1724
800076ca:	1a d8       	st.w	--sp,r8
800076cc:	fa c8 f9 3c 	sub	r8,sp,-1732
800076d0:	1a d8       	st.w	--sp,r8
800076d2:	04 98       	mov	r8,r2
800076d4:	40 6b       	lddsp	r11,sp[0x18]
800076d6:	40 8c       	lddsp	r12,sp[0x20]
800076d8:	40 5a       	lddsp	r10,sp[0x14]
800076da:	f0 1f 01 d9 	mcall	80007e3c <_vfprintf_r+0x10ec>
800076de:	30 0b       	mov	r11,0
800076e0:	2f dd       	sub	sp,-12
800076e2:	18 93       	mov	r3,r12
800076e4:	40 89       	lddsp	r9,sp[0x20]
800076e6:	e0 49 00 67 	cp.w	r9,103
800076ea:	5f 18       	srne	r8
800076ec:	e0 49 00 47 	cp.w	r9,71
800076f0:	5f 19       	srne	r9
800076f2:	12 68       	and	r8,r9
800076f4:	f6 08 18 00 	cp.b	r8,r11
800076f8:	c0 51       	brne	80007702 <_vfprintf_r+0x9b2>
800076fa:	40 9a       	lddsp	r10,sp[0x24]
800076fc:	ed ba 00 00 	bld	r10,0x0
80007700:	c2 c1       	brne	80007758 <_vfprintf_r+0xa08>
80007702:	e6 02 00 06 	add	r6,r3,r2
80007706:	58 07       	cp.w	r7,0
80007708:	c1 30       	breq	8000772e <_vfprintf_r+0x9de>
8000770a:	07 89       	ld.ub	r9,r3[0x0]
8000770c:	33 08       	mov	r8,48
8000770e:	f0 09 18 00 	cp.b	r9,r8
80007712:	c0 b1       	brne	80007728 <_vfprintf_r+0x9d8>
80007714:	30 08       	mov	r8,0
80007716:	30 09       	mov	r9,0
80007718:	40 3b       	lddsp	r11,sp[0xc]
8000771a:	40 2a       	lddsp	r10,sp[0x8]
8000771c:	f0 1f 01 c9 	mcall	80007e40 <_vfprintf_r+0x10f0>
80007720:	fb b2 00 01 	rsubeq	r2,1
80007724:	fb f2 0b af 	st.weq	sp[0x6bc],r2
80007728:	fa f8 06 bc 	ld.w	r8,sp[1724]
8000772c:	10 06       	add	r6,r8
8000772e:	40 39       	lddsp	r9,sp[0xc]
80007730:	40 28       	lddsp	r8,sp[0x8]
80007732:	12 9b       	mov	r11,r9
80007734:	10 9a       	mov	r10,r8
80007736:	30 09       	mov	r9,0
80007738:	30 08       	mov	r8,0
8000773a:	f0 1f 01 c2 	mcall	80007e40 <_vfprintf_r+0x10f0>
8000773e:	c0 80       	breq	8000774e <_vfprintf_r+0x9fe>
80007740:	fb 46 06 b4 	st.w	sp[1716],r6
80007744:	c0 58       	rjmp	8000774e <_vfprintf_r+0x9fe>
80007746:	10 c9       	st.b	r8++,r9
80007748:	fb 48 06 b4 	st.w	sp[1716],r8
8000774c:	c0 28       	rjmp	80007750 <_vfprintf_r+0xa00>
8000774e:	33 09       	mov	r9,48
80007750:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007754:	0c 38       	cp.w	r8,r6
80007756:	cf 83       	brcs	80007746 <_vfprintf_r+0x9f6>
80007758:	40 89       	lddsp	r9,sp[0x20]
8000775a:	e0 49 00 67 	cp.w	r9,103
8000775e:	5f 08       	sreq	r8
80007760:	e0 49 00 47 	cp.w	r9,71
80007764:	5f 09       	sreq	r9
80007766:	12 48       	or	r8,r9
80007768:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000776c:	06 19       	sub	r9,r3
8000776e:	51 09       	stdsp	sp[0x40],r9
80007770:	30 0b       	mov	r11,0
80007772:	f6 08 18 00 	cp.b	r8,r11
80007776:	c0 d0       	breq	80007790 <_vfprintf_r+0xa40>
80007778:	fa f8 06 bc 	ld.w	r8,sp[1724]
8000777c:	5b d8       	cp.w	r8,-3
8000777e:	c0 55       	brlt	80007788 <_vfprintf_r+0xa38>
80007780:	40 ca       	lddsp	r10,sp[0x30]
80007782:	14 38       	cp.w	r8,r10
80007784:	e0 8a 00 72 	brle	80007868 <_vfprintf_r+0xb18>
80007788:	40 89       	lddsp	r9,sp[0x20]
8000778a:	20 29       	sub	r9,2
8000778c:	50 89       	stdsp	sp[0x20],r9
8000778e:	c0 68       	rjmp	8000779a <_vfprintf_r+0xa4a>
80007790:	40 88       	lddsp	r8,sp[0x20]
80007792:	e0 48 00 65 	cp.w	r8,101
80007796:	e0 89 00 45 	brgt	80007820 <_vfprintf_r+0xad0>
8000779a:	fa f8 06 bc 	ld.w	r8,sp[1724]
8000779e:	40 8b       	lddsp	r11,sp[0x20]
800077a0:	f0 c9 00 01 	sub	r9,r8,1
800077a4:	fb 6b 06 ac 	st.b	sp[1708],r11
800077a8:	fb 49 06 bc 	st.w	sp[1724],r9
800077ac:	c0 47       	brpl	800077b4 <_vfprintf_r+0xa64>
800077ae:	5c 39       	neg	r9
800077b0:	32 d8       	mov	r8,45
800077b2:	c0 28       	rjmp	800077b6 <_vfprintf_r+0xa66>
800077b4:	32 b8       	mov	r8,43
800077b6:	fb 68 06 ad 	st.b	sp[1709],r8
800077ba:	58 99       	cp.w	r9,9
800077bc:	e0 8a 00 1a 	brle	800077f0 <_vfprintf_r+0xaa0>
800077c0:	fa ce f9 55 	sub	lr,sp,-1707
800077c4:	30 ac       	mov	r12,10
800077c6:	1c 9b       	mov	r11,lr
800077c8:	f2 0c 0c 08 	divs	r8,r9,r12
800077cc:	f2 ca ff d0 	sub	r10,r9,-48
800077d0:	16 fa       	st.b	--r11,r10
800077d2:	10 99       	mov	r9,r8
800077d4:	58 98       	cp.w	r8,9
800077d6:	fe 99 ff f9 	brgt	800077c8 <_vfprintf_r+0xa78>
800077da:	16 9a       	mov	r10,r11
800077dc:	2d 08       	sub	r8,-48
800077de:	fa c9 f9 52 	sub	r9,sp,-1710
800077e2:	14 f8       	st.b	--r10,r8
800077e4:	c0 38       	rjmp	800077ea <_vfprintf_r+0xa9a>
800077e6:	15 38       	ld.ub	r8,r10++
800077e8:	12 c8       	st.b	r9++,r8
800077ea:	1c 3a       	cp.w	r10,lr
800077ec:	cf d3       	brcs	800077e6 <_vfprintf_r+0xa96>
800077ee:	c0 a8       	rjmp	80007802 <_vfprintf_r+0xab2>
800077f0:	f2 c8 ff d0 	sub	r8,r9,-48
800077f4:	fa c9 f9 50 	sub	r9,sp,-1712
800077f8:	fb 68 06 af 	st.b	sp[1711],r8
800077fc:	33 08       	mov	r8,48
800077fe:	fb 68 06 ae 	st.b	sp[1710],r8
80007802:	fa c8 f9 54 	sub	r8,sp,-1708
80007806:	f2 08 01 08 	sub	r8,r9,r8
8000780a:	50 f8       	stdsp	sp[0x3c],r8
8000780c:	41 0a       	lddsp	r10,sp[0x40]
8000780e:	f0 0a 00 07 	add	r7,r8,r10
80007812:	58 1a       	cp.w	r10,1
80007814:	e0 89 00 36 	brgt	80007880 <_vfprintf_r+0xb30>
80007818:	40 99       	lddsp	r9,sp[0x24]
8000781a:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000781e:	c2 f8       	rjmp	8000787c <_vfprintf_r+0xb2c>
80007820:	40 88       	lddsp	r8,sp[0x20]
80007822:	e0 48 00 66 	cp.w	r8,102
80007826:	c2 31       	brne	8000786c <_vfprintf_r+0xb1c>
80007828:	fa f7 06 bc 	ld.w	r7,sp[1724]
8000782c:	58 07       	cp.w	r7,0
8000782e:	e0 8a 00 11 	brle	80007850 <_vfprintf_r+0xb00>
80007832:	40 cb       	lddsp	r11,sp[0x30]
80007834:	58 0b       	cp.w	r11,0
80007836:	c0 51       	brne	80007840 <_vfprintf_r+0xaf0>
80007838:	40 9a       	lddsp	r10,sp[0x24]
8000783a:	ed ba 00 00 	bld	r10,0x0
8000783e:	c2 b1       	brne	80007894 <_vfprintf_r+0xb44>
80007840:	ee c8 ff ff 	sub	r8,r7,-1
80007844:	40 c9       	lddsp	r9,sp[0x30]
80007846:	f0 09 00 07 	add	r7,r8,r9
8000784a:	36 68       	mov	r8,102
8000784c:	50 88       	stdsp	sp[0x20],r8
8000784e:	c2 38       	rjmp	80007894 <_vfprintf_r+0xb44>
80007850:	40 cb       	lddsp	r11,sp[0x30]
80007852:	58 0b       	cp.w	r11,0
80007854:	c0 71       	brne	80007862 <_vfprintf_r+0xb12>
80007856:	40 9a       	lddsp	r10,sp[0x24]
80007858:	ed ba 00 00 	bld	r10,0x0
8000785c:	c0 30       	breq	80007862 <_vfprintf_r+0xb12>
8000785e:	30 17       	mov	r7,1
80007860:	c1 a8       	rjmp	80007894 <_vfprintf_r+0xb44>
80007862:	40 c7       	lddsp	r7,sp[0x30]
80007864:	2f e7       	sub	r7,-2
80007866:	c1 78       	rjmp	80007894 <_vfprintf_r+0xb44>
80007868:	36 79       	mov	r9,103
8000786a:	50 89       	stdsp	sp[0x20],r9
8000786c:	fa f7 06 bc 	ld.w	r7,sp[1724]
80007870:	41 08       	lddsp	r8,sp[0x40]
80007872:	10 37       	cp.w	r7,r8
80007874:	c0 85       	brlt	80007884 <_vfprintf_r+0xb34>
80007876:	40 9b       	lddsp	r11,sp[0x24]
80007878:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
8000787c:	58 08       	cp.w	r8,0
8000787e:	c0 b0       	breq	80007894 <_vfprintf_r+0xb44>
80007880:	2f f7       	sub	r7,-1
80007882:	c0 98       	rjmp	80007894 <_vfprintf_r+0xb44>
80007884:	ee 08 11 02 	rsub	r8,r7,2
80007888:	41 0a       	lddsp	r10,sp[0x40]
8000788a:	58 07       	cp.w	r7,0
8000788c:	f9 b8 09 01 	movgt	r8,1
80007890:	f0 0a 00 07 	add	r7,r8,r10
80007894:	40 e9       	lddsp	r9,sp[0x38]
80007896:	58 09       	cp.w	r9,0
80007898:	e0 80 05 29 	breq	800082ea <_vfprintf_r+0x159a>
8000789c:	32 d8       	mov	r8,45
8000789e:	fb 68 06 cb 	st.b	sp[1739],r8
800078a2:	e0 8f 05 24 	bral	800082ea <_vfprintf_r+0x159a>
800078a6:	00 99       	mov	r9,r0
800078a8:	40 98       	lddsp	r8,sp[0x24]
800078aa:	ed b8 00 05 	bld	r8,0x5
800078ae:	c4 61       	brne	8000793a <_vfprintf_r+0xbea>
800078b0:	fa fe 06 c4 	ld.w	lr,sp[1732]
800078b4:	58 02       	cp.w	r2,0
800078b6:	c1 d0       	breq	800078f0 <_vfprintf_r+0xba0>
800078b8:	1c 37       	cp.w	r7,lr
800078ba:	c0 64       	brge	800078c6 <_vfprintf_r+0xb76>
800078bc:	fa cb f9 34 	sub	r11,sp,-1740
800078c0:	f6 07 00 38 	add	r8,r11,r7<<0x3
800078c4:	c1 d8       	rjmp	800078fe <_vfprintf_r+0xbae>
800078c6:	fa c8 f9 40 	sub	r8,sp,-1728
800078ca:	1a d8       	st.w	--sp,r8
800078cc:	fa c8 fa a8 	sub	r8,sp,-1368
800078d0:	0e 9b       	mov	r11,r7
800078d2:	1a d8       	st.w	--sp,r8
800078d4:	fa c8 fb a4 	sub	r8,sp,-1116
800078d8:	06 9a       	mov	r10,r3
800078da:	1a d8       	st.w	--sp,r8
800078dc:	fa c8 f9 30 	sub	r8,sp,-1744
800078e0:	fa c9 ff a4 	sub	r9,sp,-92
800078e4:	40 8c       	lddsp	r12,sp[0x20]
800078e6:	f0 1f 01 58 	mcall	80007e44 <_vfprintf_r+0x10f4>
800078ea:	2f dd       	sub	sp,-12
800078ec:	78 0b       	ld.w	r11,r12[0x0]
800078ee:	c2 28       	rjmp	80007932 <_vfprintf_r+0xbe2>
800078f0:	2f f0       	sub	r0,-1
800078f2:	1c 39       	cp.w	r9,lr
800078f4:	c0 84       	brge	80007904 <_vfprintf_r+0xbb4>
800078f6:	fa ca f9 34 	sub	r10,sp,-1740
800078fa:	f4 07 00 38 	add	r8,r10,r7<<0x3
800078fe:	f0 fb fd 88 	ld.w	r11,r8[-632]
80007902:	c1 88       	rjmp	80007932 <_vfprintf_r+0xbe2>
80007904:	41 4c       	lddsp	r12,sp[0x50]
80007906:	59 fe       	cp.w	lr,31
80007908:	e0 89 00 11 	brgt	8000792a <_vfprintf_r+0xbda>
8000790c:	f8 c8 ff fc 	sub	r8,r12,-4
80007910:	51 48       	stdsp	sp[0x50],r8
80007912:	78 0b       	ld.w	r11,r12[0x0]
80007914:	fa c9 f9 34 	sub	r9,sp,-1740
80007918:	f2 0e 00 38 	add	r8,r9,lr<<0x3
8000791c:	f1 4b fd 88 	st.w	r8[-632],r11
80007920:	fc c8 ff ff 	sub	r8,lr,-1
80007924:	fb 48 06 c4 	st.w	sp[1732],r8
80007928:	c0 58       	rjmp	80007932 <_vfprintf_r+0xbe2>
8000792a:	f8 c8 ff fc 	sub	r8,r12,-4
8000792e:	78 0b       	ld.w	r11,r12[0x0]
80007930:	51 48       	stdsp	sp[0x50],r8
80007932:	40 a8       	lddsp	r8,sp[0x28]
80007934:	97 18       	st.w	r11[0x4],r8
80007936:	bf 58       	asr	r8,0x1f
80007938:	c9 08       	rjmp	80007a58 <_vfprintf_r+0xd08>
8000793a:	40 98       	lddsp	r8,sp[0x24]
8000793c:	ed b8 00 04 	bld	r8,0x4
80007940:	c4 a0       	breq	800079d4 <_vfprintf_r+0xc84>
80007942:	40 9b       	lddsp	r11,sp[0x24]
80007944:	ed bb 00 06 	bld	r11,0x6
80007948:	c4 61       	brne	800079d4 <_vfprintf_r+0xc84>
8000794a:	fa fe 06 c4 	ld.w	lr,sp[1732]
8000794e:	58 02       	cp.w	r2,0
80007950:	c1 d0       	breq	8000798a <_vfprintf_r+0xc3a>
80007952:	1c 37       	cp.w	r7,lr
80007954:	c0 64       	brge	80007960 <_vfprintf_r+0xc10>
80007956:	fa ca f9 34 	sub	r10,sp,-1740
8000795a:	f4 07 00 38 	add	r8,r10,r7<<0x3
8000795e:	c1 d8       	rjmp	80007998 <_vfprintf_r+0xc48>
80007960:	fa c8 f9 40 	sub	r8,sp,-1728
80007964:	1a d8       	st.w	--sp,r8
80007966:	fa c8 fa a8 	sub	r8,sp,-1368
8000796a:	0e 9b       	mov	r11,r7
8000796c:	1a d8       	st.w	--sp,r8
8000796e:	fa c8 fb a4 	sub	r8,sp,-1116
80007972:	06 9a       	mov	r10,r3
80007974:	1a d8       	st.w	--sp,r8
80007976:	fa c8 f9 30 	sub	r8,sp,-1744
8000797a:	fa c9 ff a4 	sub	r9,sp,-92
8000797e:	40 8c       	lddsp	r12,sp[0x20]
80007980:	f0 1f 01 31 	mcall	80007e44 <_vfprintf_r+0x10f4>
80007984:	2f dd       	sub	sp,-12
80007986:	78 0b       	ld.w	r11,r12[0x0]
80007988:	c2 28       	rjmp	800079cc <_vfprintf_r+0xc7c>
8000798a:	2f f0       	sub	r0,-1
8000798c:	1c 39       	cp.w	r9,lr
8000798e:	c0 84       	brge	8000799e <_vfprintf_r+0xc4e>
80007990:	fa c9 f9 34 	sub	r9,sp,-1740
80007994:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007998:	f0 fb fd 88 	ld.w	r11,r8[-632]
8000799c:	c1 88       	rjmp	800079cc <_vfprintf_r+0xc7c>
8000799e:	41 4c       	lddsp	r12,sp[0x50]
800079a0:	59 fe       	cp.w	lr,31
800079a2:	e0 89 00 11 	brgt	800079c4 <_vfprintf_r+0xc74>
800079a6:	f8 c8 ff fc 	sub	r8,r12,-4
800079aa:	51 48       	stdsp	sp[0x50],r8
800079ac:	78 0b       	ld.w	r11,r12[0x0]
800079ae:	fa ca f9 34 	sub	r10,sp,-1740
800079b2:	f4 0e 00 38 	add	r8,r10,lr<<0x3
800079b6:	f1 4b fd 88 	st.w	r8[-632],r11
800079ba:	fc c8 ff ff 	sub	r8,lr,-1
800079be:	fb 48 06 c4 	st.w	sp[1732],r8
800079c2:	c0 58       	rjmp	800079cc <_vfprintf_r+0xc7c>
800079c4:	f8 c8 ff fc 	sub	r8,r12,-4
800079c8:	78 0b       	ld.w	r11,r12[0x0]
800079ca:	51 48       	stdsp	sp[0x50],r8
800079cc:	40 a9       	lddsp	r9,sp[0x28]
800079ce:	b6 09       	st.h	r11[0x0],r9
800079d0:	fe 9f fa 59 	bral	80006e82 <_vfprintf_r+0x132>
800079d4:	fa fe 06 c4 	ld.w	lr,sp[1732]
800079d8:	58 02       	cp.w	r2,0
800079da:	c1 d0       	breq	80007a14 <_vfprintf_r+0xcc4>
800079dc:	1c 37       	cp.w	r7,lr
800079de:	c0 64       	brge	800079ea <_vfprintf_r+0xc9a>
800079e0:	fa cb f9 34 	sub	r11,sp,-1740
800079e4:	f6 07 00 38 	add	r8,r11,r7<<0x3
800079e8:	c1 d8       	rjmp	80007a22 <_vfprintf_r+0xcd2>
800079ea:	fa c8 f9 40 	sub	r8,sp,-1728
800079ee:	1a d8       	st.w	--sp,r8
800079f0:	fa c8 fa a8 	sub	r8,sp,-1368
800079f4:	0e 9b       	mov	r11,r7
800079f6:	1a d8       	st.w	--sp,r8
800079f8:	fa c8 fb a4 	sub	r8,sp,-1116
800079fc:	06 9a       	mov	r10,r3
800079fe:	1a d8       	st.w	--sp,r8
80007a00:	fa c8 f9 30 	sub	r8,sp,-1744
80007a04:	fa c9 ff a4 	sub	r9,sp,-92
80007a08:	40 8c       	lddsp	r12,sp[0x20]
80007a0a:	f0 1f 01 0f 	mcall	80007e44 <_vfprintf_r+0x10f4>
80007a0e:	2f dd       	sub	sp,-12
80007a10:	78 0b       	ld.w	r11,r12[0x0]
80007a12:	c2 28       	rjmp	80007a56 <_vfprintf_r+0xd06>
80007a14:	2f f0       	sub	r0,-1
80007a16:	1c 39       	cp.w	r9,lr
80007a18:	c0 84       	brge	80007a28 <_vfprintf_r+0xcd8>
80007a1a:	fa ca f9 34 	sub	r10,sp,-1740
80007a1e:	f4 07 00 38 	add	r8,r10,r7<<0x3
80007a22:	f0 fb fd 88 	ld.w	r11,r8[-632]
80007a26:	c1 88       	rjmp	80007a56 <_vfprintf_r+0xd06>
80007a28:	41 4c       	lddsp	r12,sp[0x50]
80007a2a:	59 fe       	cp.w	lr,31
80007a2c:	e0 89 00 11 	brgt	80007a4e <_vfprintf_r+0xcfe>
80007a30:	f8 c8 ff fc 	sub	r8,r12,-4
80007a34:	51 48       	stdsp	sp[0x50],r8
80007a36:	fa c9 f9 34 	sub	r9,sp,-1740
80007a3a:	78 0b       	ld.w	r11,r12[0x0]
80007a3c:	f2 0e 00 38 	add	r8,r9,lr<<0x3
80007a40:	f1 4b fd 88 	st.w	r8[-632],r11
80007a44:	fc c8 ff ff 	sub	r8,lr,-1
80007a48:	fb 48 06 c4 	st.w	sp[1732],r8
80007a4c:	c0 58       	rjmp	80007a56 <_vfprintf_r+0xd06>
80007a4e:	78 0b       	ld.w	r11,r12[0x0]
80007a50:	f8 c8 ff fc 	sub	r8,r12,-4
80007a54:	51 48       	stdsp	sp[0x50],r8
80007a56:	40 a8       	lddsp	r8,sp[0x28]
80007a58:	97 08       	st.w	r11[0x0],r8
80007a5a:	fe 9f fa 14 	bral	80006e82 <_vfprintf_r+0x132>
80007a5e:	40 9b       	lddsp	r11,sp[0x24]
80007a60:	a5 ab       	sbr	r11,0x4
80007a62:	50 9b       	stdsp	sp[0x24],r11
80007a64:	00 99       	mov	r9,r0
80007a66:	40 98       	lddsp	r8,sp[0x24]
80007a68:	ed b8 00 05 	bld	r8,0x5
80007a6c:	c5 01       	brne	80007b0c <_vfprintf_r+0xdbc>
80007a6e:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007a72:	58 02       	cp.w	r2,0
80007a74:	c2 20       	breq	80007ab8 <_vfprintf_r+0xd68>
80007a76:	1c 37       	cp.w	r7,lr
80007a78:	c0 84       	brge	80007a88 <_vfprintf_r+0xd38>
80007a7a:	fa ca f9 34 	sub	r10,sp,-1740
80007a7e:	f4 07 00 38 	add	r8,r10,r7<<0x3
80007a82:	f0 e4 fd 88 	ld.d	r4,r8[-632]
80007a86:	c1 68       	rjmp	80007ab2 <_vfprintf_r+0xd62>
80007a88:	fa c8 f9 40 	sub	r8,sp,-1728
80007a8c:	1a d8       	st.w	--sp,r8
80007a8e:	fa c8 fa a8 	sub	r8,sp,-1368
80007a92:	1a d8       	st.w	--sp,r8
80007a94:	fa c8 fb a4 	sub	r8,sp,-1116
80007a98:	06 9a       	mov	r10,r3
80007a9a:	1a d8       	st.w	--sp,r8
80007a9c:	0e 9b       	mov	r11,r7
80007a9e:	fa c8 f9 30 	sub	r8,sp,-1744
80007aa2:	fa c9 ff a4 	sub	r9,sp,-92
80007aa6:	40 8c       	lddsp	r12,sp[0x20]
80007aa8:	f0 1f 00 e7 	mcall	80007e44 <_vfprintf_r+0x10f4>
80007aac:	2f dd       	sub	sp,-12
80007aae:	f8 e4 00 00 	ld.d	r4,r12[0]
80007ab2:	30 0e       	mov	lr,0
80007ab4:	e0 8f 03 89 	bral	800081c6 <_vfprintf_r+0x1476>
80007ab8:	2f f0       	sub	r0,-1
80007aba:	1c 39       	cp.w	r9,lr
80007abc:	c0 a4       	brge	80007ad0 <_vfprintf_r+0xd80>
80007abe:	fa c9 f9 34 	sub	r9,sp,-1740
80007ac2:	04 9e       	mov	lr,r2
80007ac4:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007ac8:	f0 e4 fd 88 	ld.d	r4,r8[-632]
80007acc:	e0 8f 03 7d 	bral	800081c6 <_vfprintf_r+0x1476>
80007ad0:	41 4c       	lddsp	r12,sp[0x50]
80007ad2:	59 fe       	cp.w	lr,31
80007ad4:	e0 89 00 14 	brgt	80007afc <_vfprintf_r+0xdac>
80007ad8:	f8 c8 ff f8 	sub	r8,r12,-8
80007adc:	51 48       	stdsp	sp[0x50],r8
80007ade:	f8 e4 00 00 	ld.d	r4,r12[0]
80007ae2:	fa cb f9 34 	sub	r11,sp,-1740
80007ae6:	f6 0e 00 38 	add	r8,r11,lr<<0x3
80007aea:	f0 e5 fd 88 	st.d	r8[-632],r4
80007aee:	fc c8 ff ff 	sub	r8,lr,-1
80007af2:	04 9e       	mov	lr,r2
80007af4:	fb 48 06 c4 	st.w	sp[1732],r8
80007af8:	e0 8f 03 67 	bral	800081c6 <_vfprintf_r+0x1476>
80007afc:	f8 c8 ff f8 	sub	r8,r12,-8
80007b00:	f8 e4 00 00 	ld.d	r4,r12[0]
80007b04:	04 9e       	mov	lr,r2
80007b06:	51 48       	stdsp	sp[0x50],r8
80007b08:	e0 8f 03 5f 	bral	800081c6 <_vfprintf_r+0x1476>
80007b0c:	40 98       	lddsp	r8,sp[0x24]
80007b0e:	ed b8 00 04 	bld	r8,0x4
80007b12:	c1 01       	brne	80007b32 <_vfprintf_r+0xde2>
80007b14:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007b18:	58 02       	cp.w	r2,0
80007b1a:	c0 80       	breq	80007b2a <_vfprintf_r+0xdda>
80007b1c:	1c 37       	cp.w	r7,lr
80007b1e:	c5 f4       	brge	80007bdc <_vfprintf_r+0xe8c>
80007b20:	fa ca f9 34 	sub	r10,sp,-1740
80007b24:	f4 07 00 38 	add	r8,r10,r7<<0x3
80007b28:	c7 68       	rjmp	80007c14 <_vfprintf_r+0xec4>
80007b2a:	2f f0       	sub	r0,-1
80007b2c:	1c 39       	cp.w	r9,lr
80007b2e:	c7 64       	brge	80007c1a <_vfprintf_r+0xeca>
80007b30:	c5 18       	rjmp	80007bd2 <_vfprintf_r+0xe82>
80007b32:	40 98       	lddsp	r8,sp[0x24]
80007b34:	ed b8 00 06 	bld	r8,0x6
80007b38:	c4 71       	brne	80007bc6 <_vfprintf_r+0xe76>
80007b3a:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007b3e:	58 02       	cp.w	r2,0
80007b40:	c1 d0       	breq	80007b7a <_vfprintf_r+0xe2a>
80007b42:	1c 37       	cp.w	r7,lr
80007b44:	c0 64       	brge	80007b50 <_vfprintf_r+0xe00>
80007b46:	fa c9 f9 34 	sub	r9,sp,-1740
80007b4a:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007b4e:	c1 d8       	rjmp	80007b88 <_vfprintf_r+0xe38>
80007b50:	fa c8 f9 40 	sub	r8,sp,-1728
80007b54:	1a d8       	st.w	--sp,r8
80007b56:	fa c8 fa a8 	sub	r8,sp,-1368
80007b5a:	0e 9b       	mov	r11,r7
80007b5c:	1a d8       	st.w	--sp,r8
80007b5e:	fa c8 fb a4 	sub	r8,sp,-1116
80007b62:	06 9a       	mov	r10,r3
80007b64:	1a d8       	st.w	--sp,r8
80007b66:	fa c8 f9 30 	sub	r8,sp,-1744
80007b6a:	fa c9 ff a4 	sub	r9,sp,-92
80007b6e:	40 8c       	lddsp	r12,sp[0x20]
80007b70:	f0 1f 00 b5 	mcall	80007e44 <_vfprintf_r+0x10f4>
80007b74:	2f dd       	sub	sp,-12
80007b76:	98 1b       	ld.sh	r11,r12[0x2]
80007b78:	c2 48       	rjmp	80007bc0 <_vfprintf_r+0xe70>
80007b7a:	2f f0       	sub	r0,-1
80007b7c:	1c 39       	cp.w	r9,lr
80007b7e:	c0 84       	brge	80007b8e <_vfprintf_r+0xe3e>
80007b80:	fa cb f9 34 	sub	r11,sp,-1740
80007b84:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007b88:	f1 0b fd 8a 	ld.sh	r11,r8[-630]
80007b8c:	c1 a8       	rjmp	80007bc0 <_vfprintf_r+0xe70>
80007b8e:	41 4c       	lddsp	r12,sp[0x50]
80007b90:	59 fe       	cp.w	lr,31
80007b92:	e0 89 00 13 	brgt	80007bb8 <_vfprintf_r+0xe68>
80007b96:	f8 c8 ff fc 	sub	r8,r12,-4
80007b9a:	51 48       	stdsp	sp[0x50],r8
80007b9c:	78 09       	ld.w	r9,r12[0x0]
80007b9e:	fa ca f9 34 	sub	r10,sp,-1740
80007ba2:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80007ba6:	f1 49 fd 88 	st.w	r8[-632],r9
80007baa:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
80007bae:	fc c8 ff ff 	sub	r8,lr,-1
80007bb2:	fb 48 06 c4 	st.w	sp[1732],r8
80007bb6:	c0 58       	rjmp	80007bc0 <_vfprintf_r+0xe70>
80007bb8:	f8 c8 ff fc 	sub	r8,r12,-4
80007bbc:	98 1b       	ld.sh	r11,r12[0x2]
80007bbe:	51 48       	stdsp	sp[0x50],r8
80007bc0:	e9 db c0 10 	bfextu	r4,r11,0x0,0x10
80007bc4:	c4 38       	rjmp	80007c4a <_vfprintf_r+0xefa>
80007bc6:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007bca:	58 02       	cp.w	r2,0
80007bcc:	c1 d0       	breq	80007c06 <_vfprintf_r+0xeb6>
80007bce:	1c 37       	cp.w	r7,lr
80007bd0:	c0 64       	brge	80007bdc <_vfprintf_r+0xe8c>
80007bd2:	fa c9 f9 34 	sub	r9,sp,-1740
80007bd6:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007bda:	c1 d8       	rjmp	80007c14 <_vfprintf_r+0xec4>
80007bdc:	fa c8 f9 40 	sub	r8,sp,-1728
80007be0:	1a d8       	st.w	--sp,r8
80007be2:	fa c8 fa a8 	sub	r8,sp,-1368
80007be6:	0e 9b       	mov	r11,r7
80007be8:	1a d8       	st.w	--sp,r8
80007bea:	fa c8 fb a4 	sub	r8,sp,-1116
80007bee:	06 9a       	mov	r10,r3
80007bf0:	1a d8       	st.w	--sp,r8
80007bf2:	fa c8 f9 30 	sub	r8,sp,-1744
80007bf6:	fa c9 ff a4 	sub	r9,sp,-92
80007bfa:	40 8c       	lddsp	r12,sp[0x20]
80007bfc:	f0 1f 00 92 	mcall	80007e44 <_vfprintf_r+0x10f4>
80007c00:	2f dd       	sub	sp,-12
80007c02:	78 0b       	ld.w	r11,r12[0x0]
80007c04:	c2 28       	rjmp	80007c48 <_vfprintf_r+0xef8>
80007c06:	2f f0       	sub	r0,-1
80007c08:	1c 39       	cp.w	r9,lr
80007c0a:	c0 84       	brge	80007c1a <_vfprintf_r+0xeca>
80007c0c:	fa cb f9 34 	sub	r11,sp,-1740
80007c10:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007c14:	f0 fb fd 88 	ld.w	r11,r8[-632]
80007c18:	c1 88       	rjmp	80007c48 <_vfprintf_r+0xef8>
80007c1a:	41 4c       	lddsp	r12,sp[0x50]
80007c1c:	59 fe       	cp.w	lr,31
80007c1e:	e0 89 00 11 	brgt	80007c40 <_vfprintf_r+0xef0>
80007c22:	f8 c8 ff fc 	sub	r8,r12,-4
80007c26:	51 48       	stdsp	sp[0x50],r8
80007c28:	fa ca f9 34 	sub	r10,sp,-1740
80007c2c:	78 0b       	ld.w	r11,r12[0x0]
80007c2e:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80007c32:	f1 4b fd 88 	st.w	r8[-632],r11
80007c36:	fc c8 ff ff 	sub	r8,lr,-1
80007c3a:	fb 48 06 c4 	st.w	sp[1732],r8
80007c3e:	c0 58       	rjmp	80007c48 <_vfprintf_r+0xef8>
80007c40:	78 0b       	ld.w	r11,r12[0x0]
80007c42:	f8 c8 ff fc 	sub	r8,r12,-4
80007c46:	51 48       	stdsp	sp[0x50],r8
80007c48:	16 94       	mov	r4,r11
80007c4a:	30 0e       	mov	lr,0
80007c4c:	1c 95       	mov	r5,lr
80007c4e:	e0 8f 02 bc 	bral	800081c6 <_vfprintf_r+0x1476>
80007c52:	00 98       	mov	r8,r0
80007c54:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007c58:	58 02       	cp.w	r2,0
80007c5a:	c1 c0       	breq	80007c92 <_vfprintf_r+0xf42>
80007c5c:	1c 37       	cp.w	r7,lr
80007c5e:	c0 64       	brge	80007c6a <_vfprintf_r+0xf1a>
80007c60:	fa c9 f9 34 	sub	r9,sp,-1740
80007c64:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007c68:	c1 c8       	rjmp	80007ca0 <_vfprintf_r+0xf50>
80007c6a:	fa c8 f9 40 	sub	r8,sp,-1728
80007c6e:	1a d8       	st.w	--sp,r8
80007c70:	fa c8 fa a8 	sub	r8,sp,-1368
80007c74:	1a d8       	st.w	--sp,r8
80007c76:	fa c8 fb a4 	sub	r8,sp,-1116
80007c7a:	06 9a       	mov	r10,r3
80007c7c:	1a d8       	st.w	--sp,r8
80007c7e:	0e 9b       	mov	r11,r7
80007c80:	fa c8 f9 30 	sub	r8,sp,-1744
80007c84:	fa c9 ff a4 	sub	r9,sp,-92
80007c88:	40 8c       	lddsp	r12,sp[0x20]
80007c8a:	f0 1f 00 6f 	mcall	80007e44 <_vfprintf_r+0x10f4>
80007c8e:	2f dd       	sub	sp,-12
80007c90:	c2 18       	rjmp	80007cd2 <_vfprintf_r+0xf82>
80007c92:	2f f0       	sub	r0,-1
80007c94:	1c 38       	cp.w	r8,lr
80007c96:	c0 84       	brge	80007ca6 <_vfprintf_r+0xf56>
80007c98:	fa cb f9 34 	sub	r11,sp,-1740
80007c9c:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007ca0:	f0 fc fd 88 	ld.w	r12,r8[-632]
80007ca4:	c1 88       	rjmp	80007cd4 <_vfprintf_r+0xf84>
80007ca6:	41 4c       	lddsp	r12,sp[0x50]
80007ca8:	59 fe       	cp.w	lr,31
80007caa:	e0 89 00 11 	brgt	80007ccc <_vfprintf_r+0xf7c>
80007cae:	f8 c8 ff fc 	sub	r8,r12,-4
80007cb2:	51 48       	stdsp	sp[0x50],r8
80007cb4:	fa ca f9 34 	sub	r10,sp,-1740
80007cb8:	78 0c       	ld.w	r12,r12[0x0]
80007cba:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80007cbe:	f1 4c fd 88 	st.w	r8[-632],r12
80007cc2:	fc c8 ff ff 	sub	r8,lr,-1
80007cc6:	fb 48 06 c4 	st.w	sp[1732],r8
80007cca:	c0 58       	rjmp	80007cd4 <_vfprintf_r+0xf84>
80007ccc:	f8 c8 ff fc 	sub	r8,r12,-4
80007cd0:	51 48       	stdsp	sp[0x50],r8
80007cd2:	78 0c       	ld.w	r12,r12[0x0]
80007cd4:	33 08       	mov	r8,48
80007cd6:	fb 68 06 c8 	st.b	sp[1736],r8
80007cda:	37 88       	mov	r8,120
80007cdc:	40 99       	lddsp	r9,sp[0x24]
80007cde:	fb 68 06 c9 	st.b	sp[1737],r8
80007ce2:	a1 b9       	sbr	r9,0x1
80007ce4:	37 88       	mov	r8,120
80007ce6:	4d 9b       	lddpc	r11,80007e48 <_vfprintf_r+0x10f8>
80007ce8:	18 94       	mov	r4,r12
80007cea:	50 99       	stdsp	sp[0x24],r9
80007cec:	30 05       	mov	r5,0
80007cee:	50 88       	stdsp	sp[0x20],r8
80007cf0:	30 2e       	mov	lr,2
80007cf2:	51 2b       	stdsp	sp[0x48],r11
80007cf4:	e0 8f 02 69 	bral	800081c6 <_vfprintf_r+0x1476>
80007cf8:	30 0a       	mov	r10,0
80007cfa:	fb 6a 06 cb 	st.b	sp[1739],r10
80007cfe:	00 98       	mov	r8,r0
80007d00:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007d04:	58 02       	cp.w	r2,0
80007d06:	c1 d0       	breq	80007d40 <_vfprintf_r+0xff0>
80007d08:	1c 37       	cp.w	r7,lr
80007d0a:	c0 64       	brge	80007d16 <_vfprintf_r+0xfc6>
80007d0c:	fa c9 f9 34 	sub	r9,sp,-1740
80007d10:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007d14:	c1 d8       	rjmp	80007d4e <_vfprintf_r+0xffe>
80007d16:	fa c8 f9 40 	sub	r8,sp,-1728
80007d1a:	1a d8       	st.w	--sp,r8
80007d1c:	fa c8 fa a8 	sub	r8,sp,-1368
80007d20:	1a d8       	st.w	--sp,r8
80007d22:	fa c8 fb a4 	sub	r8,sp,-1116
80007d26:	06 9a       	mov	r10,r3
80007d28:	1a d8       	st.w	--sp,r8
80007d2a:	0e 9b       	mov	r11,r7
80007d2c:	fa c8 f9 30 	sub	r8,sp,-1744
80007d30:	fa c9 ff a4 	sub	r9,sp,-92
80007d34:	40 8c       	lddsp	r12,sp[0x20]
80007d36:	f0 1f 00 44 	mcall	80007e44 <_vfprintf_r+0x10f4>
80007d3a:	2f dd       	sub	sp,-12
80007d3c:	78 03       	ld.w	r3,r12[0x0]
80007d3e:	c2 28       	rjmp	80007d82 <_vfprintf_r+0x1032>
80007d40:	2f f0       	sub	r0,-1
80007d42:	1c 38       	cp.w	r8,lr
80007d44:	c0 84       	brge	80007d54 <_vfprintf_r+0x1004>
80007d46:	fa cb f9 34 	sub	r11,sp,-1740
80007d4a:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007d4e:	f0 f3 fd 88 	ld.w	r3,r8[-632]
80007d52:	c1 88       	rjmp	80007d82 <_vfprintf_r+0x1032>
80007d54:	41 4c       	lddsp	r12,sp[0x50]
80007d56:	59 fe       	cp.w	lr,31
80007d58:	e0 89 00 11 	brgt	80007d7a <_vfprintf_r+0x102a>
80007d5c:	f8 c8 ff fc 	sub	r8,r12,-4
80007d60:	51 48       	stdsp	sp[0x50],r8
80007d62:	78 03       	ld.w	r3,r12[0x0]
80007d64:	fa ca f9 34 	sub	r10,sp,-1740
80007d68:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80007d6c:	f1 43 fd 88 	st.w	r8[-632],r3
80007d70:	fc c8 ff ff 	sub	r8,lr,-1
80007d74:	fb 48 06 c4 	st.w	sp[1732],r8
80007d78:	c0 58       	rjmp	80007d82 <_vfprintf_r+0x1032>
80007d7a:	f8 c8 ff fc 	sub	r8,r12,-4
80007d7e:	78 03       	ld.w	r3,r12[0x0]
80007d80:	51 48       	stdsp	sp[0x50],r8
80007d82:	40 c9       	lddsp	r9,sp[0x30]
80007d84:	58 09       	cp.w	r9,0
80007d86:	c1 05       	brlt	80007da6 <_vfprintf_r+0x1056>
80007d88:	12 9a       	mov	r10,r9
80007d8a:	30 0b       	mov	r11,0
80007d8c:	06 9c       	mov	r12,r3
80007d8e:	f0 1f 00 30 	mcall	80007e4c <_vfprintf_r+0x10fc>
80007d92:	e0 80 02 ab 	breq	800082e8 <_vfprintf_r+0x1598>
80007d96:	f8 03 01 07 	sub	r7,r12,r3
80007d9a:	40 c8       	lddsp	r8,sp[0x30]
80007d9c:	10 37       	cp.w	r7,r8
80007d9e:	e0 89 02 a5 	brgt	800082e8 <_vfprintf_r+0x1598>
80007da2:	e0 8f 02 a4 	bral	800082ea <_vfprintf_r+0x159a>
80007da6:	06 9c       	mov	r12,r3
80007da8:	30 02       	mov	r2,0
80007daa:	e0 8f 02 7d 	bral	800082a4 <_vfprintf_r+0x1554>
80007dae:	40 9b       	lddsp	r11,sp[0x24]
80007db0:	a5 ab       	sbr	r11,0x4
80007db2:	50 9b       	stdsp	sp[0x24],r11
80007db4:	00 99       	mov	r9,r0
80007db6:	40 98       	lddsp	r8,sp[0x24]
80007db8:	ed b8 00 05 	bld	r8,0x5
80007dbc:	c5 21       	brne	80007e60 <_vfprintf_r+0x1110>
80007dbe:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007dc2:	58 02       	cp.w	r2,0
80007dc4:	c1 e0       	breq	80007e00 <_vfprintf_r+0x10b0>
80007dc6:	1c 37       	cp.w	r7,lr
80007dc8:	c0 64       	brge	80007dd4 <_vfprintf_r+0x1084>
80007dca:	fa ca f9 34 	sub	r10,sp,-1740
80007dce:	f4 07 00 38 	add	r8,r10,r7<<0x3
80007dd2:	c1 e8       	rjmp	80007e0e <_vfprintf_r+0x10be>
80007dd4:	fa c8 f9 40 	sub	r8,sp,-1728
80007dd8:	1a d8       	st.w	--sp,r8
80007dda:	fa c8 fa a8 	sub	r8,sp,-1368
80007dde:	1a d8       	st.w	--sp,r8
80007de0:	fa c8 fb a4 	sub	r8,sp,-1116
80007de4:	06 9a       	mov	r10,r3
80007de6:	1a d8       	st.w	--sp,r8
80007de8:	0e 9b       	mov	r11,r7
80007dea:	fa c8 f9 30 	sub	r8,sp,-1744
80007dee:	fa c9 ff a4 	sub	r9,sp,-92
80007df2:	40 8c       	lddsp	r12,sp[0x20]
80007df4:	f0 1f 00 14 	mcall	80007e44 <_vfprintf_r+0x10f4>
80007df8:	2f dd       	sub	sp,-12
80007dfa:	f8 e4 00 00 	ld.d	r4,r12[0]
80007dfe:	c2 e8       	rjmp	80007e5a <_vfprintf_r+0x110a>
80007e00:	2f f0       	sub	r0,-1
80007e02:	1c 39       	cp.w	r9,lr
80007e04:	c0 84       	brge	80007e14 <_vfprintf_r+0x10c4>
80007e06:	fa c9 f9 34 	sub	r9,sp,-1740
80007e0a:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007e0e:	f0 e4 fd 88 	ld.d	r4,r8[-632]
80007e12:	c2 48       	rjmp	80007e5a <_vfprintf_r+0x110a>
80007e14:	41 4c       	lddsp	r12,sp[0x50]
80007e16:	59 fe       	cp.w	lr,31
80007e18:	e0 89 00 1c 	brgt	80007e50 <_vfprintf_r+0x1100>
80007e1c:	f8 c8 ff f8 	sub	r8,r12,-8
80007e20:	51 48       	stdsp	sp[0x50],r8
80007e22:	f8 e4 00 00 	ld.d	r4,r12[0]
80007e26:	fa cb f9 34 	sub	r11,sp,-1740
80007e2a:	f6 0e 00 38 	add	r8,r11,lr<<0x3
80007e2e:	f0 e5 fd 88 	st.d	r8[-632],r4
80007e32:	fc c8 ff ff 	sub	r8,lr,-1
80007e36:	fb 48 06 c4 	st.w	sp[1732],r8
80007e3a:	c1 08       	rjmp	80007e5a <_vfprintf_r+0x110a>
80007e3c:	80 00       	ld.sh	r0,r0[0x0]
80007e3e:	8e 90       	ld.uh	r0,r7[0x2]
80007e40:	80 00       	ld.sh	r0,r0[0x0]
80007e42:	af 18       	ld.d	r8,--r7
80007e44:	80 00       	ld.sh	r0,r0[0x0]
80007e46:	6a 14       	ld.w	r4,r5[0x4]
80007e48:	80 00       	ld.sh	r0,r0[0x0]
80007e4a:	bc 08       	st.h	lr[0x0],r8
80007e4c:	80 00       	ld.sh	r0,r0[0x0]
80007e4e:	a0 dc       	st.b	r0[0x5],r12
80007e50:	f8 c8 ff f8 	sub	r8,r12,-8
80007e54:	f8 e4 00 00 	ld.d	r4,r12[0]
80007e58:	51 48       	stdsp	sp[0x50],r8
80007e5a:	30 1e       	mov	lr,1
80007e5c:	e0 8f 01 b5 	bral	800081c6 <_vfprintf_r+0x1476>
80007e60:	40 98       	lddsp	r8,sp[0x24]
80007e62:	ed b8 00 04 	bld	r8,0x4
80007e66:	c1 01       	brne	80007e86 <_vfprintf_r+0x1136>
80007e68:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007e6c:	58 02       	cp.w	r2,0
80007e6e:	c0 80       	breq	80007e7e <_vfprintf_r+0x112e>
80007e70:	1c 37       	cp.w	r7,lr
80007e72:	c5 f4       	brge	80007f30 <_vfprintf_r+0x11e0>
80007e74:	fa ca f9 34 	sub	r10,sp,-1740
80007e78:	f4 07 00 38 	add	r8,r10,r7<<0x3
80007e7c:	c7 68       	rjmp	80007f68 <_vfprintf_r+0x1218>
80007e7e:	2f f0       	sub	r0,-1
80007e80:	1c 39       	cp.w	r9,lr
80007e82:	c7 64       	brge	80007f6e <_vfprintf_r+0x121e>
80007e84:	c5 18       	rjmp	80007f26 <_vfprintf_r+0x11d6>
80007e86:	40 98       	lddsp	r8,sp[0x24]
80007e88:	ed b8 00 06 	bld	r8,0x6
80007e8c:	c4 71       	brne	80007f1a <_vfprintf_r+0x11ca>
80007e8e:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007e92:	58 02       	cp.w	r2,0
80007e94:	c1 d0       	breq	80007ece <_vfprintf_r+0x117e>
80007e96:	1c 37       	cp.w	r7,lr
80007e98:	c0 64       	brge	80007ea4 <_vfprintf_r+0x1154>
80007e9a:	fa c9 f9 34 	sub	r9,sp,-1740
80007e9e:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007ea2:	c1 d8       	rjmp	80007edc <_vfprintf_r+0x118c>
80007ea4:	fa c8 f9 40 	sub	r8,sp,-1728
80007ea8:	1a d8       	st.w	--sp,r8
80007eaa:	fa c8 fa a8 	sub	r8,sp,-1368
80007eae:	0e 9b       	mov	r11,r7
80007eb0:	1a d8       	st.w	--sp,r8
80007eb2:	fa c8 fb a4 	sub	r8,sp,-1116
80007eb6:	06 9a       	mov	r10,r3
80007eb8:	1a d8       	st.w	--sp,r8
80007eba:	fa c8 f9 30 	sub	r8,sp,-1744
80007ebe:	fa c9 ff a4 	sub	r9,sp,-92
80007ec2:	40 8c       	lddsp	r12,sp[0x20]
80007ec4:	f0 1f 00 85 	mcall	800080d8 <_vfprintf_r+0x1388>
80007ec8:	2f dd       	sub	sp,-12
80007eca:	98 1b       	ld.sh	r11,r12[0x2]
80007ecc:	c2 48       	rjmp	80007f14 <_vfprintf_r+0x11c4>
80007ece:	2f f0       	sub	r0,-1
80007ed0:	1c 39       	cp.w	r9,lr
80007ed2:	c0 84       	brge	80007ee2 <_vfprintf_r+0x1192>
80007ed4:	fa cb f9 34 	sub	r11,sp,-1740
80007ed8:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007edc:	f1 0b fd 8a 	ld.sh	r11,r8[-630]
80007ee0:	c1 a8       	rjmp	80007f14 <_vfprintf_r+0x11c4>
80007ee2:	41 4c       	lddsp	r12,sp[0x50]
80007ee4:	59 fe       	cp.w	lr,31
80007ee6:	e0 89 00 13 	brgt	80007f0c <_vfprintf_r+0x11bc>
80007eea:	f8 c8 ff fc 	sub	r8,r12,-4
80007eee:	51 48       	stdsp	sp[0x50],r8
80007ef0:	78 09       	ld.w	r9,r12[0x0]
80007ef2:	fa ca f9 34 	sub	r10,sp,-1740
80007ef6:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80007efa:	f1 49 fd 88 	st.w	r8[-632],r9
80007efe:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
80007f02:	fc c8 ff ff 	sub	r8,lr,-1
80007f06:	fb 48 06 c4 	st.w	sp[1732],r8
80007f0a:	c0 58       	rjmp	80007f14 <_vfprintf_r+0x11c4>
80007f0c:	f8 c8 ff fc 	sub	r8,r12,-4
80007f10:	98 1b       	ld.sh	r11,r12[0x2]
80007f12:	51 48       	stdsp	sp[0x50],r8
80007f14:	e9 db c0 10 	bfextu	r4,r11,0x0,0x10
80007f18:	c4 38       	rjmp	80007f9e <_vfprintf_r+0x124e>
80007f1a:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007f1e:	58 02       	cp.w	r2,0
80007f20:	c1 d0       	breq	80007f5a <_vfprintf_r+0x120a>
80007f22:	1c 37       	cp.w	r7,lr
80007f24:	c0 64       	brge	80007f30 <_vfprintf_r+0x11e0>
80007f26:	fa c9 f9 34 	sub	r9,sp,-1740
80007f2a:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007f2e:	c1 d8       	rjmp	80007f68 <_vfprintf_r+0x1218>
80007f30:	fa c8 f9 40 	sub	r8,sp,-1728
80007f34:	1a d8       	st.w	--sp,r8
80007f36:	fa c8 fa a8 	sub	r8,sp,-1368
80007f3a:	0e 9b       	mov	r11,r7
80007f3c:	1a d8       	st.w	--sp,r8
80007f3e:	fa c8 fb a4 	sub	r8,sp,-1116
80007f42:	06 9a       	mov	r10,r3
80007f44:	1a d8       	st.w	--sp,r8
80007f46:	fa c8 f9 30 	sub	r8,sp,-1744
80007f4a:	fa c9 ff a4 	sub	r9,sp,-92
80007f4e:	40 8c       	lddsp	r12,sp[0x20]
80007f50:	f0 1f 00 62 	mcall	800080d8 <_vfprintf_r+0x1388>
80007f54:	2f dd       	sub	sp,-12
80007f56:	78 0b       	ld.w	r11,r12[0x0]
80007f58:	c2 28       	rjmp	80007f9c <_vfprintf_r+0x124c>
80007f5a:	2f f0       	sub	r0,-1
80007f5c:	1c 39       	cp.w	r9,lr
80007f5e:	c0 84       	brge	80007f6e <_vfprintf_r+0x121e>
80007f60:	fa cb f9 34 	sub	r11,sp,-1740
80007f64:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007f68:	f0 fb fd 88 	ld.w	r11,r8[-632]
80007f6c:	c1 88       	rjmp	80007f9c <_vfprintf_r+0x124c>
80007f6e:	41 4c       	lddsp	r12,sp[0x50]
80007f70:	59 fe       	cp.w	lr,31
80007f72:	e0 89 00 11 	brgt	80007f94 <_vfprintf_r+0x1244>
80007f76:	f8 c8 ff fc 	sub	r8,r12,-4
80007f7a:	51 48       	stdsp	sp[0x50],r8
80007f7c:	fa ca f9 34 	sub	r10,sp,-1740
80007f80:	78 0b       	ld.w	r11,r12[0x0]
80007f82:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80007f86:	f1 4b fd 88 	st.w	r8[-632],r11
80007f8a:	fc c8 ff ff 	sub	r8,lr,-1
80007f8e:	fb 48 06 c4 	st.w	sp[1732],r8
80007f92:	c0 58       	rjmp	80007f9c <_vfprintf_r+0x124c>
80007f94:	78 0b       	ld.w	r11,r12[0x0]
80007f96:	f8 c8 ff fc 	sub	r8,r12,-4
80007f9a:	51 48       	stdsp	sp[0x50],r8
80007f9c:	16 94       	mov	r4,r11
80007f9e:	30 1e       	mov	lr,1
80007fa0:	30 05       	mov	r5,0
80007fa2:	c1 29       	rjmp	800081c6 <_vfprintf_r+0x1476>
80007fa4:	4c e8       	lddpc	r8,800080dc <_vfprintf_r+0x138c>
80007fa6:	00 99       	mov	r9,r0
80007fa8:	51 28       	stdsp	sp[0x48],r8
80007faa:	40 98       	lddsp	r8,sp[0x24]
80007fac:	ed b8 00 05 	bld	r8,0x5
80007fb0:	c4 61       	brne	8000803c <_vfprintf_r+0x12ec>
80007fb2:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007fb6:	58 02       	cp.w	r2,0
80007fb8:	c1 e0       	breq	80007ff4 <_vfprintf_r+0x12a4>
80007fba:	1c 37       	cp.w	r7,lr
80007fbc:	c0 64       	brge	80007fc8 <_vfprintf_r+0x1278>
80007fbe:	fa cb f9 34 	sub	r11,sp,-1740
80007fc2:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007fc6:	c1 e8       	rjmp	80008002 <_vfprintf_r+0x12b2>
80007fc8:	fa c8 f9 40 	sub	r8,sp,-1728
80007fcc:	1a d8       	st.w	--sp,r8
80007fce:	fa c8 fa a8 	sub	r8,sp,-1368
80007fd2:	1a d8       	st.w	--sp,r8
80007fd4:	fa c8 fb a4 	sub	r8,sp,-1116
80007fd8:	06 9a       	mov	r10,r3
80007fda:	1a d8       	st.w	--sp,r8
80007fdc:	0e 9b       	mov	r11,r7
80007fde:	fa c8 f9 30 	sub	r8,sp,-1744
80007fe2:	fa c9 ff a4 	sub	r9,sp,-92
80007fe6:	40 8c       	lddsp	r12,sp[0x20]
80007fe8:	f0 1f 00 3c 	mcall	800080d8 <_vfprintf_r+0x1388>
80007fec:	2f dd       	sub	sp,-12
80007fee:	f8 e4 00 00 	ld.d	r4,r12[0]
80007ff2:	cd 68       	rjmp	8000819e <_vfprintf_r+0x144e>
80007ff4:	2f f0       	sub	r0,-1
80007ff6:	1c 39       	cp.w	r9,lr
80007ff8:	c0 84       	brge	80008008 <_vfprintf_r+0x12b8>
80007ffa:	fa ca f9 34 	sub	r10,sp,-1740
80007ffe:	f4 07 00 38 	add	r8,r10,r7<<0x3
80008002:	f0 e4 fd 88 	ld.d	r4,r8[-632]
80008006:	cc c8       	rjmp	8000819e <_vfprintf_r+0x144e>
80008008:	41 4c       	lddsp	r12,sp[0x50]
8000800a:	59 fe       	cp.w	lr,31
8000800c:	e0 89 00 12 	brgt	80008030 <_vfprintf_r+0x12e0>
80008010:	f8 c8 ff f8 	sub	r8,r12,-8
80008014:	51 48       	stdsp	sp[0x50],r8
80008016:	f8 e4 00 00 	ld.d	r4,r12[0]
8000801a:	fa c9 f9 34 	sub	r9,sp,-1740
8000801e:	f2 0e 00 38 	add	r8,r9,lr<<0x3
80008022:	f0 e5 fd 88 	st.d	r8[-632],r4
80008026:	fc c8 ff ff 	sub	r8,lr,-1
8000802a:	fb 48 06 c4 	st.w	sp[1732],r8
8000802e:	cb 88       	rjmp	8000819e <_vfprintf_r+0x144e>
80008030:	f8 c8 ff f8 	sub	r8,r12,-8
80008034:	f8 e4 00 00 	ld.d	r4,r12[0]
80008038:	51 48       	stdsp	sp[0x50],r8
8000803a:	cb 28       	rjmp	8000819e <_vfprintf_r+0x144e>
8000803c:	40 98       	lddsp	r8,sp[0x24]
8000803e:	ed b8 00 04 	bld	r8,0x4
80008042:	c1 c1       	brne	8000807a <_vfprintf_r+0x132a>
80008044:	fa fe 06 c4 	ld.w	lr,sp[1732]
80008048:	58 02       	cp.w	r2,0
8000804a:	c0 80       	breq	8000805a <_vfprintf_r+0x130a>
8000804c:	1c 37       	cp.w	r7,lr
8000804e:	c7 04       	brge	8000812e <_vfprintf_r+0x13de>
80008050:	fa cb f9 34 	sub	r11,sp,-1740
80008054:	f6 07 00 38 	add	r8,r11,r7<<0x3
80008058:	c8 78       	rjmp	80008166 <_vfprintf_r+0x1416>
8000805a:	2f f0       	sub	r0,-1
8000805c:	1c 39       	cp.w	r9,lr
8000805e:	c6 35       	brlt	80008124 <_vfprintf_r+0x13d4>
80008060:	41 4c       	lddsp	r12,sp[0x50]
80008062:	59 fe       	cp.w	lr,31
80008064:	e0 89 00 97 	brgt	80008192 <_vfprintf_r+0x1442>
80008068:	f8 c8 ff fc 	sub	r8,r12,-4
8000806c:	fa c9 f9 34 	sub	r9,sp,-1740
80008070:	51 48       	stdsp	sp[0x50],r8
80008072:	78 0b       	ld.w	r11,r12[0x0]
80008074:	f2 0e 00 38 	add	r8,r9,lr<<0x3
80008078:	c8 68       	rjmp	80008184 <_vfprintf_r+0x1434>
8000807a:	40 98       	lddsp	r8,sp[0x24]
8000807c:	ed b8 00 06 	bld	r8,0x6
80008080:	c4 c1       	brne	80008118 <_vfprintf_r+0x13c8>
80008082:	fa fe 06 c4 	ld.w	lr,sp[1732]
80008086:	58 02       	cp.w	r2,0
80008088:	c1 d0       	breq	800080c2 <_vfprintf_r+0x1372>
8000808a:	1c 37       	cp.w	r7,lr
8000808c:	c0 64       	brge	80008098 <_vfprintf_r+0x1348>
8000808e:	fa cb f9 34 	sub	r11,sp,-1740
80008092:	f6 07 00 38 	add	r8,r11,r7<<0x3
80008096:	c1 d8       	rjmp	800080d0 <_vfprintf_r+0x1380>
80008098:	fa c8 f9 40 	sub	r8,sp,-1728
8000809c:	1a d8       	st.w	--sp,r8
8000809e:	fa c8 fa a8 	sub	r8,sp,-1368
800080a2:	0e 9b       	mov	r11,r7
800080a4:	1a d8       	st.w	--sp,r8
800080a6:	fa c8 fb a4 	sub	r8,sp,-1116
800080aa:	06 9a       	mov	r10,r3
800080ac:	1a d8       	st.w	--sp,r8
800080ae:	fa c8 f9 30 	sub	r8,sp,-1744
800080b2:	fa c9 ff a4 	sub	r9,sp,-92
800080b6:	40 8c       	lddsp	r12,sp[0x20]
800080b8:	f0 1f 00 08 	mcall	800080d8 <_vfprintf_r+0x1388>
800080bc:	2f dd       	sub	sp,-12
800080be:	98 1b       	ld.sh	r11,r12[0x2]
800080c0:	c2 98       	rjmp	80008112 <_vfprintf_r+0x13c2>
800080c2:	2f f0       	sub	r0,-1
800080c4:	1c 39       	cp.w	r9,lr
800080c6:	c0 d4       	brge	800080e0 <_vfprintf_r+0x1390>
800080c8:	fa ca f9 34 	sub	r10,sp,-1740
800080cc:	f4 07 00 38 	add	r8,r10,r7<<0x3
800080d0:	f1 0b fd 8a 	ld.sh	r11,r8[-630]
800080d4:	c1 f8       	rjmp	80008112 <_vfprintf_r+0x13c2>
800080d6:	00 00       	add	r0,r0
800080d8:	80 00       	ld.sh	r0,r0[0x0]
800080da:	6a 14       	ld.w	r4,r5[0x4]
800080dc:	80 00       	ld.sh	r0,r0[0x0]
800080de:	bc 08       	st.h	lr[0x0],r8
800080e0:	41 4c       	lddsp	r12,sp[0x50]
800080e2:	59 fe       	cp.w	lr,31
800080e4:	e0 89 00 13 	brgt	8000810a <_vfprintf_r+0x13ba>
800080e8:	f8 c8 ff fc 	sub	r8,r12,-4
800080ec:	51 48       	stdsp	sp[0x50],r8
800080ee:	78 09       	ld.w	r9,r12[0x0]
800080f0:	fa cb f9 34 	sub	r11,sp,-1740
800080f4:	f6 0e 00 38 	add	r8,r11,lr<<0x3
800080f8:	f1 49 fd 88 	st.w	r8[-632],r9
800080fc:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
80008100:	fc c8 ff ff 	sub	r8,lr,-1
80008104:	fb 48 06 c4 	st.w	sp[1732],r8
80008108:	c0 58       	rjmp	80008112 <_vfprintf_r+0x13c2>
8000810a:	f8 c8 ff fc 	sub	r8,r12,-4
8000810e:	98 1b       	ld.sh	r11,r12[0x2]
80008110:	51 48       	stdsp	sp[0x50],r8
80008112:	e9 db c0 10 	bfextu	r4,r11,0x0,0x10
80008116:	c4 38       	rjmp	8000819c <_vfprintf_r+0x144c>
80008118:	fa fe 06 c4 	ld.w	lr,sp[1732]
8000811c:	58 02       	cp.w	r2,0
8000811e:	c1 d0       	breq	80008158 <_vfprintf_r+0x1408>
80008120:	1c 37       	cp.w	r7,lr
80008122:	c0 64       	brge	8000812e <_vfprintf_r+0x13de>
80008124:	fa ca f9 34 	sub	r10,sp,-1740
80008128:	f4 07 00 38 	add	r8,r10,r7<<0x3
8000812c:	c1 d8       	rjmp	80008166 <_vfprintf_r+0x1416>
8000812e:	fa c8 f9 40 	sub	r8,sp,-1728
80008132:	1a d8       	st.w	--sp,r8
80008134:	fa c8 fa a8 	sub	r8,sp,-1368
80008138:	0e 9b       	mov	r11,r7
8000813a:	1a d8       	st.w	--sp,r8
8000813c:	fa c8 fb a4 	sub	r8,sp,-1116
80008140:	06 9a       	mov	r10,r3
80008142:	1a d8       	st.w	--sp,r8
80008144:	fa c8 f9 30 	sub	r8,sp,-1744
80008148:	fa c9 ff a4 	sub	r9,sp,-92
8000814c:	40 8c       	lddsp	r12,sp[0x20]
8000814e:	f0 1f 00 a5 	mcall	800083e0 <_vfprintf_r+0x1690>
80008152:	2f dd       	sub	sp,-12
80008154:	78 0b       	ld.w	r11,r12[0x0]
80008156:	c2 28       	rjmp	8000819a <_vfprintf_r+0x144a>
80008158:	2f f0       	sub	r0,-1
8000815a:	1c 39       	cp.w	r9,lr
8000815c:	c0 84       	brge	8000816c <_vfprintf_r+0x141c>
8000815e:	fa c9 f9 34 	sub	r9,sp,-1740
80008162:	f2 07 00 38 	add	r8,r9,r7<<0x3
80008166:	f0 fb fd 88 	ld.w	r11,r8[-632]
8000816a:	c1 88       	rjmp	8000819a <_vfprintf_r+0x144a>
8000816c:	41 4c       	lddsp	r12,sp[0x50]
8000816e:	59 fe       	cp.w	lr,31
80008170:	e0 89 00 11 	brgt	80008192 <_vfprintf_r+0x1442>
80008174:	f8 c8 ff fc 	sub	r8,r12,-4
80008178:	fa ca f9 34 	sub	r10,sp,-1740
8000817c:	51 48       	stdsp	sp[0x50],r8
8000817e:	78 0b       	ld.w	r11,r12[0x0]
80008180:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80008184:	f1 4b fd 88 	st.w	r8[-632],r11
80008188:	fc c8 ff ff 	sub	r8,lr,-1
8000818c:	fb 48 06 c4 	st.w	sp[1732],r8
80008190:	c0 58       	rjmp	8000819a <_vfprintf_r+0x144a>
80008192:	78 0b       	ld.w	r11,r12[0x0]
80008194:	f8 c8 ff fc 	sub	r8,r12,-4
80008198:	51 48       	stdsp	sp[0x50],r8
8000819a:	16 94       	mov	r4,r11
8000819c:	30 05       	mov	r5,0
8000819e:	eb e4 10 08 	or	r8,r5,r4
800081a2:	40 99       	lddsp	r9,sp[0x24]
800081a4:	5f 18       	srne	r8
800081a6:	30 0b       	mov	r11,0
800081a8:	f3 e8 00 08 	and	r8,r9,r8
800081ac:	f6 08 18 00 	cp.b	r8,r11
800081b0:	c0 a0       	breq	800081c4 <_vfprintf_r+0x1474>
800081b2:	40 99       	lddsp	r9,sp[0x24]
800081b4:	40 8a       	lddsp	r10,sp[0x20]
800081b6:	a1 b9       	sbr	r9,0x1
800081b8:	33 08       	mov	r8,48
800081ba:	fb 6a 06 c9 	st.b	sp[1737],r10
800081be:	50 99       	stdsp	sp[0x24],r9
800081c0:	fb 68 06 c8 	st.b	sp[1736],r8
800081c4:	30 2e       	mov	lr,2
800081c6:	30 08       	mov	r8,0
800081c8:	fb 68 06 cb 	st.b	sp[1739],r8
800081cc:	40 cb       	lddsp	r11,sp[0x30]
800081ce:	58 0b       	cp.w	r11,0
800081d0:	c0 45       	brlt	800081d8 <_vfprintf_r+0x1488>
800081d2:	40 9a       	lddsp	r10,sp[0x24]
800081d4:	a7 da       	cbr	r10,0x7
800081d6:	50 9a       	stdsp	sp[0x24],r10
800081d8:	40 c9       	lddsp	r9,sp[0x30]
800081da:	eb e4 10 08 	or	r8,r5,r4
800081de:	58 09       	cp.w	r9,0
800081e0:	5f 19       	srne	r9
800081e2:	58 08       	cp.w	r8,0
800081e4:	5f 18       	srne	r8
800081e6:	fa c6 f9 68 	sub	r6,sp,-1688
800081ea:	12 48       	or	r8,r9
800081ec:	30 0b       	mov	r11,0
800081ee:	f6 08 18 00 	cp.b	r8,r11
800081f2:	c5 d0       	breq	800082ac <_vfprintf_r+0x155c>
800081f4:	30 18       	mov	r8,1
800081f6:	f0 0e 18 00 	cp.b	lr,r8
800081fa:	c0 70       	breq	80008208 <_vfprintf_r+0x14b8>
800081fc:	c0 83       	brcs	8000820c <_vfprintf_r+0x14bc>
800081fe:	30 28       	mov	r8,2
80008200:	f0 0e 18 00 	cp.b	lr,r8
80008204:	c4 d1       	brne	8000829e <_vfprintf_r+0x154e>
80008206:	c3 98       	rjmp	80008278 <_vfprintf_r+0x1528>
80008208:	0c 97       	mov	r7,r6
8000820a:	c2 d8       	rjmp	80008264 <_vfprintf_r+0x1514>
8000820c:	0c 93       	mov	r3,r6
8000820e:	f1 d4 c0 03 	bfextu	r8,r4,0x0,0x3
80008212:	f0 cc ff d0 	sub	r12,r8,-48
80008216:	06 fc       	st.b	--r3,r12
80008218:	e8 0a 16 03 	lsr	r10,r4,0x3
8000821c:	ea 0b 16 03 	lsr	r11,r5,0x3
80008220:	f5 e5 11 da 	or	r10,r10,r5<<0x1d
80008224:	16 95       	mov	r5,r11
80008226:	14 94       	mov	r4,r10
80008228:	58 04       	cp.w	r4,0
8000822a:	5c 25       	cpc	r5
8000822c:	cf 11       	brne	8000820e <_vfprintf_r+0x14be>
8000822e:	40 9a       	lddsp	r10,sp[0x24]
80008230:	ed ba 00 00 	bld	r10,0x0
80008234:	c4 81       	brne	800082c4 <_vfprintf_r+0x1574>
80008236:	33 08       	mov	r8,48
80008238:	f0 0c 18 00 	cp.b	r12,r8
8000823c:	c4 40       	breq	800082c4 <_vfprintf_r+0x1574>
8000823e:	06 f8       	st.b	--r3,r8
80008240:	c4 28       	rjmp	800082c4 <_vfprintf_r+0x1574>
80008242:	18 97       	mov	r7,r12
80008244:	30 a8       	mov	r8,10
80008246:	30 09       	mov	r9,0
80008248:	08 9a       	mov	r10,r4
8000824a:	0a 9b       	mov	r11,r5
8000824c:	f0 1f 00 66 	mcall	800083e4 <_vfprintf_r+0x1694>
80008250:	2d 0a       	sub	r10,-48
80008252:	0a 9b       	mov	r11,r5
80008254:	ae 8a       	st.b	r7[0x0],r10
80008256:	30 a8       	mov	r8,10
80008258:	08 9a       	mov	r10,r4
8000825a:	30 09       	mov	r9,0
8000825c:	f0 1f 00 63 	mcall	800083e8 <_vfprintf_r+0x1698>
80008260:	14 94       	mov	r4,r10
80008262:	16 95       	mov	r5,r11
80008264:	ee cc 00 01 	sub	r12,r7,1
80008268:	58 94       	cp.w	r4,9
8000826a:	5c 25       	cpc	r5
8000826c:	fe 9b ff eb 	brhi	80008242 <_vfprintf_r+0x14f2>
80008270:	18 93       	mov	r3,r12
80008272:	e8 c8 ff d0 	sub	r8,r4,-48
80008276:	c2 48       	rjmp	800082be <_vfprintf_r+0x156e>
80008278:	0c 93       	mov	r3,r6
8000827a:	f1 d4 c0 04 	bfextu	r8,r4,0x0,0x4
8000827e:	41 29       	lddsp	r9,sp[0x48]
80008280:	f2 08 07 08 	ld.ub	r8,r9[r8]
80008284:	06 f8       	st.b	--r3,r8
80008286:	e8 0a 16 04 	lsr	r10,r4,0x4
8000828a:	ea 0b 16 04 	lsr	r11,r5,0x4
8000828e:	f5 e5 11 ca 	or	r10,r10,r5<<0x1c
80008292:	16 95       	mov	r5,r11
80008294:	14 94       	mov	r4,r10
80008296:	58 04       	cp.w	r4,0
80008298:	5c 25       	cpc	r5
8000829a:	cf 01       	brne	8000827a <_vfprintf_r+0x152a>
8000829c:	c1 48       	rjmp	800082c4 <_vfprintf_r+0x1574>
8000829e:	4d 4c       	lddpc	r12,800083ec <_vfprintf_r+0x169c>
800082a0:	40 c2       	lddsp	r2,sp[0x30]
800082a2:	18 93       	mov	r3,r12
800082a4:	f0 1f 00 53 	mcall	800083f0 <_vfprintf_r+0x16a0>
800082a8:	18 97       	mov	r7,r12
800082aa:	c2 18       	rjmp	800082ec <_vfprintf_r+0x159c>
800082ac:	58 0e       	cp.w	lr,0
800082ae:	c0 a1       	brne	800082c2 <_vfprintf_r+0x1572>
800082b0:	40 9b       	lddsp	r11,sp[0x24]
800082b2:	ed bb 00 00 	bld	r11,0x0
800082b6:	c0 61       	brne	800082c2 <_vfprintf_r+0x1572>
800082b8:	fa c3 f9 69 	sub	r3,sp,-1687
800082bc:	33 08       	mov	r8,48
800082be:	a6 88       	st.b	r3[0x0],r8
800082c0:	c0 28       	rjmp	800082c4 <_vfprintf_r+0x1574>
800082c2:	0c 93       	mov	r3,r6
800082c4:	ec 03 01 07 	sub	r7,r6,r3
800082c8:	40 c2       	lddsp	r2,sp[0x30]
800082ca:	c1 18       	rjmp	800082ec <_vfprintf_r+0x159c>
800082cc:	40 8a       	lddsp	r10,sp[0x20]
800082ce:	58 0a       	cp.w	r10,0
800082d0:	e0 80 04 8e 	breq	80008bec <_vfprintf_r+0x1e9c>
800082d4:	fb 6a 06 70 	st.b	sp[1648],r10
800082d8:	30 09       	mov	r9,0
800082da:	fa c3 f9 90 	sub	r3,sp,-1648
800082de:	fb 69 06 cb 	st.b	sp[1739],r9
800082e2:	30 02       	mov	r2,0
800082e4:	30 17       	mov	r7,1
800082e6:	c0 38       	rjmp	800082ec <_vfprintf_r+0x159c>
800082e8:	40 c7       	lddsp	r7,sp[0x30]
800082ea:	30 02       	mov	r2,0
800082ec:	ee 02 0c 48 	max	r8,r7,r2
800082f0:	30 0b       	mov	r11,0
800082f2:	51 18       	stdsp	sp[0x44],r8
800082f4:	40 99       	lddsp	r9,sp[0x24]
800082f6:	fb 38 06 cb 	ld.ub	r8,sp[1739]
800082fa:	e2 19 00 02 	andl	r9,0x2,COH
800082fe:	f6 08 18 00 	cp.b	r8,r11
80008302:	fb fa 10 11 	ld.wne	r10,sp[0x44]
80008306:	f7 ba 01 ff 	subne	r10,-1
8000830a:	fb fa 1a 11 	st.wne	sp[0x44],r10
8000830e:	50 69       	stdsp	sp[0x18],r9
80008310:	58 09       	cp.w	r9,0
80008312:	fb f8 10 11 	ld.wne	r8,sp[0x44]
80008316:	f7 b8 01 fe 	subne	r8,-2
8000831a:	fb f8 1a 11 	st.wne	sp[0x44],r8
8000831e:	40 9b       	lddsp	r11,sp[0x24]
80008320:	e2 1b 00 84 	andl	r11,0x84,COH
80008324:	50 7b       	stdsp	sp[0x1c],r11
80008326:	c4 31       	brne	800083ac <_vfprintf_r+0x165c>
80008328:	40 b6       	lddsp	r6,sp[0x2c]
8000832a:	41 1a       	lddsp	r10,sp[0x44]
8000832c:	14 16       	sub	r6,r10
8000832e:	58 06       	cp.w	r6,0
80008330:	e0 89 00 1e 	brgt	8000836c <_vfprintf_r+0x161c>
80008334:	c3 c8       	rjmp	800083ac <_vfprintf_r+0x165c>
80008336:	2f 08       	sub	r8,-16
80008338:	4a f9       	lddpc	r9,800083f4 <_vfprintf_r+0x16a4>
8000833a:	fb 48 06 a0 	st.w	sp[1696],r8
8000833e:	83 09       	st.w	r1[0x0],r9
80008340:	f6 c8 ff ff 	sub	r8,r11,-1
80008344:	31 0b       	mov	r11,16
80008346:	fb 48 06 9c 	st.w	sp[1692],r8
8000834a:	83 1b       	st.w	r1[0x4],r11
8000834c:	58 78       	cp.w	r8,7
8000834e:	e0 89 00 04 	brgt	80008356 <_vfprintf_r+0x1606>
80008352:	2f 81       	sub	r1,-8
80008354:	c0 b8       	rjmp	8000836a <_vfprintf_r+0x161a>
80008356:	fa ca f9 68 	sub	r10,sp,-1688
8000835a:	40 4b       	lddsp	r11,sp[0x10]
8000835c:	40 5c       	lddsp	r12,sp[0x14]
8000835e:	f0 1f 00 27 	mcall	800083f8 <_vfprintf_r+0x16a8>
80008362:	e0 81 04 53 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008366:	fa c1 f9 d0 	sub	r1,sp,-1584
8000836a:	21 06       	sub	r6,16
8000836c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008370:	fa fb 06 9c 	ld.w	r11,sp[1692]
80008374:	4a 09       	lddpc	r9,800083f4 <_vfprintf_r+0x16a4>
80008376:	59 06       	cp.w	r6,16
80008378:	fe 99 ff df 	brgt	80008336 <_vfprintf_r+0x15e6>
8000837c:	0c 08       	add	r8,r6
8000837e:	83 09       	st.w	r1[0x0],r9
80008380:	fb 48 06 a0 	st.w	sp[1696],r8
80008384:	83 16       	st.w	r1[0x4],r6
80008386:	f6 c8 ff ff 	sub	r8,r11,-1
8000838a:	fb 48 06 9c 	st.w	sp[1692],r8
8000838e:	58 78       	cp.w	r8,7
80008390:	e0 89 00 04 	brgt	80008398 <_vfprintf_r+0x1648>
80008394:	2f 81       	sub	r1,-8
80008396:	c0 b8       	rjmp	800083ac <_vfprintf_r+0x165c>
80008398:	fa ca f9 68 	sub	r10,sp,-1688
8000839c:	40 4b       	lddsp	r11,sp[0x10]
8000839e:	40 5c       	lddsp	r12,sp[0x14]
800083a0:	f0 1f 00 16 	mcall	800083f8 <_vfprintf_r+0x16a8>
800083a4:	e0 81 04 32 	brne	80008c08 <_vfprintf_r+0x1eb8>
800083a8:	fa c1 f9 d0 	sub	r1,sp,-1584
800083ac:	fb 38 06 cb 	ld.ub	r8,sp[1739]
800083b0:	30 0a       	mov	r10,0
800083b2:	f4 08 18 00 	cp.b	r8,r10
800083b6:	c2 d0       	breq	80008410 <_vfprintf_r+0x16c0>
800083b8:	fa f8 06 a0 	ld.w	r8,sp[1696]
800083bc:	2f f8       	sub	r8,-1
800083be:	fb 48 06 a0 	st.w	sp[1696],r8
800083c2:	fa c8 f9 35 	sub	r8,sp,-1739
800083c6:	fa f9 06 9c 	ld.w	r9,sp[1692]
800083ca:	83 08       	st.w	r1[0x0],r8
800083cc:	2f f9       	sub	r9,-1
800083ce:	30 18       	mov	r8,1
800083d0:	fb 49 06 9c 	st.w	sp[1692],r9
800083d4:	83 18       	st.w	r1[0x4],r8
800083d6:	58 79       	cp.w	r9,7
800083d8:	e0 89 00 12 	brgt	800083fc <_vfprintf_r+0x16ac>
800083dc:	2f 81       	sub	r1,-8
800083de:	c1 98       	rjmp	80008410 <_vfprintf_r+0x16c0>
800083e0:	80 00       	ld.sh	r0,r0[0x0]
800083e2:	6a 14       	ld.w	r4,r5[0x4]
800083e4:	80 00       	ld.sh	r0,r0[0x0]
800083e6:	b3 44       	asr	r4,0x12
800083e8:	80 00       	ld.sh	r0,r0[0x0]
800083ea:	5b d0       	cp.w	r0,-3
800083ec:	80 00       	ld.sh	r0,r0[0x0]
800083ee:	bc 1c       	st.h	lr[0x2],r12
800083f0:	80 00       	ld.sh	r0,r0[0x0]
800083f2:	ac 58       	st.h	r6[0xa],r8
800083f4:	80 00       	ld.sh	r0,r0[0x0]
800083f6:	bb 68       	lsl	r8,0x1a
800083f8:	80 00       	ld.sh	r0,r0[0x0]
800083fa:	6d 30       	ld.w	r0,r6[0x4c]
800083fc:	fa ca f9 68 	sub	r10,sp,-1688
80008400:	40 4b       	lddsp	r11,sp[0x10]
80008402:	40 5c       	lddsp	r12,sp[0x14]
80008404:	f0 1f 00 64 	mcall	80008594 <_vfprintf_r+0x1844>
80008408:	e0 81 04 00 	brne	80008c08 <_vfprintf_r+0x1eb8>
8000840c:	fa c1 f9 d0 	sub	r1,sp,-1584
80008410:	40 69       	lddsp	r9,sp[0x18]
80008412:	58 09       	cp.w	r9,0
80008414:	c1 f0       	breq	80008452 <_vfprintf_r+0x1702>
80008416:	fa f8 06 a0 	ld.w	r8,sp[1696]
8000841a:	2f e8       	sub	r8,-2
8000841c:	fb 48 06 a0 	st.w	sp[1696],r8
80008420:	fa c8 f9 38 	sub	r8,sp,-1736
80008424:	fa f9 06 9c 	ld.w	r9,sp[1692]
80008428:	83 08       	st.w	r1[0x0],r8
8000842a:	2f f9       	sub	r9,-1
8000842c:	30 28       	mov	r8,2
8000842e:	fb 49 06 9c 	st.w	sp[1692],r9
80008432:	83 18       	st.w	r1[0x4],r8
80008434:	58 79       	cp.w	r9,7
80008436:	e0 89 00 04 	brgt	8000843e <_vfprintf_r+0x16ee>
8000843a:	2f 81       	sub	r1,-8
8000843c:	c0 b8       	rjmp	80008452 <_vfprintf_r+0x1702>
8000843e:	fa ca f9 68 	sub	r10,sp,-1688
80008442:	40 4b       	lddsp	r11,sp[0x10]
80008444:	40 5c       	lddsp	r12,sp[0x14]
80008446:	f0 1f 00 54 	mcall	80008594 <_vfprintf_r+0x1844>
8000844a:	e0 81 03 df 	brne	80008c08 <_vfprintf_r+0x1eb8>
8000844e:	fa c1 f9 d0 	sub	r1,sp,-1584
80008452:	40 78       	lddsp	r8,sp[0x1c]
80008454:	e0 48 00 80 	cp.w	r8,128
80008458:	c4 31       	brne	800084de <_vfprintf_r+0x178e>
8000845a:	40 b6       	lddsp	r6,sp[0x2c]
8000845c:	41 1b       	lddsp	r11,sp[0x44]
8000845e:	16 16       	sub	r6,r11
80008460:	58 06       	cp.w	r6,0
80008462:	e0 89 00 1e 	brgt	8000849e <_vfprintf_r+0x174e>
80008466:	c3 c8       	rjmp	800084de <_vfprintf_r+0x178e>
80008468:	2f 08       	sub	r8,-16
8000846a:	4c ca       	lddpc	r10,80008598 <_vfprintf_r+0x1848>
8000846c:	fb 48 06 a0 	st.w	sp[1696],r8
80008470:	31 09       	mov	r9,16
80008472:	f6 c8 ff ff 	sub	r8,r11,-1
80008476:	83 0a       	st.w	r1[0x0],r10
80008478:	83 19       	st.w	r1[0x4],r9
8000847a:	fb 48 06 9c 	st.w	sp[1692],r8
8000847e:	58 78       	cp.w	r8,7
80008480:	e0 89 00 04 	brgt	80008488 <_vfprintf_r+0x1738>
80008484:	2f 81       	sub	r1,-8
80008486:	c0 b8       	rjmp	8000849c <_vfprintf_r+0x174c>
80008488:	fa ca f9 68 	sub	r10,sp,-1688
8000848c:	40 4b       	lddsp	r11,sp[0x10]
8000848e:	40 5c       	lddsp	r12,sp[0x14]
80008490:	f0 1f 00 41 	mcall	80008594 <_vfprintf_r+0x1844>
80008494:	e0 81 03 ba 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008498:	fa c1 f9 d0 	sub	r1,sp,-1584
8000849c:	21 06       	sub	r6,16
8000849e:	fa f8 06 a0 	ld.w	r8,sp[1696]
800084a2:	fa fb 06 9c 	ld.w	r11,sp[1692]
800084a6:	4b d9       	lddpc	r9,80008598 <_vfprintf_r+0x1848>
800084a8:	59 06       	cp.w	r6,16
800084aa:	fe 99 ff df 	brgt	80008468 <_vfprintf_r+0x1718>
800084ae:	0c 08       	add	r8,r6
800084b0:	83 09       	st.w	r1[0x0],r9
800084b2:	fb 48 06 a0 	st.w	sp[1696],r8
800084b6:	83 16       	st.w	r1[0x4],r6
800084b8:	f6 c8 ff ff 	sub	r8,r11,-1
800084bc:	fb 48 06 9c 	st.w	sp[1692],r8
800084c0:	58 78       	cp.w	r8,7
800084c2:	e0 89 00 04 	brgt	800084ca <_vfprintf_r+0x177a>
800084c6:	2f 81       	sub	r1,-8
800084c8:	c0 b8       	rjmp	800084de <_vfprintf_r+0x178e>
800084ca:	fa ca f9 68 	sub	r10,sp,-1688
800084ce:	40 4b       	lddsp	r11,sp[0x10]
800084d0:	40 5c       	lddsp	r12,sp[0x14]
800084d2:	f0 1f 00 31 	mcall	80008594 <_vfprintf_r+0x1844>
800084d6:	e0 81 03 99 	brne	80008c08 <_vfprintf_r+0x1eb8>
800084da:	fa c1 f9 d0 	sub	r1,sp,-1584
800084de:	e4 07 01 06 	sub	r6,r2,r7
800084e2:	58 06       	cp.w	r6,0
800084e4:	e0 89 00 1e 	brgt	80008520 <_vfprintf_r+0x17d0>
800084e8:	c3 e8       	rjmp	80008564 <_vfprintf_r+0x1814>
800084ea:	2f 08       	sub	r8,-16
800084ec:	31 0a       	mov	r10,16
800084ee:	fb 48 06 a0 	st.w	sp[1696],r8
800084f2:	83 1a       	st.w	r1[0x4],r10
800084f4:	f6 c8 ff ff 	sub	r8,r11,-1
800084f8:	4a 8b       	lddpc	r11,80008598 <_vfprintf_r+0x1848>
800084fa:	fb 48 06 9c 	st.w	sp[1692],r8
800084fe:	83 0b       	st.w	r1[0x0],r11
80008500:	58 78       	cp.w	r8,7
80008502:	e0 89 00 04 	brgt	8000850a <_vfprintf_r+0x17ba>
80008506:	2f 81       	sub	r1,-8
80008508:	c0 a8       	rjmp	8000851c <_vfprintf_r+0x17cc>
8000850a:	fa ca f9 68 	sub	r10,sp,-1688
8000850e:	40 4b       	lddsp	r11,sp[0x10]
80008510:	40 5c       	lddsp	r12,sp[0x14]
80008512:	f0 1f 00 21 	mcall	80008594 <_vfprintf_r+0x1844>
80008516:	e0 81 03 79 	brne	80008c08 <_vfprintf_r+0x1eb8>
8000851a:	04 91       	mov	r1,r2
8000851c:	21 06       	sub	r6,16
8000851e:	c0 38       	rjmp	80008524 <_vfprintf_r+0x17d4>
80008520:	fa c2 f9 d0 	sub	r2,sp,-1584
80008524:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008528:	fa fb 06 9c 	ld.w	r11,sp[1692]
8000852c:	49 b9       	lddpc	r9,80008598 <_vfprintf_r+0x1848>
8000852e:	59 06       	cp.w	r6,16
80008530:	fe 99 ff dd 	brgt	800084ea <_vfprintf_r+0x179a>
80008534:	0c 08       	add	r8,r6
80008536:	83 09       	st.w	r1[0x0],r9
80008538:	fb 48 06 a0 	st.w	sp[1696],r8
8000853c:	83 16       	st.w	r1[0x4],r6
8000853e:	f6 c8 ff ff 	sub	r8,r11,-1
80008542:	fb 48 06 9c 	st.w	sp[1692],r8
80008546:	58 78       	cp.w	r8,7
80008548:	e0 89 00 04 	brgt	80008550 <_vfprintf_r+0x1800>
8000854c:	2f 81       	sub	r1,-8
8000854e:	c0 b8       	rjmp	80008564 <_vfprintf_r+0x1814>
80008550:	fa ca f9 68 	sub	r10,sp,-1688
80008554:	40 4b       	lddsp	r11,sp[0x10]
80008556:	40 5c       	lddsp	r12,sp[0x14]
80008558:	f0 1f 00 0f 	mcall	80008594 <_vfprintf_r+0x1844>
8000855c:	e0 81 03 56 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008560:	fa c1 f9 d0 	sub	r1,sp,-1584
80008564:	40 98       	lddsp	r8,sp[0x24]
80008566:	ed b8 00 08 	bld	r8,0x8
8000856a:	c1 90       	breq	8000859c <_vfprintf_r+0x184c>
8000856c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008570:	0e 08       	add	r8,r7
80008572:	83 03       	st.w	r1[0x0],r3
80008574:	fb 48 06 a0 	st.w	sp[1696],r8
80008578:	83 17       	st.w	r1[0x4],r7
8000857a:	fa f8 06 9c 	ld.w	r8,sp[1692]
8000857e:	2f f8       	sub	r8,-1
80008580:	fb 48 06 9c 	st.w	sp[1692],r8
80008584:	58 78       	cp.w	r8,7
80008586:	e0 89 02 c8 	brgt	80008b16 <_vfprintf_r+0x1dc6>
8000858a:	e2 ca ff f8 	sub	r10,r1,-8
8000858e:	e0 8f 02 cd 	bral	80008b28 <_vfprintf_r+0x1dd8>
80008592:	00 00       	add	r0,r0
80008594:	80 00       	ld.sh	r0,r0[0x0]
80008596:	6d 30       	ld.w	r0,r6[0x4c]
80008598:	80 00       	ld.sh	r0,r0[0x0]
8000859a:	bc 3c       	st.h	lr[0x6],r12
8000859c:	40 89       	lddsp	r9,sp[0x20]
8000859e:	e0 49 00 65 	cp.w	r9,101
800085a2:	e0 8a 01 f4 	brle	8000898a <_vfprintf_r+0x1c3a>
800085a6:	30 08       	mov	r8,0
800085a8:	30 09       	mov	r9,0
800085aa:	40 1b       	lddsp	r11,sp[0x4]
800085ac:	40 0a       	lddsp	r10,sp[0x0]
800085ae:	f0 1f 00 4c 	mcall	800086dc <_vfprintf_r+0x198c>
800085b2:	c7 b0       	breq	800086a8 <_vfprintf_r+0x1958>
800085b4:	fa f8 06 a0 	ld.w	r8,sp[1696]
800085b8:	2f f8       	sub	r8,-1
800085ba:	fb 48 06 a0 	st.w	sp[1696],r8
800085be:	4c 98       	lddpc	r8,800086e0 <_vfprintf_r+0x1990>
800085c0:	fa f9 06 9c 	ld.w	r9,sp[1692]
800085c4:	83 08       	st.w	r1[0x0],r8
800085c6:	2f f9       	sub	r9,-1
800085c8:	30 18       	mov	r8,1
800085ca:	fb 49 06 9c 	st.w	sp[1692],r9
800085ce:	83 18       	st.w	r1[0x4],r8
800085d0:	58 79       	cp.w	r9,7
800085d2:	e0 89 00 05 	brgt	800085dc <_vfprintf_r+0x188c>
800085d6:	e2 ca ff f8 	sub	r10,r1,-8
800085da:	c0 b8       	rjmp	800085f0 <_vfprintf_r+0x18a0>
800085dc:	fa ca f9 68 	sub	r10,sp,-1688
800085e0:	40 4b       	lddsp	r11,sp[0x10]
800085e2:	40 5c       	lddsp	r12,sp[0x14]
800085e4:	f0 1f 00 40 	mcall	800086e4 <_vfprintf_r+0x1994>
800085e8:	e0 81 03 10 	brne	80008c08 <_vfprintf_r+0x1eb8>
800085ec:	fa ca f9 d0 	sub	r10,sp,-1584
800085f0:	fa f8 06 bc 	ld.w	r8,sp[1724]
800085f4:	41 0b       	lddsp	r11,sp[0x40]
800085f6:	16 38       	cp.w	r8,r11
800085f8:	c0 65       	brlt	80008604 <_vfprintf_r+0x18b4>
800085fa:	40 99       	lddsp	r9,sp[0x24]
800085fc:	ed b9 00 00 	bld	r9,0x0
80008600:	e0 81 02 94 	brne	80008b28 <_vfprintf_r+0x1dd8>
80008604:	40 d8       	lddsp	r8,sp[0x34]
80008606:	95 08       	st.w	r10[0x0],r8
80008608:	fa f8 06 a0 	ld.w	r8,sp[1696]
8000860c:	2f f8       	sub	r8,-1
8000860e:	30 19       	mov	r9,1
80008610:	fb 48 06 a0 	st.w	sp[1696],r8
80008614:	95 19       	st.w	r10[0x4],r9
80008616:	fa f8 06 9c 	ld.w	r8,sp[1692]
8000861a:	2f f8       	sub	r8,-1
8000861c:	fb 48 06 9c 	st.w	sp[1692],r8
80008620:	58 78       	cp.w	r8,7
80008622:	e0 89 00 04 	brgt	8000862a <_vfprintf_r+0x18da>
80008626:	2f 8a       	sub	r10,-8
80008628:	c0 b8       	rjmp	8000863e <_vfprintf_r+0x18ee>
8000862a:	fa ca f9 68 	sub	r10,sp,-1688
8000862e:	40 4b       	lddsp	r11,sp[0x10]
80008630:	40 5c       	lddsp	r12,sp[0x14]
80008632:	f0 1f 00 2d 	mcall	800086e4 <_vfprintf_r+0x1994>
80008636:	e0 81 02 e9 	brne	80008c08 <_vfprintf_r+0x1eb8>
8000863a:	fa ca f9 d0 	sub	r10,sp,-1584
8000863e:	41 06       	lddsp	r6,sp[0x40]
80008640:	20 16       	sub	r6,1
80008642:	58 06       	cp.w	r6,0
80008644:	e0 89 00 1c 	brgt	8000867c <_vfprintf_r+0x192c>
80008648:	e0 8f 02 70 	bral	80008b28 <_vfprintf_r+0x1dd8>
8000864c:	2f 08       	sub	r8,-16
8000864e:	95 01       	st.w	r10[0x0],r1
80008650:	fb 48 06 a0 	st.w	sp[1696],r8
80008654:	95 12       	st.w	r10[0x4],r2
80008656:	f6 c8 ff ff 	sub	r8,r11,-1
8000865a:	fb 48 06 9c 	st.w	sp[1692],r8
8000865e:	58 78       	cp.w	r8,7
80008660:	e0 89 00 04 	brgt	80008668 <_vfprintf_r+0x1918>
80008664:	2f 8a       	sub	r10,-8
80008666:	c0 98       	rjmp	80008678 <_vfprintf_r+0x1928>
80008668:	06 9a       	mov	r10,r3
8000866a:	40 4b       	lddsp	r11,sp[0x10]
8000866c:	40 5c       	lddsp	r12,sp[0x14]
8000866e:	f0 1f 00 1e 	mcall	800086e4 <_vfprintf_r+0x1994>
80008672:	e0 81 02 cb 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008676:	0e 9a       	mov	r10,r7
80008678:	21 06       	sub	r6,16
8000867a:	c0 78       	rjmp	80008688 <_vfprintf_r+0x1938>
8000867c:	49 b1       	lddpc	r1,800086e8 <_vfprintf_r+0x1998>
8000867e:	31 02       	mov	r2,16
80008680:	fa c3 f9 68 	sub	r3,sp,-1688
80008684:	fa c7 f9 d0 	sub	r7,sp,-1584
80008688:	fa f8 06 a0 	ld.w	r8,sp[1696]
8000868c:	fa fb 06 9c 	ld.w	r11,sp[1692]
80008690:	49 69       	lddpc	r9,800086e8 <_vfprintf_r+0x1998>
80008692:	59 06       	cp.w	r6,16
80008694:	fe 99 ff dc 	brgt	8000864c <_vfprintf_r+0x18fc>
80008698:	0c 08       	add	r8,r6
8000869a:	95 09       	st.w	r10[0x0],r9
8000869c:	fb 48 06 a0 	st.w	sp[1696],r8
800086a0:	95 16       	st.w	r10[0x4],r6
800086a2:	f6 c8 ff ff 	sub	r8,r11,-1
800086a6:	c6 b9       	rjmp	8000897c <_vfprintf_r+0x1c2c>
800086a8:	fa f9 06 bc 	ld.w	r9,sp[1724]
800086ac:	58 09       	cp.w	r9,0
800086ae:	e0 89 00 9e 	brgt	800087ea <_vfprintf_r+0x1a9a>
800086b2:	fa f8 06 a0 	ld.w	r8,sp[1696]
800086b6:	2f f8       	sub	r8,-1
800086b8:	fb 48 06 a0 	st.w	sp[1696],r8
800086bc:	48 98       	lddpc	r8,800086e0 <_vfprintf_r+0x1990>
800086be:	fa f9 06 9c 	ld.w	r9,sp[1692]
800086c2:	83 08       	st.w	r1[0x0],r8
800086c4:	2f f9       	sub	r9,-1
800086c6:	30 18       	mov	r8,1
800086c8:	fb 49 06 9c 	st.w	sp[1692],r9
800086cc:	83 18       	st.w	r1[0x4],r8
800086ce:	58 79       	cp.w	r9,7
800086d0:	e0 89 00 0e 	brgt	800086ec <_vfprintf_r+0x199c>
800086d4:	e2 ca ff f8 	sub	r10,r1,-8
800086d8:	c1 48       	rjmp	80008700 <_vfprintf_r+0x19b0>
800086da:	00 00       	add	r0,r0
800086dc:	80 00       	ld.sh	r0,r0[0x0]
800086de:	af 18       	ld.d	r8,--r7
800086e0:	80 00       	ld.sh	r0,r0[0x0]
800086e2:	bc 38       	st.h	lr[0x6],r8
800086e4:	80 00       	ld.sh	r0,r0[0x0]
800086e6:	6d 30       	ld.w	r0,r6[0x4c]
800086e8:	80 00       	ld.sh	r0,r0[0x0]
800086ea:	bc 3c       	st.h	lr[0x6],r12
800086ec:	fa ca f9 68 	sub	r10,sp,-1688
800086f0:	40 4b       	lddsp	r11,sp[0x10]
800086f2:	40 5c       	lddsp	r12,sp[0x14]
800086f4:	f0 1f 00 6c 	mcall	800088a4 <_vfprintf_r+0x1b54>
800086f8:	e0 81 02 88 	brne	80008c08 <_vfprintf_r+0x1eb8>
800086fc:	fa ca f9 d0 	sub	r10,sp,-1584
80008700:	fa f8 06 bc 	ld.w	r8,sp[1724]
80008704:	58 08       	cp.w	r8,0
80008706:	c0 91       	brne	80008718 <_vfprintf_r+0x19c8>
80008708:	41 0b       	lddsp	r11,sp[0x40]
8000870a:	58 0b       	cp.w	r11,0
8000870c:	c0 61       	brne	80008718 <_vfprintf_r+0x19c8>
8000870e:	40 99       	lddsp	r9,sp[0x24]
80008710:	ed b9 00 00 	bld	r9,0x0
80008714:	e0 81 02 0a 	brne	80008b28 <_vfprintf_r+0x1dd8>
80008718:	40 d8       	lddsp	r8,sp[0x34]
8000871a:	95 08       	st.w	r10[0x0],r8
8000871c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008720:	2f f8       	sub	r8,-1
80008722:	30 19       	mov	r9,1
80008724:	fb 48 06 a0 	st.w	sp[1696],r8
80008728:	95 19       	st.w	r10[0x4],r9
8000872a:	fa f8 06 9c 	ld.w	r8,sp[1692]
8000872e:	2f f8       	sub	r8,-1
80008730:	fb 48 06 9c 	st.w	sp[1692],r8
80008734:	58 78       	cp.w	r8,7
80008736:	e0 89 00 04 	brgt	8000873e <_vfprintf_r+0x19ee>
8000873a:	2f 8a       	sub	r10,-8
8000873c:	c0 b8       	rjmp	80008752 <_vfprintf_r+0x1a02>
8000873e:	fa ca f9 68 	sub	r10,sp,-1688
80008742:	40 4b       	lddsp	r11,sp[0x10]
80008744:	40 5c       	lddsp	r12,sp[0x14]
80008746:	f0 1f 00 58 	mcall	800088a4 <_vfprintf_r+0x1b54>
8000874a:	e0 81 02 5f 	brne	80008c08 <_vfprintf_r+0x1eb8>
8000874e:	fa ca f9 d0 	sub	r10,sp,-1584
80008752:	fa f8 06 bc 	ld.w	r8,sp[1724]
80008756:	f0 06 11 00 	rsub	r6,r8,0
8000875a:	58 06       	cp.w	r6,0
8000875c:	e0 89 00 1c 	brgt	80008794 <_vfprintf_r+0x1a44>
80008760:	c3 f8       	rjmp	800087de <_vfprintf_r+0x1a8e>
80008762:	2f 08       	sub	r8,-16
80008764:	95 11       	st.w	r10[0x4],r1
80008766:	fb 48 06 a0 	st.w	sp[1696],r8
8000876a:	f6 c8 ff ff 	sub	r8,r11,-1
8000876e:	4c fb       	lddpc	r11,800088a8 <_vfprintf_r+0x1b58>
80008770:	fb 48 06 9c 	st.w	sp[1692],r8
80008774:	95 0b       	st.w	r10[0x0],r11
80008776:	58 78       	cp.w	r8,7
80008778:	e0 89 00 04 	brgt	80008780 <_vfprintf_r+0x1a30>
8000877c:	2f 8a       	sub	r10,-8
8000877e:	c0 98       	rjmp	80008790 <_vfprintf_r+0x1a40>
80008780:	04 9a       	mov	r10,r2
80008782:	40 4b       	lddsp	r11,sp[0x10]
80008784:	40 5c       	lddsp	r12,sp[0x14]
80008786:	f0 1f 00 48 	mcall	800088a4 <_vfprintf_r+0x1b54>
8000878a:	e0 81 02 3f 	brne	80008c08 <_vfprintf_r+0x1eb8>
8000878e:	0e 9a       	mov	r10,r7
80008790:	21 06       	sub	r6,16
80008792:	c0 68       	rjmp	8000879e <_vfprintf_r+0x1a4e>
80008794:	31 01       	mov	r1,16
80008796:	fa c2 f9 68 	sub	r2,sp,-1688
8000879a:	fa c7 f9 d0 	sub	r7,sp,-1584
8000879e:	fa f8 06 a0 	ld.w	r8,sp[1696]
800087a2:	fa fb 06 9c 	ld.w	r11,sp[1692]
800087a6:	4c 19       	lddpc	r9,800088a8 <_vfprintf_r+0x1b58>
800087a8:	59 06       	cp.w	r6,16
800087aa:	fe 99 ff dc 	brgt	80008762 <_vfprintf_r+0x1a12>
800087ae:	0c 08       	add	r8,r6
800087b0:	95 09       	st.w	r10[0x0],r9
800087b2:	fb 48 06 a0 	st.w	sp[1696],r8
800087b6:	95 16       	st.w	r10[0x4],r6
800087b8:	f6 c8 ff ff 	sub	r8,r11,-1
800087bc:	fb 48 06 9c 	st.w	sp[1692],r8
800087c0:	58 78       	cp.w	r8,7
800087c2:	e0 89 00 04 	brgt	800087ca <_vfprintf_r+0x1a7a>
800087c6:	2f 8a       	sub	r10,-8
800087c8:	c0 b8       	rjmp	800087de <_vfprintf_r+0x1a8e>
800087ca:	fa ca f9 68 	sub	r10,sp,-1688
800087ce:	40 4b       	lddsp	r11,sp[0x10]
800087d0:	40 5c       	lddsp	r12,sp[0x14]
800087d2:	f0 1f 00 35 	mcall	800088a4 <_vfprintf_r+0x1b54>
800087d6:	e0 81 02 19 	brne	80008c08 <_vfprintf_r+0x1eb8>
800087da:	fa ca f9 d0 	sub	r10,sp,-1584
800087de:	41 09       	lddsp	r9,sp[0x40]
800087e0:	95 03       	st.w	r10[0x0],r3
800087e2:	95 19       	st.w	r10[0x4],r9
800087e4:	fa f8 06 a0 	ld.w	r8,sp[1696]
800087e8:	cc 48       	rjmp	80008970 <_vfprintf_r+0x1c20>
800087ea:	fa f8 06 a0 	ld.w	r8,sp[1696]
800087ee:	fa fb 06 9c 	ld.w	r11,sp[1692]
800087f2:	41 0a       	lddsp	r10,sp[0x40]
800087f4:	14 39       	cp.w	r9,r10
800087f6:	c7 95       	brlt	800088e8 <_vfprintf_r+0x1b98>
800087f8:	14 08       	add	r8,r10
800087fa:	83 03       	st.w	r1[0x0],r3
800087fc:	fb 48 06 a0 	st.w	sp[1696],r8
80008800:	83 1a       	st.w	r1[0x4],r10
80008802:	f6 c8 ff ff 	sub	r8,r11,-1
80008806:	fb 48 06 9c 	st.w	sp[1692],r8
8000880a:	58 78       	cp.w	r8,7
8000880c:	e0 89 00 05 	brgt	80008816 <_vfprintf_r+0x1ac6>
80008810:	e2 ca ff f8 	sub	r10,r1,-8
80008814:	c0 b8       	rjmp	8000882a <_vfprintf_r+0x1ada>
80008816:	fa ca f9 68 	sub	r10,sp,-1688
8000881a:	40 4b       	lddsp	r11,sp[0x10]
8000881c:	40 5c       	lddsp	r12,sp[0x14]
8000881e:	f0 1f 00 22 	mcall	800088a4 <_vfprintf_r+0x1b54>
80008822:	e0 81 01 f3 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008826:	fa ca f9 d0 	sub	r10,sp,-1584
8000882a:	fa f8 06 bc 	ld.w	r8,sp[1724]
8000882e:	41 09       	lddsp	r9,sp[0x40]
80008830:	f0 09 01 06 	sub	r6,r8,r9
80008834:	58 06       	cp.w	r6,0
80008836:	e0 89 00 1b 	brgt	8000886c <_vfprintf_r+0x1b1c>
8000883a:	c4 38       	rjmp	800088c0 <_vfprintf_r+0x1b70>
8000883c:	2f 08       	sub	r8,-16
8000883e:	95 01       	st.w	r10[0x0],r1
80008840:	fb 48 06 a0 	st.w	sp[1696],r8
80008844:	95 12       	st.w	r10[0x4],r2
80008846:	f6 c8 ff ff 	sub	r8,r11,-1
8000884a:	fb 48 06 9c 	st.w	sp[1692],r8
8000884e:	58 78       	cp.w	r8,7
80008850:	e0 89 00 04 	brgt	80008858 <_vfprintf_r+0x1b08>
80008854:	2f 8a       	sub	r10,-8
80008856:	c0 98       	rjmp	80008868 <_vfprintf_r+0x1b18>
80008858:	06 9a       	mov	r10,r3
8000885a:	40 4b       	lddsp	r11,sp[0x10]
8000885c:	40 5c       	lddsp	r12,sp[0x14]
8000885e:	f0 1f 00 12 	mcall	800088a4 <_vfprintf_r+0x1b54>
80008862:	e0 81 01 d3 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008866:	0e 9a       	mov	r10,r7
80008868:	21 06       	sub	r6,16
8000886a:	c0 78       	rjmp	80008878 <_vfprintf_r+0x1b28>
8000886c:	48 f1       	lddpc	r1,800088a8 <_vfprintf_r+0x1b58>
8000886e:	31 02       	mov	r2,16
80008870:	fa c3 f9 68 	sub	r3,sp,-1688
80008874:	fa c7 f9 d0 	sub	r7,sp,-1584
80008878:	fa f8 06 a0 	ld.w	r8,sp[1696]
8000887c:	fa fb 06 9c 	ld.w	r11,sp[1692]
80008880:	48 a9       	lddpc	r9,800088a8 <_vfprintf_r+0x1b58>
80008882:	59 06       	cp.w	r6,16
80008884:	fe 99 ff dc 	brgt	8000883c <_vfprintf_r+0x1aec>
80008888:	0c 08       	add	r8,r6
8000888a:	95 09       	st.w	r10[0x0],r9
8000888c:	fb 48 06 a0 	st.w	sp[1696],r8
80008890:	95 16       	st.w	r10[0x4],r6
80008892:	f6 c8 ff ff 	sub	r8,r11,-1
80008896:	fb 48 06 9c 	st.w	sp[1692],r8
8000889a:	58 78       	cp.w	r8,7
8000889c:	e0 89 00 08 	brgt	800088ac <_vfprintf_r+0x1b5c>
800088a0:	2f 8a       	sub	r10,-8
800088a2:	c0 f8       	rjmp	800088c0 <_vfprintf_r+0x1b70>
800088a4:	80 00       	ld.sh	r0,r0[0x0]
800088a6:	6d 30       	ld.w	r0,r6[0x4c]
800088a8:	80 00       	ld.sh	r0,r0[0x0]
800088aa:	bc 3c       	st.h	lr[0x6],r12
800088ac:	fa ca f9 68 	sub	r10,sp,-1688
800088b0:	40 4b       	lddsp	r11,sp[0x10]
800088b2:	40 5c       	lddsp	r12,sp[0x14]
800088b4:	f0 1f 00 ae 	mcall	80008b6c <_vfprintf_r+0x1e1c>
800088b8:	e0 81 01 a8 	brne	80008c08 <_vfprintf_r+0x1eb8>
800088bc:	fa ca f9 d0 	sub	r10,sp,-1584
800088c0:	40 9b       	lddsp	r11,sp[0x24]
800088c2:	ed bb 00 00 	bld	r11,0x0
800088c6:	e0 81 01 31 	brne	80008b28 <_vfprintf_r+0x1dd8>
800088ca:	40 d9       	lddsp	r9,sp[0x34]
800088cc:	fa f8 06 a0 	ld.w	r8,sp[1696]
800088d0:	2f f8       	sub	r8,-1
800088d2:	95 09       	st.w	r10[0x0],r9
800088d4:	fb 48 06 a0 	st.w	sp[1696],r8
800088d8:	30 19       	mov	r9,1
800088da:	fa f8 06 9c 	ld.w	r8,sp[1692]
800088de:	95 19       	st.w	r10[0x4],r9
800088e0:	2f f8       	sub	r8,-1
800088e2:	fb 48 06 9c 	st.w	sp[1692],r8
800088e6:	c4 d8       	rjmp	80008980 <_vfprintf_r+0x1c30>
800088e8:	12 08       	add	r8,r9
800088ea:	83 03       	st.w	r1[0x0],r3
800088ec:	fb 48 06 a0 	st.w	sp[1696],r8
800088f0:	83 19       	st.w	r1[0x4],r9
800088f2:	f6 c8 ff ff 	sub	r8,r11,-1
800088f6:	fb 48 06 9c 	st.w	sp[1692],r8
800088fa:	58 78       	cp.w	r8,7
800088fc:	e0 89 00 05 	brgt	80008906 <_vfprintf_r+0x1bb6>
80008900:	e2 ca ff f8 	sub	r10,r1,-8
80008904:	c0 b8       	rjmp	8000891a <_vfprintf_r+0x1bca>
80008906:	fa ca f9 68 	sub	r10,sp,-1688
8000890a:	40 4b       	lddsp	r11,sp[0x10]
8000890c:	40 5c       	lddsp	r12,sp[0x14]
8000890e:	f0 1f 00 98 	mcall	80008b6c <_vfprintf_r+0x1e1c>
80008912:	e0 81 01 7b 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008916:	fa ca f9 d0 	sub	r10,sp,-1584
8000891a:	40 d8       	lddsp	r8,sp[0x34]
8000891c:	95 08       	st.w	r10[0x0],r8
8000891e:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008922:	2f f8       	sub	r8,-1
80008924:	fa f9 06 9c 	ld.w	r9,sp[1692]
80008928:	fb 48 06 a0 	st.w	sp[1696],r8
8000892c:	2f f9       	sub	r9,-1
8000892e:	30 18       	mov	r8,1
80008930:	fb 49 06 9c 	st.w	sp[1692],r9
80008934:	95 18       	st.w	r10[0x4],r8
80008936:	fa f7 06 bc 	ld.w	r7,sp[1724]
8000893a:	58 79       	cp.w	r9,7
8000893c:	e0 89 00 04 	brgt	80008944 <_vfprintf_r+0x1bf4>
80008940:	2f 8a       	sub	r10,-8
80008942:	c0 b8       	rjmp	80008958 <_vfprintf_r+0x1c08>
80008944:	fa ca f9 68 	sub	r10,sp,-1688
80008948:	40 4b       	lddsp	r11,sp[0x10]
8000894a:	40 5c       	lddsp	r12,sp[0x14]
8000894c:	f0 1f 00 88 	mcall	80008b6c <_vfprintf_r+0x1e1c>
80008950:	e0 81 01 5c 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008954:	fa ca f9 d0 	sub	r10,sp,-1584
80008958:	fa f9 06 bc 	ld.w	r9,sp[1724]
8000895c:	e6 07 00 08 	add	r8,r3,r7
80008960:	41 0b       	lddsp	r11,sp[0x40]
80008962:	95 08       	st.w	r10[0x0],r8
80008964:	12 1b       	sub	r11,r9
80008966:	fa f8 06 a0 	ld.w	r8,sp[1696]
8000896a:	95 1b       	st.w	r10[0x4],r11
8000896c:	12 18       	sub	r8,r9
8000896e:	41 09       	lddsp	r9,sp[0x40]
80008970:	12 08       	add	r8,r9
80008972:	fb 48 06 a0 	st.w	sp[1696],r8
80008976:	fa f8 06 9c 	ld.w	r8,sp[1692]
8000897a:	2f f8       	sub	r8,-1
8000897c:	fb 48 06 9c 	st.w	sp[1692],r8
80008980:	58 78       	cp.w	r8,7
80008982:	e0 89 00 ca 	brgt	80008b16 <_vfprintf_r+0x1dc6>
80008986:	2f 8a       	sub	r10,-8
80008988:	cd 08       	rjmp	80008b28 <_vfprintf_r+0x1dd8>
8000898a:	41 08       	lddsp	r8,sp[0x40]
8000898c:	58 18       	cp.w	r8,1
8000898e:	e0 89 00 07 	brgt	8000899c <_vfprintf_r+0x1c4c>
80008992:	40 9b       	lddsp	r11,sp[0x24]
80008994:	ed bb 00 00 	bld	r11,0x0
80008998:	e0 81 00 8d 	brne	80008ab2 <_vfprintf_r+0x1d62>
8000899c:	fa f8 06 a0 	ld.w	r8,sp[1696]
800089a0:	2f f8       	sub	r8,-1
800089a2:	30 19       	mov	r9,1
800089a4:	fb 48 06 a0 	st.w	sp[1696],r8
800089a8:	83 03       	st.w	r1[0x0],r3
800089aa:	fa f8 06 9c 	ld.w	r8,sp[1692]
800089ae:	83 19       	st.w	r1[0x4],r9
800089b0:	2f f8       	sub	r8,-1
800089b2:	fb 48 06 9c 	st.w	sp[1692],r8
800089b6:	58 78       	cp.w	r8,7
800089b8:	e0 89 00 05 	brgt	800089c2 <_vfprintf_r+0x1c72>
800089bc:	e2 ca ff f8 	sub	r10,r1,-8
800089c0:	c0 b8       	rjmp	800089d6 <_vfprintf_r+0x1c86>
800089c2:	fa ca f9 68 	sub	r10,sp,-1688
800089c6:	40 4b       	lddsp	r11,sp[0x10]
800089c8:	40 5c       	lddsp	r12,sp[0x14]
800089ca:	f0 1f 00 69 	mcall	80008b6c <_vfprintf_r+0x1e1c>
800089ce:	e0 81 01 1d 	brne	80008c08 <_vfprintf_r+0x1eb8>
800089d2:	fa ca f9 d0 	sub	r10,sp,-1584
800089d6:	40 d9       	lddsp	r9,sp[0x34]
800089d8:	fa f8 06 a0 	ld.w	r8,sp[1696]
800089dc:	2f f8       	sub	r8,-1
800089de:	95 09       	st.w	r10[0x0],r9
800089e0:	fb 48 06 a0 	st.w	sp[1696],r8
800089e4:	30 19       	mov	r9,1
800089e6:	fa f8 06 9c 	ld.w	r8,sp[1692]
800089ea:	95 19       	st.w	r10[0x4],r9
800089ec:	2f f8       	sub	r8,-1
800089ee:	fb 48 06 9c 	st.w	sp[1692],r8
800089f2:	58 78       	cp.w	r8,7
800089f4:	e0 89 00 05 	brgt	800089fe <_vfprintf_r+0x1cae>
800089f8:	f4 c7 ff f8 	sub	r7,r10,-8
800089fc:	c0 b8       	rjmp	80008a12 <_vfprintf_r+0x1cc2>
800089fe:	fa ca f9 68 	sub	r10,sp,-1688
80008a02:	40 4b       	lddsp	r11,sp[0x10]
80008a04:	40 5c       	lddsp	r12,sp[0x14]
80008a06:	f0 1f 00 5a 	mcall	80008b6c <_vfprintf_r+0x1e1c>
80008a0a:	e0 81 00 ff 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008a0e:	fa c7 f9 d0 	sub	r7,sp,-1584
80008a12:	30 09       	mov	r9,0
80008a14:	30 08       	mov	r8,0
80008a16:	40 1b       	lddsp	r11,sp[0x4]
80008a18:	40 0a       	lddsp	r10,sp[0x0]
80008a1a:	f0 1f 00 56 	mcall	80008b70 <_vfprintf_r+0x1e20>
80008a1e:	41 09       	lddsp	r9,sp[0x40]
80008a20:	20 19       	sub	r9,1
80008a22:	58 0c       	cp.w	r12,0
80008a24:	c0 e1       	brne	80008a40 <_vfprintf_r+0x1cf0>
80008a26:	e6 c8 ff ff 	sub	r8,r3,-1
80008a2a:	8f 08       	st.w	r7[0x0],r8
80008a2c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008a30:	12 08       	add	r8,r9
80008a32:	8f 19       	st.w	r7[0x4],r9
80008a34:	fb 48 06 a0 	st.w	sp[1696],r8
80008a38:	fa f8 06 9c 	ld.w	r8,sp[1692]
80008a3c:	2f f8       	sub	r8,-1
80008a3e:	c3 38       	rjmp	80008aa4 <_vfprintf_r+0x1d54>
80008a40:	12 96       	mov	r6,r9
80008a42:	58 09       	cp.w	r9,0
80008a44:	e0 89 00 1c 	brgt	80008a7c <_vfprintf_r+0x1d2c>
80008a48:	c5 28       	rjmp	80008aec <_vfprintf_r+0x1d9c>
80008a4a:	2f 08       	sub	r8,-16
80008a4c:	8f 11       	st.w	r7[0x4],r1
80008a4e:	fb 48 06 a0 	st.w	sp[1696],r8
80008a52:	f6 c8 ff ff 	sub	r8,r11,-1
80008a56:	4c 8b       	lddpc	r11,80008b74 <_vfprintf_r+0x1e24>
80008a58:	fb 48 06 9c 	st.w	sp[1692],r8
80008a5c:	8f 0b       	st.w	r7[0x0],r11
80008a5e:	58 78       	cp.w	r8,7
80008a60:	e0 89 00 04 	brgt	80008a68 <_vfprintf_r+0x1d18>
80008a64:	2f 87       	sub	r7,-8
80008a66:	c0 98       	rjmp	80008a78 <_vfprintf_r+0x1d28>
80008a68:	04 9a       	mov	r10,r2
80008a6a:	40 4b       	lddsp	r11,sp[0x10]
80008a6c:	40 5c       	lddsp	r12,sp[0x14]
80008a6e:	f0 1f 00 40 	mcall	80008b6c <_vfprintf_r+0x1e1c>
80008a72:	e0 81 00 cb 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008a76:	06 97       	mov	r7,r3
80008a78:	21 06       	sub	r6,16
80008a7a:	c0 68       	rjmp	80008a86 <_vfprintf_r+0x1d36>
80008a7c:	31 01       	mov	r1,16
80008a7e:	fa c2 f9 68 	sub	r2,sp,-1688
80008a82:	fa c3 f9 d0 	sub	r3,sp,-1584
80008a86:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008a8a:	fa fb 06 9c 	ld.w	r11,sp[1692]
80008a8e:	4b a9       	lddpc	r9,80008b74 <_vfprintf_r+0x1e24>
80008a90:	59 06       	cp.w	r6,16
80008a92:	fe 99 ff dc 	brgt	80008a4a <_vfprintf_r+0x1cfa>
80008a96:	0c 08       	add	r8,r6
80008a98:	8f 09       	st.w	r7[0x0],r9
80008a9a:	fb 48 06 a0 	st.w	sp[1696],r8
80008a9e:	8f 16       	st.w	r7[0x4],r6
80008aa0:	f6 c8 ff ff 	sub	r8,r11,-1
80008aa4:	fb 48 06 9c 	st.w	sp[1692],r8
80008aa8:	58 78       	cp.w	r8,7
80008aaa:	e0 89 00 17 	brgt	80008ad8 <_vfprintf_r+0x1d88>
80008aae:	2f 87       	sub	r7,-8
80008ab0:	c1 e8       	rjmp	80008aec <_vfprintf_r+0x1d9c>
80008ab2:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008ab6:	2f f8       	sub	r8,-1
80008ab8:	30 19       	mov	r9,1
80008aba:	fb 48 06 a0 	st.w	sp[1696],r8
80008abe:	83 03       	st.w	r1[0x0],r3
80008ac0:	fa f8 06 9c 	ld.w	r8,sp[1692]
80008ac4:	83 19       	st.w	r1[0x4],r9
80008ac6:	2f f8       	sub	r8,-1
80008ac8:	fb 48 06 9c 	st.w	sp[1692],r8
80008acc:	58 78       	cp.w	r8,7
80008ace:	e0 89 00 05 	brgt	80008ad8 <_vfprintf_r+0x1d88>
80008ad2:	e2 c7 ff f8 	sub	r7,r1,-8
80008ad6:	c0 b8       	rjmp	80008aec <_vfprintf_r+0x1d9c>
80008ad8:	fa ca f9 68 	sub	r10,sp,-1688
80008adc:	40 4b       	lddsp	r11,sp[0x10]
80008ade:	40 5c       	lddsp	r12,sp[0x14]
80008ae0:	f0 1f 00 23 	mcall	80008b6c <_vfprintf_r+0x1e1c>
80008ae4:	e0 81 00 92 	brne	80008c08 <_vfprintf_r+0x1eb8>
80008ae8:	fa c7 f9 d0 	sub	r7,sp,-1584
80008aec:	40 fa       	lddsp	r10,sp[0x3c]
80008aee:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008af2:	14 08       	add	r8,r10
80008af4:	fa c9 f9 54 	sub	r9,sp,-1708
80008af8:	fb 48 06 a0 	st.w	sp[1696],r8
80008afc:	8f 1a       	st.w	r7[0x4],r10
80008afe:	fa f8 06 9c 	ld.w	r8,sp[1692]
80008b02:	8f 09       	st.w	r7[0x0],r9
80008b04:	2f f8       	sub	r8,-1
80008b06:	fb 48 06 9c 	st.w	sp[1692],r8
80008b0a:	58 78       	cp.w	r8,7
80008b0c:	e0 89 00 05 	brgt	80008b16 <_vfprintf_r+0x1dc6>
80008b10:	ee ca ff f8 	sub	r10,r7,-8
80008b14:	c0 a8       	rjmp	80008b28 <_vfprintf_r+0x1dd8>
80008b16:	fa ca f9 68 	sub	r10,sp,-1688
80008b1a:	40 4b       	lddsp	r11,sp[0x10]
80008b1c:	40 5c       	lddsp	r12,sp[0x14]
80008b1e:	f0 1f 00 14 	mcall	80008b6c <_vfprintf_r+0x1e1c>
80008b22:	c7 31       	brne	80008c08 <_vfprintf_r+0x1eb8>
80008b24:	fa ca f9 d0 	sub	r10,sp,-1584
80008b28:	40 99       	lddsp	r9,sp[0x24]
80008b2a:	ed b9 00 02 	bld	r9,0x2
80008b2e:	c4 61       	brne	80008bba <_vfprintf_r+0x1e6a>
80008b30:	40 b6       	lddsp	r6,sp[0x2c]
80008b32:	41 18       	lddsp	r8,sp[0x44]
80008b34:	10 16       	sub	r6,r8
80008b36:	58 06       	cp.w	r6,0
80008b38:	e0 89 00 20 	brgt	80008b78 <_vfprintf_r+0x1e28>
80008b3c:	c3 f8       	rjmp	80008bba <_vfprintf_r+0x1e6a>
80008b3e:	2f 08       	sub	r8,-16
80008b40:	95 01       	st.w	r10[0x0],r1
80008b42:	fb 48 06 a0 	st.w	sp[1696],r8
80008b46:	95 12       	st.w	r10[0x4],r2
80008b48:	f6 c8 ff ff 	sub	r8,r11,-1
80008b4c:	fb 48 06 9c 	st.w	sp[1692],r8
80008b50:	58 78       	cp.w	r8,7
80008b52:	e0 89 00 04 	brgt	80008b5a <_vfprintf_r+0x1e0a>
80008b56:	2f 8a       	sub	r10,-8
80008b58:	c0 88       	rjmp	80008b68 <_vfprintf_r+0x1e18>
80008b5a:	06 9a       	mov	r10,r3
80008b5c:	40 4b       	lddsp	r11,sp[0x10]
80008b5e:	40 5c       	lddsp	r12,sp[0x14]
80008b60:	f0 1f 00 03 	mcall	80008b6c <_vfprintf_r+0x1e1c>
80008b64:	c5 21       	brne	80008c08 <_vfprintf_r+0x1eb8>
80008b66:	0e 9a       	mov	r10,r7
80008b68:	21 06       	sub	r6,16
80008b6a:	c0 d8       	rjmp	80008b84 <_vfprintf_r+0x1e34>
80008b6c:	80 00       	ld.sh	r0,r0[0x0]
80008b6e:	6d 30       	ld.w	r0,r6[0x4c]
80008b70:	80 00       	ld.sh	r0,r0[0x0]
80008b72:	af 18       	ld.d	r8,--r7
80008b74:	80 00       	ld.sh	r0,r0[0x0]
80008b76:	bc 3c       	st.h	lr[0x6],r12
80008b78:	4a a1       	lddpc	r1,80008c20 <_vfprintf_r+0x1ed0>
80008b7a:	31 02       	mov	r2,16
80008b7c:	fa c3 f9 68 	sub	r3,sp,-1688
80008b80:	fa c7 f9 d0 	sub	r7,sp,-1584
80008b84:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008b88:	fa fb 06 9c 	ld.w	r11,sp[1692]
80008b8c:	4a 59       	lddpc	r9,80008c20 <_vfprintf_r+0x1ed0>
80008b8e:	59 06       	cp.w	r6,16
80008b90:	fe 99 ff d7 	brgt	80008b3e <_vfprintf_r+0x1dee>
80008b94:	0c 08       	add	r8,r6
80008b96:	95 09       	st.w	r10[0x0],r9
80008b98:	fb 48 06 a0 	st.w	sp[1696],r8
80008b9c:	95 16       	st.w	r10[0x4],r6
80008b9e:	f6 c8 ff ff 	sub	r8,r11,-1
80008ba2:	fb 48 06 9c 	st.w	sp[1692],r8
80008ba6:	58 78       	cp.w	r8,7
80008ba8:	e0 8a 00 09 	brle	80008bba <_vfprintf_r+0x1e6a>
80008bac:	fa ca f9 68 	sub	r10,sp,-1688
80008bb0:	40 4b       	lddsp	r11,sp[0x10]
80008bb2:	40 5c       	lddsp	r12,sp[0x14]
80008bb4:	f0 1f 00 1c 	mcall	80008c24 <_vfprintf_r+0x1ed4>
80008bb8:	c2 81       	brne	80008c08 <_vfprintf_r+0x1eb8>
80008bba:	40 a9       	lddsp	r9,sp[0x28]
80008bbc:	41 1b       	lddsp	r11,sp[0x44]
80008bbe:	40 ba       	lddsp	r10,sp[0x2c]
80008bc0:	f6 0a 0c 48 	max	r8,r11,r10
80008bc4:	10 09       	add	r9,r8
80008bc6:	50 a9       	stdsp	sp[0x28],r9
80008bc8:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008bcc:	58 08       	cp.w	r8,0
80008bce:	c0 80       	breq	80008bde <_vfprintf_r+0x1e8e>
80008bd0:	fa ca f9 68 	sub	r10,sp,-1688
80008bd4:	40 4b       	lddsp	r11,sp[0x10]
80008bd6:	40 5c       	lddsp	r12,sp[0x14]
80008bd8:	f0 1f 00 13 	mcall	80008c24 <_vfprintf_r+0x1ed4>
80008bdc:	c1 61       	brne	80008c08 <_vfprintf_r+0x1eb8>
80008bde:	30 08       	mov	r8,0
80008be0:	fa c1 f9 d0 	sub	r1,sp,-1584
80008be4:	fb 48 06 9c 	st.w	sp[1692],r8
80008be8:	fe 9f f1 4d 	bral	80006e82 <_vfprintf_r+0x132>
80008bec:	fa f8 06 a0 	ld.w	r8,sp[1696]
80008bf0:	58 08       	cp.w	r8,0
80008bf2:	c0 80       	breq	80008c02 <_vfprintf_r+0x1eb2>
80008bf4:	40 5c       	lddsp	r12,sp[0x14]
80008bf6:	fa ca f9 68 	sub	r10,sp,-1688
80008bfa:	40 4b       	lddsp	r11,sp[0x10]
80008bfc:	f0 1f 00 0a 	mcall	80008c24 <_vfprintf_r+0x1ed4>
80008c00:	c0 41       	brne	80008c08 <_vfprintf_r+0x1eb8>
80008c02:	30 08       	mov	r8,0
80008c04:	fb 48 06 9c 	st.w	sp[1692],r8
80008c08:	40 4b       	lddsp	r11,sp[0x10]
80008c0a:	96 68       	ld.sh	r8,r11[0xc]
80008c0c:	ed b8 00 06 	bld	r8,0x6
80008c10:	c0 31       	brne	80008c16 <_vfprintf_r+0x1ec6>
80008c12:	3f fa       	mov	r10,-1
80008c14:	50 aa       	stdsp	sp[0x28],r10
80008c16:	40 ac       	lddsp	r12,sp[0x28]
80008c18:	fe 3d f9 34 	sub	sp,-1740
80008c1c:	d8 32       	popm	r0-r7,pc
80008c1e:	00 00       	add	r0,r0
80008c20:	80 00       	ld.sh	r0,r0[0x0]
80008c22:	bb 68       	lsl	r8,0x1a
80008c24:	80 00       	ld.sh	r0,r0[0x0]
80008c26:	6d 30       	ld.w	r0,r6[0x4c]

80008c28 <_write_r>:
80008c28:	d4 21       	pushm	r4-r7,lr
80008c2a:	16 98       	mov	r8,r11
80008c2c:	18 96       	mov	r6,r12
80008c2e:	10 9c       	mov	r12,r8
80008c30:	30 08       	mov	r8,0
80008c32:	14 9b       	mov	r11,r10
80008c34:	48 67       	lddpc	r7,80008c4c <_write_r+0x24>
80008c36:	12 9a       	mov	r10,r9
80008c38:	8f 08       	st.w	r7[0x0],r8
80008c3a:	f0 1f 00 06 	mcall	80008c50 <_write_r+0x28>
80008c3e:	5b fc       	cp.w	r12,-1
80008c40:	c0 51       	brne	80008c4a <_write_r+0x22>
80008c42:	6e 08       	ld.w	r8,r7[0x0]
80008c44:	58 08       	cp.w	r8,0
80008c46:	ed f8 1a 03 	st.wne	r6[0xc],r8
80008c4a:	d8 22       	popm	r4-r7,pc
80008c4c:	00 00       	add	r0,r0
80008c4e:	06 a4       	st.w	r3++,r4
80008c50:	80 00       	ld.sh	r0,r0[0x0]
80008c52:	50 c4       	stdsp	sp[0x30],r4

80008c54 <__swsetup_r>:
80008c54:	d4 21       	pushm	r4-r7,lr
80008c56:	4b 48       	lddpc	r8,80008d24 <__swsetup_r+0xd0>
80008c58:	18 96       	mov	r6,r12
80008c5a:	16 97       	mov	r7,r11
80008c5c:	70 0c       	ld.w	r12,r8[0x0]
80008c5e:	58 0c       	cp.w	r12,0
80008c60:	c0 60       	breq	80008c6c <__swsetup_r+0x18>
80008c62:	78 68       	ld.w	r8,r12[0x18]
80008c64:	58 08       	cp.w	r8,0
80008c66:	c0 31       	brne	80008c6c <__swsetup_r+0x18>
80008c68:	f0 1f 00 30 	mcall	80008d28 <__swsetup_r+0xd4>
80008c6c:	4b 08       	lddpc	r8,80008d2c <__swsetup_r+0xd8>
80008c6e:	10 37       	cp.w	r7,r8
80008c70:	c0 51       	brne	80008c7a <__swsetup_r+0x26>
80008c72:	4a d8       	lddpc	r8,80008d24 <__swsetup_r+0xd0>
80008c74:	70 08       	ld.w	r8,r8[0x0]
80008c76:	70 07       	ld.w	r7,r8[0x0]
80008c78:	c0 e8       	rjmp	80008c94 <__swsetup_r+0x40>
80008c7a:	4a e8       	lddpc	r8,80008d30 <__swsetup_r+0xdc>
80008c7c:	10 37       	cp.w	r7,r8
80008c7e:	c0 51       	brne	80008c88 <__swsetup_r+0x34>
80008c80:	4a 98       	lddpc	r8,80008d24 <__swsetup_r+0xd0>
80008c82:	70 08       	ld.w	r8,r8[0x0]
80008c84:	70 17       	ld.w	r7,r8[0x4]
80008c86:	c0 78       	rjmp	80008c94 <__swsetup_r+0x40>
80008c88:	4a b8       	lddpc	r8,80008d34 <__swsetup_r+0xe0>
80008c8a:	10 37       	cp.w	r7,r8
80008c8c:	c0 41       	brne	80008c94 <__swsetup_r+0x40>
80008c8e:	4a 68       	lddpc	r8,80008d24 <__swsetup_r+0xd0>
80008c90:	70 08       	ld.w	r8,r8[0x0]
80008c92:	70 27       	ld.w	r7,r8[0x8]
80008c94:	8e 69       	ld.sh	r9,r7[0xc]
80008c96:	ed b9 00 03 	bld	r9,0x3
80008c9a:	c1 e0       	breq	80008cd6 <__swsetup_r+0x82>
80008c9c:	ed b9 00 04 	bld	r9,0x4
80008ca0:	c4 01       	brne	80008d20 <__swsetup_r+0xcc>
80008ca2:	ed b9 00 02 	bld	r9,0x2
80008ca6:	c1 51       	brne	80008cd0 <__swsetup_r+0x7c>
80008ca8:	6e db       	ld.w	r11,r7[0x34]
80008caa:	58 0b       	cp.w	r11,0
80008cac:	c0 a0       	breq	80008cc0 <__swsetup_r+0x6c>
80008cae:	ee c8 ff bc 	sub	r8,r7,-68
80008cb2:	10 3b       	cp.w	r11,r8
80008cb4:	c0 40       	breq	80008cbc <__swsetup_r+0x68>
80008cb6:	0c 9c       	mov	r12,r6
80008cb8:	f0 1f 00 20 	mcall	80008d38 <__swsetup_r+0xe4>
80008cbc:	30 08       	mov	r8,0
80008cbe:	8f d8       	st.w	r7[0x34],r8
80008cc0:	8e 68       	ld.sh	r8,r7[0xc]
80008cc2:	e0 18 ff db 	andl	r8,0xffdb
80008cc6:	ae 68       	st.h	r7[0xc],r8
80008cc8:	30 08       	mov	r8,0
80008cca:	8f 18       	st.w	r7[0x4],r8
80008ccc:	6e 48       	ld.w	r8,r7[0x10]
80008cce:	8f 08       	st.w	r7[0x0],r8
80008cd0:	8e 68       	ld.sh	r8,r7[0xc]
80008cd2:	a3 b8       	sbr	r8,0x3
80008cd4:	ae 68       	st.h	r7[0xc],r8
80008cd6:	6e 48       	ld.w	r8,r7[0x10]
80008cd8:	58 08       	cp.w	r8,0
80008cda:	c0 b1       	brne	80008cf0 <__swsetup_r+0x9c>
80008cdc:	8e 68       	ld.sh	r8,r7[0xc]
80008cde:	e2 18 02 80 	andl	r8,0x280,COH
80008ce2:	e0 48 02 00 	cp.w	r8,512
80008ce6:	c0 50       	breq	80008cf0 <__swsetup_r+0x9c>
80008ce8:	0c 9c       	mov	r12,r6
80008cea:	0e 9b       	mov	r11,r7
80008cec:	f0 1f 00 14 	mcall	80008d3c <__swsetup_r+0xe8>
80008cf0:	8e 68       	ld.sh	r8,r7[0xc]
80008cf2:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80008cf6:	c0 70       	breq	80008d04 <__swsetup_r+0xb0>
80008cf8:	30 08       	mov	r8,0
80008cfa:	8f 28       	st.w	r7[0x8],r8
80008cfc:	6e 58       	ld.w	r8,r7[0x14]
80008cfe:	5c 38       	neg	r8
80008d00:	8f 68       	st.w	r7[0x18],r8
80008d02:	c0 88       	rjmp	80008d12 <__swsetup_r+0xbe>
80008d04:	ed b8 00 01 	bld	r8,0x1
80008d08:	f2 08 17 00 	moveq	r8,r9
80008d0c:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80008d10:	8f 28       	st.w	r7[0x8],r8
80008d12:	6e 48       	ld.w	r8,r7[0x10]
80008d14:	58 08       	cp.w	r8,0
80008d16:	c0 61       	brne	80008d22 <__swsetup_r+0xce>
80008d18:	8e 68       	ld.sh	r8,r7[0xc]
80008d1a:	ed b8 00 07 	bld	r8,0x7
80008d1e:	c0 21       	brne	80008d22 <__swsetup_r+0xce>
80008d20:	dc 2a       	popm	r4-r7,pc,r12=-1
80008d22:	d8 2a       	popm	r4-r7,pc,r12=0
80008d24:	00 00       	add	r0,r0
80008d26:	01 30       	ld.ub	r0,r0++
80008d28:	80 00       	ld.sh	r0,r0[0x0]
80008d2a:	66 14       	ld.w	r4,r3[0x4]
80008d2c:	80 00       	ld.sh	r0,r0[0x0]
80008d2e:	b8 fc       	st.b	r12[0x7],r12
80008d30:	80 00       	ld.sh	r0,r0[0x0]
80008d32:	b9 1c       	ld.d	r12,--r12
80008d34:	80 00       	ld.sh	r0,r0[0x0]
80008d36:	b9 3c       	mul	r12,r12
80008d38:	80 00       	ld.sh	r0,r0[0x0]
80008d3a:	67 6c       	ld.w	r12,r3[0x58]
80008d3c:	80 00       	ld.sh	r0,r0[0x0]
80008d3e:	a0 04       	st.h	r0[0x0],r4

80008d40 <_close_r>:
80008d40:	d4 21       	pushm	r4-r7,lr
80008d42:	30 08       	mov	r8,0
80008d44:	18 96       	mov	r6,r12
80008d46:	48 77       	lddpc	r7,80008d60 <_close_r+0x20>
80008d48:	16 9c       	mov	r12,r11
80008d4a:	8f 08       	st.w	r7[0x0],r8
80008d4c:	f0 1f 00 06 	mcall	80008d64 <_close_r+0x24>
80008d50:	5b fc       	cp.w	r12,-1
80008d52:	c0 51       	brne	80008d5c <_close_r+0x1c>
80008d54:	6e 08       	ld.w	r8,r7[0x0]
80008d56:	58 08       	cp.w	r8,0
80008d58:	ed f8 1a 03 	st.wne	r6[0xc],r8
80008d5c:	d8 22       	popm	r4-r7,pc
80008d5e:	00 00       	add	r0,r0
80008d60:	00 00       	add	r0,r0
80008d62:	06 a4       	st.w	r3++,r4
80008d64:	80 00       	ld.sh	r0,r0[0x0]
80008d66:	4f e4       	lddpc	r4,80008f5c <_dtoa_r+0xcc>

80008d68 <quorem>:
80008d68:	d4 31       	pushm	r0-r7,lr
80008d6a:	20 2d       	sub	sp,8
80008d6c:	16 93       	mov	r3,r11
80008d6e:	18 95       	mov	r5,r12
80008d70:	78 48       	ld.w	r8,r12[0x10]
80008d72:	76 4b       	ld.w	r11,r11[0x10]
80008d74:	16 38       	cp.w	r8,r11
80008d76:	c0 34       	brge	80008d7c <quorem+0x14>
80008d78:	30 0c       	mov	r12,0
80008d7a:	c8 68       	rjmp	80008e86 <quorem+0x11e>
80008d7c:	f6 ca ff fc 	sub	r10,r11,-4
80008d80:	f8 0a 03 2c 	ld.w	r12,r12[r10<<0x2]
80008d84:	e6 0a 03 29 	ld.w	r9,r3[r10<<0x2]
80008d88:	50 0c       	stdsp	sp[0x0],r12
80008d8a:	e6 0a 00 2a 	add	r10,r3,r10<<0x2
80008d8e:	50 1a       	stdsp	sp[0x4],r10
80008d90:	2f f9       	sub	r9,-1
80008d92:	e6 c1 ff ec 	sub	r1,r3,-20
80008d96:	f8 09 0d 08 	divu	r8,r12,r9
80008d9a:	f6 c6 00 01 	sub	r6,r11,1
80008d9e:	ea c0 ff ec 	sub	r0,r5,-20
80008da2:	10 92       	mov	r2,r8
80008da4:	58 08       	cp.w	r8,0
80008da6:	c3 d0       	breq	80008e20 <quorem+0xb8>
80008da8:	30 07       	mov	r7,0
80008daa:	00 9e       	mov	lr,r0
80008dac:	02 94       	mov	r4,r1
80008dae:	0e 9c       	mov	r12,r7
80008db0:	09 08       	ld.w	r8,r4++
80008db2:	f0 0a 16 10 	lsr	r10,r8,0x10
80008db6:	e4 0a 02 4a 	mul	r10,r2,r10
80008dba:	7c 09       	ld.w	r9,lr[0x0]
80008dbc:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008dc0:	f2 0b 16 10 	lsr	r11,r9,0x10
80008dc4:	e4 08 02 48 	mul	r8,r2,r8
80008dc8:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008dcc:	f8 08 00 08 	add	r8,r12,r8
80008dd0:	ee 09 00 09 	add	r9,r7,r9
80008dd4:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80008dd8:	b1 88       	lsr	r8,0x10
80008dda:	18 19       	sub	r9,r12
80008ddc:	14 08       	add	r8,r10
80008dde:	bc 19       	st.h	lr[0x2],r9
80008de0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80008de4:	b1 49       	asr	r9,0x10
80008de6:	14 1b       	sub	r11,r10
80008de8:	12 0b       	add	r11,r9
80008dea:	bc 0b       	st.h	lr[0x0],r11
80008dec:	f0 0c 16 10 	lsr	r12,r8,0x10
80008df0:	2f ce       	sub	lr,-4
80008df2:	f6 07 14 10 	asr	r7,r11,0x10
80008df6:	40 18       	lddsp	r8,sp[0x4]
80008df8:	10 34       	cp.w	r4,r8
80008dfa:	fe 98 ff db 	brls	80008db0 <quorem+0x48>
80008dfe:	40 0c       	lddsp	r12,sp[0x0]
80008e00:	58 0c       	cp.w	r12,0
80008e02:	c0 f1       	brne	80008e20 <quorem+0xb8>
80008e04:	ec c8 ff fb 	sub	r8,r6,-5
80008e08:	ea 08 00 29 	add	r9,r5,r8<<0x2
80008e0c:	c0 28       	rjmp	80008e10 <quorem+0xa8>
80008e0e:	20 16       	sub	r6,1
80008e10:	20 49       	sub	r9,4
80008e12:	00 39       	cp.w	r9,r0
80008e14:	e0 88 00 05 	brls	80008e1e <quorem+0xb6>
80008e18:	72 08       	ld.w	r8,r9[0x0]
80008e1a:	58 08       	cp.w	r8,0
80008e1c:	cf 90       	breq	80008e0e <quorem+0xa6>
80008e1e:	8b 46       	st.w	r5[0x10],r6
80008e20:	06 9b       	mov	r11,r3
80008e22:	0a 9c       	mov	r12,r5
80008e24:	f0 1f 00 1a 	mcall	80008e8c <quorem+0x124>
80008e28:	c2 e5       	brlt	80008e84 <quorem+0x11c>
80008e2a:	2f f2       	sub	r2,-1
80008e2c:	00 9c       	mov	r12,r0
80008e2e:	30 0e       	mov	lr,0
80008e30:	78 08       	ld.w	r8,r12[0x0]
80008e32:	03 09       	ld.w	r9,r1++
80008e34:	f0 0b 16 10 	lsr	r11,r8,0x10
80008e38:	f2 0a 16 10 	lsr	r10,r9,0x10
80008e3c:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008e40:	14 1b       	sub	r11,r10
80008e42:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008e46:	12 18       	sub	r8,r9
80008e48:	1c 08       	add	r8,lr
80008e4a:	b8 18       	st.h	r12[0x2],r8
80008e4c:	b1 48       	asr	r8,0x10
80008e4e:	10 0b       	add	r11,r8
80008e50:	b8 0b       	st.h	r12[0x0],r11
80008e52:	f6 0e 14 10 	asr	lr,r11,0x10
80008e56:	2f cc       	sub	r12,-4
80008e58:	40 18       	lddsp	r8,sp[0x4]
80008e5a:	10 31       	cp.w	r1,r8
80008e5c:	fe 98 ff ea 	brls	80008e30 <quorem+0xc8>
80008e60:	ec c9 ff fb 	sub	r9,r6,-5
80008e64:	ea 09 03 28 	ld.w	r8,r5[r9<<0x2]
80008e68:	58 08       	cp.w	r8,0
80008e6a:	c0 d1       	brne	80008e84 <quorem+0x11c>
80008e6c:	ea 09 00 29 	add	r9,r5,r9<<0x2
80008e70:	c0 28       	rjmp	80008e74 <quorem+0x10c>
80008e72:	20 16       	sub	r6,1
80008e74:	20 49       	sub	r9,4
80008e76:	00 39       	cp.w	r9,r0
80008e78:	e0 88 00 05 	brls	80008e82 <quorem+0x11a>
80008e7c:	72 08       	ld.w	r8,r9[0x0]
80008e7e:	58 08       	cp.w	r8,0
80008e80:	cf 90       	breq	80008e72 <quorem+0x10a>
80008e82:	8b 46       	st.w	r5[0x10],r6
80008e84:	04 9c       	mov	r12,r2
80008e86:	2f ed       	sub	sp,-8
80008e88:	d8 32       	popm	r0-r7,pc
80008e8a:	00 00       	add	r0,r0
80008e8c:	80 00       	ld.sh	r0,r0[0x0]
80008e8e:	a3 62       	lsl	r2,0x2

80008e90 <_dtoa_r>:
80008e90:	d4 31       	pushm	r0-r7,lr
80008e92:	21 9d       	sub	sp,100
80008e94:	fa ce ff 78 	sub	lr,sp,-136
80008e98:	50 5c       	stdsp	sp[0x14],r12
80008e9a:	50 49       	stdsp	sp[0x10],r9
80008e9c:	7c 2c       	ld.w	r12,lr[0x8]
80008e9e:	14 90       	mov	r0,r10
80008ea0:	50 38       	stdsp	sp[0xc],r8
80008ea2:	7c 0a       	ld.w	r10,lr[0x0]
80008ea4:	50 1c       	stdsp	sp[0x4],r12
80008ea6:	50 2a       	stdsp	sp[0x8],r10
80008ea8:	40 59       	lddsp	r9,sp[0x14]
80008eaa:	16 91       	mov	r1,r11
80008eac:	7c 16       	ld.w	r6,lr[0x4]
80008eae:	72 97       	ld.w	r7,r9[0x24]
80008eb0:	58 07       	cp.w	r7,0
80008eb2:	c0 a1       	brne	80008ec6 <_dtoa_r+0x36>
80008eb4:	31 0c       	mov	r12,16
80008eb6:	f0 1f 00 4a 	mcall	80008fdc <_dtoa_r+0x14c>
80008eba:	40 58       	lddsp	r8,sp[0x14]
80008ebc:	99 37       	st.w	r12[0xc],r7
80008ebe:	91 9c       	st.w	r8[0x24],r12
80008ec0:	99 17       	st.w	r12[0x4],r7
80008ec2:	99 27       	st.w	r12[0x8],r7
80008ec4:	99 07       	st.w	r12[0x0],r7
80008ec6:	40 5c       	lddsp	r12,sp[0x14]
80008ec8:	78 99       	ld.w	r9,r12[0x24]
80008eca:	72 0a       	ld.w	r10,r9[0x0]
80008ecc:	58 0a       	cp.w	r10,0
80008ece:	c0 f0       	breq	80008eec <_dtoa_r+0x5c>
80008ed0:	72 18       	ld.w	r8,r9[0x4]
80008ed2:	95 18       	st.w	r10[0x4],r8
80008ed4:	30 18       	mov	r8,1
80008ed6:	72 19       	ld.w	r9,r9[0x4]
80008ed8:	f0 09 09 48 	lsl	r8,r8,r9
80008edc:	14 9b       	mov	r11,r10
80008ede:	95 28       	st.w	r10[0x8],r8
80008ee0:	f0 1f 00 40 	mcall	80008fe0 <_dtoa_r+0x150>
80008ee4:	40 5a       	lddsp	r10,sp[0x14]
80008ee6:	30 08       	mov	r8,0
80008ee8:	74 99       	ld.w	r9,r10[0x24]
80008eea:	93 08       	st.w	r9[0x0],r8
80008eec:	58 01       	cp.w	r1,0
80008eee:	c0 54       	brge	80008ef8 <_dtoa_r+0x68>
80008ef0:	e3 d1 c0 1f 	bfextu	r1,r1,0x0,0x1f
80008ef4:	30 18       	mov	r8,1
80008ef6:	c0 28       	rjmp	80008efa <_dtoa_r+0x6a>
80008ef8:	30 08       	mov	r8,0
80008efa:	8d 08       	st.w	r6[0x0],r8
80008efc:	02 97       	mov	r7,r1
80008efe:	02 98       	mov	r8,r1
80008f00:	fc 19 7f f0 	movh	r9,0x7ff0
80008f04:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008f08:	12 38       	cp.w	r8,r9
80008f0a:	c1 e1       	brne	80008f46 <_dtoa_r+0xb6>
80008f0c:	e0 68 27 0f 	mov	r8,9999
80008f10:	40 2c       	lddsp	r12,sp[0x8]
80008f12:	99 08       	st.w	r12[0x0],r8
80008f14:	58 00       	cp.w	r0,0
80008f16:	c0 61       	brne	80008f22 <_dtoa_r+0x92>
80008f18:	f1 d1 c0 14 	bfextu	r8,r1,0x0,0x14
80008f1c:	c0 31       	brne	80008f22 <_dtoa_r+0x92>
80008f1e:	4b 2c       	lddpc	r12,80008fe4 <_dtoa_r+0x154>
80008f20:	c0 28       	rjmp	80008f24 <_dtoa_r+0x94>
80008f22:	4b 2c       	lddpc	r12,80008fe8 <_dtoa_r+0x158>
80008f24:	40 1a       	lddsp	r10,sp[0x4]
80008f26:	58 0a       	cp.w	r10,0
80008f28:	e0 80 05 e0 	breq	80009ae8 <_dtoa_r+0xc58>
80008f2c:	f8 ca ff fd 	sub	r10,r12,-3
80008f30:	30 08       	mov	r8,0
80008f32:	15 89       	ld.ub	r9,r10[0x0]
80008f34:	f0 09 18 00 	cp.b	r9,r8
80008f38:	c0 30       	breq	80008f3e <_dtoa_r+0xae>
80008f3a:	f8 ca ff f8 	sub	r10,r12,-8
80008f3e:	40 19       	lddsp	r9,sp[0x4]
80008f40:	93 0a       	st.w	r9[0x0],r10
80008f42:	e0 8f 05 d3 	bral	80009ae8 <_dtoa_r+0xc58>
80008f46:	fa e1 00 50 	st.d	sp[80],r0
80008f4a:	30 08       	mov	r8,0
80008f4c:	30 09       	mov	r9,0
80008f4e:	00 9a       	mov	r10,r0
80008f50:	02 9b       	mov	r11,r1
80008f52:	f0 1f 00 27 	mcall	80008fec <_dtoa_r+0x15c>
80008f56:	c1 50       	breq	80008f80 <_dtoa_r+0xf0>
80008f58:	30 18       	mov	r8,1
80008f5a:	40 2c       	lddsp	r12,sp[0x8]
80008f5c:	40 1a       	lddsp	r10,sp[0x4]
80008f5e:	99 08       	st.w	r12[0x0],r8
80008f60:	4a 48       	lddpc	r8,80008ff0 <_dtoa_r+0x160>
80008f62:	58 0a       	cp.w	r10,0
80008f64:	f0 0c 17 00 	moveq	r12,r8
80008f68:	f0 0c 17 10 	movne	r12,r8
80008f6c:	f9 b9 01 01 	movne	r9,1
80008f70:	f1 d9 e1 08 	addne	r8,r8,r9
80008f74:	fb f9 10 01 	ld.wne	r9,sp[0x4]
80008f78:	f3 f8 1a 00 	st.wne	r9[0x0],r8
80008f7c:	e0 8f 05 b6 	bral	80009ae8 <_dtoa_r+0xc58>
80008f80:	fa c8 ff a0 	sub	r8,sp,-96
80008f84:	fa c9 ff a4 	sub	r9,sp,-92
80008f88:	fa ea 00 50 	ld.d	r10,sp[80]
80008f8c:	40 5c       	lddsp	r12,sp[0x14]
80008f8e:	f0 1f 00 1a 	mcall	80008ff4 <_dtoa_r+0x164>
80008f92:	51 0c       	stdsp	sp[0x40],r12
80008f94:	f9 d1 c2 8b 	bfextu	r12,r1,0x14,0xb
80008f98:	c0 d0       	breq	80008fb2 <_dtoa_r+0x122>
80008f9a:	fa ea 00 50 	ld.d	r10,sp[80]
80008f9e:	30 08       	mov	r8,0
80008fa0:	f8 c5 03 ff 	sub	r5,r12,1023
80008fa4:	50 f8       	stdsp	sp[0x3c],r8
80008fa6:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80008faa:	10 9b       	mov	r11,r8
80008fac:	ea 1b 3f f0 	orh	r11,0x3ff0
80008fb0:	c3 28       	rjmp	80009014 <_dtoa_r+0x184>
80008fb2:	41 79       	lddsp	r9,sp[0x5c]
80008fb4:	41 88       	lddsp	r8,sp[0x60]
80008fb6:	f0 09 00 09 	add	r9,r8,r9
80008fba:	f2 ca fb ce 	sub	r10,r9,-1074
80008fbe:	e0 4a 00 20 	cp.w	r10,32
80008fc2:	e0 8a 00 1b 	brle	80008ff8 <_dtoa_r+0x168>
80008fc6:	f2 c9 fb ee 	sub	r9,r9,-1042
80008fca:	f4 08 11 40 	rsub	r8,r10,64
80008fce:	e0 09 0a 49 	lsr	r9,r0,r9
80008fd2:	e2 08 09 48 	lsl	r8,r1,r8
80008fd6:	f3 e8 10 0c 	or	r12,r9,r8
80008fda:	c1 38       	rjmp	80009000 <_dtoa_r+0x170>
80008fdc:	80 00       	ld.sh	r0,r0[0x0]
80008fde:	5e b8       	rethi	r8
80008fe0:	80 00       	ld.sh	r0,r0[0x0]
80008fe2:	a3 9c       	lsr	r12,0x3
80008fe4:	80 00       	ld.sh	r0,r0[0x0]
80008fe6:	bd 4c       	asr	r12,0x1c
80008fe8:	80 00       	ld.sh	r0,r0[0x0]
80008fea:	bd 58       	asr	r8,0x1d
80008fec:	80 00       	ld.sh	r0,r0[0x0]
80008fee:	af 18       	ld.d	r8,--r7
80008ff0:	80 00       	ld.sh	r0,r0[0x0]
80008ff2:	bc 38       	st.h	lr[0x6],r8
80008ff4:	80 00       	ld.sh	r0,r0[0x0]
80008ff6:	a4 4c       	st.h	r2[0x8],r12
80008ff8:	f4 08 11 20 	rsub	r8,r10,32
80008ffc:	e0 08 09 4c 	lsl	r12,r0,r8
80009000:	f4 c5 04 33 	sub	r5,r10,1075
80009004:	f0 1f 00 71 	mcall	800091c8 <_dtoa_r+0x338>
80009008:	fc 18 fe 10 	movh	r8,0xfe10
8000900c:	30 1c       	mov	r12,1
8000900e:	f0 0b 00 0b 	add	r11,r8,r11
80009012:	50 fc       	stdsp	sp[0x3c],r12
80009014:	30 08       	mov	r8,0
80009016:	fc 19 3f f8 	movh	r9,0x3ff8
8000901a:	f0 1f 00 6d 	mcall	800091cc <_dtoa_r+0x33c>
8000901e:	e0 68 43 61 	mov	r8,17249
80009022:	ea 18 63 6f 	orh	r8,0x636f
80009026:	e0 69 87 a7 	mov	r9,34727
8000902a:	ea 19 3f d2 	orh	r9,0x3fd2
8000902e:	f0 1f 00 69 	mcall	800091d0 <_dtoa_r+0x340>
80009032:	e0 68 c8 b3 	mov	r8,51379
80009036:	ea 18 8b 60 	orh	r8,0x8b60
8000903a:	e0 69 8a 28 	mov	r9,35368
8000903e:	ea 19 3f c6 	orh	r9,0x3fc6
80009042:	f0 1f 00 65 	mcall	800091d4 <_dtoa_r+0x344>
80009046:	0a 9c       	mov	r12,r5
80009048:	14 92       	mov	r2,r10
8000904a:	16 93       	mov	r3,r11
8000904c:	f0 1f 00 63 	mcall	800091d8 <_dtoa_r+0x348>
80009050:	e0 68 79 fb 	mov	r8,31227
80009054:	ea 18 50 9f 	orh	r8,0x509f
80009058:	e0 69 44 13 	mov	r9,17427
8000905c:	ea 19 3f d3 	orh	r9,0x3fd3
80009060:	f0 1f 00 5c 	mcall	800091d0 <_dtoa_r+0x340>
80009064:	14 98       	mov	r8,r10
80009066:	16 99       	mov	r9,r11
80009068:	04 9a       	mov	r10,r2
8000906a:	06 9b       	mov	r11,r3
8000906c:	f0 1f 00 5a 	mcall	800091d4 <_dtoa_r+0x344>
80009070:	16 97       	mov	r7,r11
80009072:	14 96       	mov	r6,r10
80009074:	0e 9b       	mov	r11,r7
80009076:	f0 1f 00 5a 	mcall	800091dc <_dtoa_r+0x34c>
8000907a:	30 08       	mov	r8,0
8000907c:	50 ac       	stdsp	sp[0x28],r12
8000907e:	30 09       	mov	r9,0
80009080:	0c 9a       	mov	r10,r6
80009082:	0e 9b       	mov	r11,r7
80009084:	f0 1f 00 57 	mcall	800091e0 <_dtoa_r+0x350>
80009088:	c1 00       	breq	800090a8 <_dtoa_r+0x218>
8000908a:	40 ac       	lddsp	r12,sp[0x28]
8000908c:	f0 1f 00 53 	mcall	800091d8 <_dtoa_r+0x348>
80009090:	14 98       	mov	r8,r10
80009092:	16 99       	mov	r9,r11
80009094:	0c 9a       	mov	r10,r6
80009096:	0e 9b       	mov	r11,r7
80009098:	f0 1f 00 53 	mcall	800091e4 <_dtoa_r+0x354>
8000909c:	fb fa 00 0a 	ld.weq	r10,sp[0x28]
800090a0:	f7 ba 00 01 	subeq	r10,1
800090a4:	fb fa 0a 0a 	st.weq	sp[0x28],r10
800090a8:	40 a9       	lddsp	r9,sp[0x28]
800090aa:	59 69       	cp.w	r9,22
800090ac:	e0 88 00 04 	brls	800090b4 <_dtoa_r+0x224>
800090b0:	30 18       	mov	r8,1
800090b2:	c1 18       	rjmp	800090d4 <_dtoa_r+0x244>
800090b4:	40 ac       	lddsp	r12,sp[0x28]
800090b6:	4c d8       	lddpc	r8,800091e8 <_dtoa_r+0x358>
800090b8:	fa ea 00 50 	ld.d	r10,sp[80]
800090bc:	f0 0c 02 38 	ld.d	r8,r8[r12<<0x3]
800090c0:	f0 1f 00 48 	mcall	800091e0 <_dtoa_r+0x350>
800090c4:	c0 41       	brne	800090cc <_dtoa_r+0x23c>
800090c6:	30 0a       	mov	r10,0
800090c8:	50 ba       	stdsp	sp[0x2c],r10
800090ca:	c0 68       	rjmp	800090d6 <_dtoa_r+0x246>
800090cc:	40 a9       	lddsp	r9,sp[0x28]
800090ce:	30 08       	mov	r8,0
800090d0:	20 19       	sub	r9,1
800090d2:	50 a9       	stdsp	sp[0x28],r9
800090d4:	50 b8       	stdsp	sp[0x2c],r8
800090d6:	41 88       	lddsp	r8,sp[0x60]
800090d8:	20 18       	sub	r8,1
800090da:	f0 05 01 0a 	sub	r10,r8,r5
800090de:	c0 56       	brmi	800090e8 <_dtoa_r+0x258>
800090e0:	30 0c       	mov	r12,0
800090e2:	50 da       	stdsp	sp[0x34],r10
800090e4:	50 6c       	stdsp	sp[0x18],r12
800090e6:	c0 58       	rjmp	800090f0 <_dtoa_r+0x260>
800090e8:	5c 3a       	neg	r10
800090ea:	50 6a       	stdsp	sp[0x18],r10
800090ec:	30 0a       	mov	r10,0
800090ee:	50 da       	stdsp	sp[0x34],r10
800090f0:	40 aa       	lddsp	r10,sp[0x28]
800090f2:	40 a9       	lddsp	r9,sp[0x28]
800090f4:	5c 3a       	neg	r10
800090f6:	58 09       	cp.w	r9,0
800090f8:	c0 85       	brlt	80009108 <_dtoa_r+0x278>
800090fa:	40 d8       	lddsp	r8,sp[0x34]
800090fc:	30 0c       	mov	r12,0
800090fe:	12 08       	add	r8,r9
80009100:	50 e9       	stdsp	sp[0x38],r9
80009102:	50 d8       	stdsp	sp[0x34],r8
80009104:	50 7c       	stdsp	sp[0x1c],r12
80009106:	c0 88       	rjmp	80009116 <_dtoa_r+0x286>
80009108:	40 69       	lddsp	r9,sp[0x18]
8000910a:	40 a8       	lddsp	r8,sp[0x28]
8000910c:	30 0c       	mov	r12,0
8000910e:	10 19       	sub	r9,r8
80009110:	50 7a       	stdsp	sp[0x1c],r10
80009112:	50 69       	stdsp	sp[0x18],r9
80009114:	50 ec       	stdsp	sp[0x38],r12
80009116:	40 4a       	lddsp	r10,sp[0x10]
80009118:	58 9a       	cp.w	r10,9
8000911a:	e0 8b 00 26 	brhi	80009166 <_dtoa_r+0x2d6>
8000911e:	58 5a       	cp.w	r10,5
80009120:	f9 b6 0a 01 	movle	r6,1
80009124:	fb f9 90 04 	ld.wgt	r9,sp[0x10]
80009128:	f7 b9 09 04 	subgt	r9,4
8000912c:	fb f9 9a 04 	st.wgt	sp[0x10],r9
80009130:	f9 b6 09 00 	movgt	r6,0
80009134:	40 48       	lddsp	r8,sp[0x10]
80009136:	58 28       	cp.w	r8,2
80009138:	c2 30       	breq	8000917e <_dtoa_r+0x2ee>
8000913a:	e0 89 00 05 	brgt	80009144 <_dtoa_r+0x2b4>
8000913e:	58 08       	cp.w	r8,0
80009140:	c1 64       	brge	8000916c <_dtoa_r+0x2dc>
80009142:	c0 78       	rjmp	80009150 <_dtoa_r+0x2c0>
80009144:	40 4c       	lddsp	r12,sp[0x10]
80009146:	58 4c       	cp.w	r12,4
80009148:	c0 a0       	breq	8000915c <_dtoa_r+0x2cc>
8000914a:	c2 95       	brlt	8000919c <_dtoa_r+0x30c>
8000914c:	58 5c       	cp.w	r12,5
8000914e:	c0 a0       	breq	80009162 <_dtoa_r+0x2d2>
80009150:	3f fa       	mov	r10,-1
80009152:	30 19       	mov	r9,1
80009154:	50 8a       	stdsp	sp[0x20],r10
80009156:	50 c9       	stdsp	sp[0x30],r9
80009158:	50 9a       	stdsp	sp[0x24],r10
8000915a:	c3 08       	rjmp	800091ba <_dtoa_r+0x32a>
8000915c:	30 18       	mov	r8,1
8000915e:	50 c8       	stdsp	sp[0x30],r8
80009160:	c1 18       	rjmp	80009182 <_dtoa_r+0x2f2>
80009162:	30 1c       	mov	r12,1
80009164:	c1 d8       	rjmp	8000919e <_dtoa_r+0x30e>
80009166:	30 0a       	mov	r10,0
80009168:	30 16       	mov	r6,1
8000916a:	50 4a       	stdsp	sp[0x10],r10
8000916c:	3f f9       	mov	r9,-1
8000916e:	30 08       	mov	r8,0
80009170:	30 1c       	mov	r12,1
80009172:	50 89       	stdsp	sp[0x20],r9
80009174:	50 38       	stdsp	sp[0xc],r8
80009176:	31 25       	mov	r5,18
80009178:	50 99       	stdsp	sp[0x24],r9
8000917a:	50 cc       	stdsp	sp[0x30],r12
8000917c:	c1 f8       	rjmp	800091ba <_dtoa_r+0x32a>
8000917e:	30 0a       	mov	r10,0
80009180:	50 ca       	stdsp	sp[0x30],r10
80009182:	40 39       	lddsp	r9,sp[0xc]
80009184:	58 09       	cp.w	r9,0
80009186:	e0 89 00 07 	brgt	80009194 <_dtoa_r+0x304>
8000918a:	30 18       	mov	r8,1
8000918c:	50 38       	stdsp	sp[0xc],r8
8000918e:	10 95       	mov	r5,r8
80009190:	50 88       	stdsp	sp[0x20],r8
80009192:	c0 38       	rjmp	80009198 <_dtoa_r+0x308>
80009194:	40 35       	lddsp	r5,sp[0xc]
80009196:	50 85       	stdsp	sp[0x20],r5
80009198:	50 95       	stdsp	sp[0x24],r5
8000919a:	c1 08       	rjmp	800091ba <_dtoa_r+0x32a>
8000919c:	30 0c       	mov	r12,0
8000919e:	40 aa       	lddsp	r10,sp[0x28]
800091a0:	40 39       	lddsp	r9,sp[0xc]
800091a2:	50 cc       	stdsp	sp[0x30],r12
800091a4:	12 0a       	add	r10,r9
800091a6:	50 9a       	stdsp	sp[0x24],r10
800091a8:	14 95       	mov	r5,r10
800091aa:	2f f5       	sub	r5,-1
800091ac:	58 05       	cp.w	r5,0
800091ae:	e0 89 00 05 	brgt	800091b8 <_dtoa_r+0x328>
800091b2:	50 85       	stdsp	sp[0x20],r5
800091b4:	30 15       	mov	r5,1
800091b6:	c0 28       	rjmp	800091ba <_dtoa_r+0x32a>
800091b8:	50 85       	stdsp	sp[0x20],r5
800091ba:	40 58       	lddsp	r8,sp[0x14]
800091bc:	70 99       	ld.w	r9,r8[0x24]
800091be:	30 08       	mov	r8,0
800091c0:	93 18       	st.w	r9[0x4],r8
800091c2:	30 49       	mov	r9,4
800091c4:	c1 88       	rjmp	800091f4 <_dtoa_r+0x364>
800091c6:	00 00       	add	r0,r0
800091c8:	80 00       	ld.sh	r0,r0[0x0]
800091ca:	55 10       	stdsp	sp[0x144],r0
800091cc:	80 00       	ld.sh	r0,r0[0x0]
800091ce:	52 5c       	stdsp	sp[0x94],r12
800091d0:	80 00       	ld.sh	r0,r0[0x0]
800091d2:	ac fc       	st.b	r6[0x7],r12
800091d4:	80 00       	ld.sh	r0,r0[0x0]
800091d6:	53 f8       	stdsp	sp[0xfc],r8
800091d8:	80 00       	ld.sh	r0,r0[0x0]
800091da:	55 18       	stdsp	sp[0x144],r8
800091dc:	80 00       	ld.sh	r0,r0[0x0]
800091de:	ae e4       	st.b	r7[0x6],r4
800091e0:	80 00       	ld.sh	r0,r0[0x0]
800091e2:	af b4       	sbr	r4,0xf
800091e4:	80 00       	ld.sh	r0,r0[0x0]
800091e6:	af 18       	ld.d	r8,--r7
800091e8:	80 00       	ld.sh	r0,r0[0x0]
800091ea:	bd 9c       	lsr	r12,0x1d
800091ec:	6e 18       	ld.w	r8,r7[0x4]
800091ee:	a1 79       	lsl	r9,0x1
800091f0:	2f f8       	sub	r8,-1
800091f2:	8f 18       	st.w	r7[0x4],r8
800091f4:	40 5c       	lddsp	r12,sp[0x14]
800091f6:	f2 c8 ff ec 	sub	r8,r9,-20
800091fa:	78 97       	ld.w	r7,r12[0x24]
800091fc:	0a 38       	cp.w	r8,r5
800091fe:	fe 98 ff f7 	brls	800091ec <_dtoa_r+0x35c>
80009202:	6e 1b       	ld.w	r11,r7[0x4]
80009204:	f0 1f 00 4a 	mcall	8000932c <_dtoa_r+0x49c>
80009208:	8f 0c       	st.w	r7[0x0],r12
8000920a:	40 5c       	lddsp	r12,sp[0x14]
8000920c:	78 99       	ld.w	r9,r12[0x24]
8000920e:	72 09       	ld.w	r9,r9[0x0]
80009210:	51 69       	stdsp	sp[0x58],r9
80009212:	40 8a       	lddsp	r10,sp[0x20]
80009214:	58 ea       	cp.w	r10,14
80009216:	5f 88       	srls	r8
80009218:	0c 68       	and	r8,r6
8000921a:	e0 80 01 7f 	breq	80009518 <_dtoa_r+0x688>
8000921e:	40 aa       	lddsp	r10,sp[0x28]
80009220:	58 0a       	cp.w	r10,0
80009222:	e0 8a 00 35 	brle	8000928c <_dtoa_r+0x3fc>
80009226:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
8000922a:	4c 29       	lddpc	r9,80009330 <_dtoa_r+0x4a0>
8000922c:	14 97       	mov	r7,r10
8000922e:	f2 08 02 34 	ld.d	r4,r9[r8<<0x3]
80009232:	a5 47       	asr	r7,0x4
80009234:	ed b7 00 04 	bld	r7,0x4
80009238:	c0 30       	breq	8000923e <_dtoa_r+0x3ae>
8000923a:	30 23       	mov	r3,2
8000923c:	c0 d8       	rjmp	80009256 <_dtoa_r+0x3c6>
8000923e:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80009242:	4b d8       	lddpc	r8,80009334 <_dtoa_r+0x4a4>
80009244:	fa ea 00 50 	ld.d	r10,sp[80]
80009248:	f0 e8 00 20 	ld.d	r8,r8[32]
8000924c:	30 33       	mov	r3,3
8000924e:	f0 1f 00 3b 	mcall	80009338 <_dtoa_r+0x4a8>
80009252:	14 90       	mov	r0,r10
80009254:	16 91       	mov	r1,r11
80009256:	4b 86       	lddpc	r6,80009334 <_dtoa_r+0x4a4>
80009258:	c0 f8       	rjmp	80009276 <_dtoa_r+0x3e6>
8000925a:	08 9a       	mov	r10,r4
8000925c:	0a 9b       	mov	r11,r5
8000925e:	ed b7 00 00 	bld	r7,0x0
80009262:	c0 81       	brne	80009272 <_dtoa_r+0x3e2>
80009264:	ec e8 00 00 	ld.d	r8,r6[0]
80009268:	2f f3       	sub	r3,-1
8000926a:	f0 1f 00 35 	mcall	8000933c <_dtoa_r+0x4ac>
8000926e:	14 94       	mov	r4,r10
80009270:	16 95       	mov	r5,r11
80009272:	a1 57       	asr	r7,0x1
80009274:	2f 86       	sub	r6,-8
80009276:	58 07       	cp.w	r7,0
80009278:	cf 11       	brne	8000925a <_dtoa_r+0x3ca>
8000927a:	00 9a       	mov	r10,r0
8000927c:	02 9b       	mov	r11,r1
8000927e:	08 98       	mov	r8,r4
80009280:	0a 99       	mov	r9,r5
80009282:	f0 1f 00 2e 	mcall	80009338 <_dtoa_r+0x4a8>
80009286:	14 90       	mov	r0,r10
80009288:	16 91       	mov	r1,r11
8000928a:	c2 88       	rjmp	800092da <_dtoa_r+0x44a>
8000928c:	40 a9       	lddsp	r9,sp[0x28]
8000928e:	5c 39       	neg	r9
80009290:	c0 31       	brne	80009296 <_dtoa_r+0x406>
80009292:	30 23       	mov	r3,2
80009294:	c2 38       	rjmp	800092da <_dtoa_r+0x44a>
80009296:	f2 04 14 04 	asr	r4,r9,0x4
8000929a:	4a 68       	lddpc	r8,80009330 <_dtoa_r+0x4a0>
8000929c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800092a0:	fa ea 00 50 	ld.d	r10,sp[80]
800092a4:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800092a8:	4a 35       	lddpc	r5,80009334 <_dtoa_r+0x4a4>
800092aa:	f0 1f 00 25 	mcall	8000933c <_dtoa_r+0x4ac>
800092ae:	30 23       	mov	r3,2
800092b0:	14 96       	mov	r6,r10
800092b2:	16 97       	mov	r7,r11
800092b4:	c0 f8       	rjmp	800092d2 <_dtoa_r+0x442>
800092b6:	0c 9a       	mov	r10,r6
800092b8:	0e 9b       	mov	r11,r7
800092ba:	ed b4 00 00 	bld	r4,0x0
800092be:	c0 81       	brne	800092ce <_dtoa_r+0x43e>
800092c0:	ea e8 00 00 	ld.d	r8,r5[0]
800092c4:	2f f3       	sub	r3,-1
800092c6:	f0 1f 00 1e 	mcall	8000933c <_dtoa_r+0x4ac>
800092ca:	14 96       	mov	r6,r10
800092cc:	16 97       	mov	r7,r11
800092ce:	a1 54       	asr	r4,0x1
800092d0:	2f 85       	sub	r5,-8
800092d2:	58 04       	cp.w	r4,0
800092d4:	cf 11       	brne	800092b6 <_dtoa_r+0x426>
800092d6:	0c 90       	mov	r0,r6
800092d8:	0e 91       	mov	r1,r7
800092da:	40 b9       	lddsp	r9,sp[0x2c]
800092dc:	58 09       	cp.w	r9,0
800092de:	c3 30       	breq	80009344 <_dtoa_r+0x4b4>
800092e0:	30 08       	mov	r8,0
800092e2:	02 97       	mov	r7,r1
800092e4:	fc 19 3f f0 	movh	r9,0x3ff0
800092e8:	00 9a       	mov	r10,r0
800092ea:	02 9b       	mov	r11,r1
800092ec:	f0 1f 00 15 	mcall	80009340 <_dtoa_r+0x4b0>
800092f0:	40 88       	lddsp	r8,sp[0x20]
800092f2:	f9 bc 00 00 	moveq	r12,0
800092f6:	f9 bc 01 01 	movne	r12,1
800092fa:	58 08       	cp.w	r8,0
800092fc:	5f 98       	srgt	r8
800092fe:	00 96       	mov	r6,r0
80009300:	18 68       	and	r8,r12
80009302:	c2 10       	breq	80009344 <_dtoa_r+0x4b4>
80009304:	40 9c       	lddsp	r12,sp[0x24]
80009306:	58 0c       	cp.w	r12,0
80009308:	e0 8a 01 06 	brle	80009514 <_dtoa_r+0x684>
8000930c:	40 ac       	lddsp	r12,sp[0x28]
8000930e:	20 1c       	sub	r12,1
80009310:	00 9a       	mov	r10,r0
80009312:	02 9b       	mov	r11,r1
80009314:	30 08       	mov	r8,0
80009316:	fc 19 40 24 	movh	r9,0x4024
8000931a:	51 3c       	stdsp	sp[0x4c],r12
8000931c:	f0 1f 00 08 	mcall	8000933c <_dtoa_r+0x4ac>
80009320:	2f f3       	sub	r3,-1
80009322:	14 90       	mov	r0,r10
80009324:	16 91       	mov	r1,r11
80009326:	40 9a       	lddsp	r10,sp[0x24]
80009328:	51 2a       	stdsp	sp[0x48],r10
8000932a:	c1 18       	rjmp	8000934c <_dtoa_r+0x4bc>
8000932c:	80 00       	ld.sh	r0,r0[0x0]
8000932e:	a3 d4       	cbr	r4,0x3
80009330:	80 00       	ld.sh	r0,r0[0x0]
80009332:	bd 9c       	lsr	r12,0x1d
80009334:	80 00       	ld.sh	r0,r0[0x0]
80009336:	be 64       	st.h	pc[0xc],r4
80009338:	80 00       	ld.sh	r0,r0[0x0]
8000933a:	b0 2c       	st.h	r8[0x4],r12
8000933c:	80 00       	ld.sh	r0,r0[0x0]
8000933e:	ac fc       	st.b	r6[0x7],r12
80009340:	80 00       	ld.sh	r0,r0[0x0]
80009342:	af b4       	sbr	r4,0xf
80009344:	40 89       	lddsp	r9,sp[0x20]
80009346:	40 a8       	lddsp	r8,sp[0x28]
80009348:	51 29       	stdsp	sp[0x48],r9
8000934a:	51 38       	stdsp	sp[0x4c],r8
8000934c:	06 9c       	mov	r12,r3
8000934e:	f0 1f 00 6a 	mcall	800094f4 <_dtoa_r+0x664>
80009352:	00 98       	mov	r8,r0
80009354:	02 99       	mov	r9,r1
80009356:	f0 1f 00 69 	mcall	800094f8 <_dtoa_r+0x668>
8000935a:	30 08       	mov	r8,0
8000935c:	fc 19 40 1c 	movh	r9,0x401c
80009360:	f0 1f 00 67 	mcall	800094fc <_dtoa_r+0x66c>
80009364:	fc 18 fc c0 	movh	r8,0xfcc0
80009368:	16 97       	mov	r7,r11
8000936a:	00 94       	mov	r4,r0
8000936c:	02 95       	mov	r5,r1
8000936e:	14 96       	mov	r6,r10
80009370:	f0 07 00 07 	add	r7,r8,r7
80009374:	41 2c       	lddsp	r12,sp[0x48]
80009376:	58 0c       	cp.w	r12,0
80009378:	c2 01       	brne	800093b8 <_dtoa_r+0x528>
8000937a:	30 08       	mov	r8,0
8000937c:	fc 19 40 14 	movh	r9,0x4014
80009380:	00 9a       	mov	r10,r0
80009382:	02 9b       	mov	r11,r1
80009384:	f0 1f 00 5f 	mcall	80009500 <_dtoa_r+0x670>
80009388:	0c 93       	mov	r3,r6
8000938a:	16 95       	mov	r5,r11
8000938c:	14 94       	mov	r4,r10
8000938e:	14 98       	mov	r8,r10
80009390:	0a 99       	mov	r9,r5
80009392:	0e 9b       	mov	r11,r7
80009394:	0c 9a       	mov	r10,r6
80009396:	f0 1f 00 5c 	mcall	80009504 <_dtoa_r+0x674>
8000939a:	e0 81 02 7d 	brne	80009894 <_dtoa_r+0xa04>
8000939e:	0e 98       	mov	r8,r7
800093a0:	ee 18 80 00 	eorh	r8,0x8000
800093a4:	08 9a       	mov	r10,r4
800093a6:	10 93       	mov	r3,r8
800093a8:	0a 9b       	mov	r11,r5
800093aa:	0c 98       	mov	r8,r6
800093ac:	06 99       	mov	r9,r3
800093ae:	f0 1f 00 56 	mcall	80009504 <_dtoa_r+0x674>
800093b2:	e0 81 02 6a 	brne	80009886 <_dtoa_r+0x9f6>
800093b6:	ca f8       	rjmp	80009514 <_dtoa_r+0x684>
800093b8:	41 28       	lddsp	r8,sp[0x48]
800093ba:	4d 49       	lddpc	r9,80009508 <_dtoa_r+0x678>
800093bc:	20 18       	sub	r8,1
800093be:	40 ca       	lddsp	r10,sp[0x30]
800093c0:	58 0a       	cp.w	r10,0
800093c2:	c4 c0       	breq	8000945a <_dtoa_r+0x5ca>
800093c4:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800093c8:	30 0a       	mov	r10,0
800093ca:	fc 1b 3f e0 	movh	r11,0x3fe0
800093ce:	f0 1f 00 50 	mcall	8000950c <_dtoa_r+0x67c>
800093d2:	0e 99       	mov	r9,r7
800093d4:	0c 98       	mov	r8,r6
800093d6:	30 07       	mov	r7,0
800093d8:	41 61       	lddsp	r1,sp[0x58]
800093da:	f0 1f 00 4a 	mcall	80009500 <_dtoa_r+0x670>
800093de:	14 92       	mov	r2,r10
800093e0:	16 93       	mov	r3,r11
800093e2:	08 9a       	mov	r10,r4
800093e4:	0a 9b       	mov	r11,r5
800093e6:	f0 1f 00 4b 	mcall	80009510 <_dtoa_r+0x680>
800093ea:	18 96       	mov	r6,r12
800093ec:	f0 1f 00 42 	mcall	800094f4 <_dtoa_r+0x664>
800093f0:	14 98       	mov	r8,r10
800093f2:	16 99       	mov	r9,r11
800093f4:	08 9a       	mov	r10,r4
800093f6:	0a 9b       	mov	r11,r5
800093f8:	f0 1f 00 42 	mcall	80009500 <_dtoa_r+0x670>
800093fc:	2d 06       	sub	r6,-48
800093fe:	16 95       	mov	r5,r11
80009400:	14 94       	mov	r4,r10
80009402:	02 c6       	st.b	r1++,r6
80009404:	2f f7       	sub	r7,-1
80009406:	04 98       	mov	r8,r2
80009408:	06 99       	mov	r9,r3
8000940a:	0a 9b       	mov	r11,r5
8000940c:	f0 1f 00 3e 	mcall	80009504 <_dtoa_r+0x674>
80009410:	e0 81 03 5b 	brne	80009ac6 <_dtoa_r+0xc36>
80009414:	08 98       	mov	r8,r4
80009416:	0a 99       	mov	r9,r5
80009418:	30 0a       	mov	r10,0
8000941a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000941e:	f0 1f 00 39 	mcall	80009500 <_dtoa_r+0x670>
80009422:	04 98       	mov	r8,r2
80009424:	06 99       	mov	r9,r3
80009426:	f0 1f 00 38 	mcall	80009504 <_dtoa_r+0x674>
8000942a:	04 9a       	mov	r10,r2
8000942c:	06 9b       	mov	r11,r3
8000942e:	30 08       	mov	r8,0
80009430:	fc 19 40 24 	movh	r9,0x4024
80009434:	e0 81 00 ec 	brne	8000960c <_dtoa_r+0x77c>
80009438:	41 2c       	lddsp	r12,sp[0x48]
8000943a:	18 37       	cp.w	r7,r12
8000943c:	c6 c4       	brge	80009514 <_dtoa_r+0x684>
8000943e:	f0 1f 00 2f 	mcall	800094f8 <_dtoa_r+0x668>
80009442:	30 08       	mov	r8,0
80009444:	14 92       	mov	r2,r10
80009446:	16 93       	mov	r3,r11
80009448:	08 9a       	mov	r10,r4
8000944a:	0a 9b       	mov	r11,r5
8000944c:	fc 19 40 24 	movh	r9,0x4024
80009450:	f0 1f 00 2a 	mcall	800094f8 <_dtoa_r+0x668>
80009454:	14 94       	mov	r4,r10
80009456:	16 95       	mov	r5,r11
80009458:	cc 5b       	rjmp	800093e2 <_dtoa_r+0x552>
8000945a:	41 2c       	lddsp	r12,sp[0x48]
8000945c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80009460:	41 61       	lddsp	r1,sp[0x58]
80009462:	0e 99       	mov	r9,r7
80009464:	0c 98       	mov	r8,r6
80009466:	18 01       	add	r1,r12
80009468:	f0 1f 00 24 	mcall	800094f8 <_dtoa_r+0x668>
8000946c:	41 67       	lddsp	r7,sp[0x58]
8000946e:	14 92       	mov	r2,r10
80009470:	16 93       	mov	r3,r11
80009472:	08 9a       	mov	r10,r4
80009474:	0a 9b       	mov	r11,r5
80009476:	f0 1f 00 27 	mcall	80009510 <_dtoa_r+0x680>
8000947a:	18 96       	mov	r6,r12
8000947c:	f0 1f 00 1e 	mcall	800094f4 <_dtoa_r+0x664>
80009480:	2d 06       	sub	r6,-48
80009482:	14 98       	mov	r8,r10
80009484:	16 99       	mov	r9,r11
80009486:	08 9a       	mov	r10,r4
80009488:	0a 9b       	mov	r11,r5
8000948a:	f0 1f 00 1e 	mcall	80009500 <_dtoa_r+0x670>
8000948e:	0e c6       	st.b	r7++,r6
80009490:	14 94       	mov	r4,r10
80009492:	16 95       	mov	r5,r11
80009494:	02 37       	cp.w	r7,r1
80009496:	c2 61       	brne	800094e2 <_dtoa_r+0x652>
80009498:	30 08       	mov	r8,0
8000949a:	fc 19 3f e0 	movh	r9,0x3fe0
8000949e:	04 9a       	mov	r10,r2
800094a0:	06 9b       	mov	r11,r3
800094a2:	f0 1f 00 17 	mcall	800094fc <_dtoa_r+0x66c>
800094a6:	0e 91       	mov	r1,r7
800094a8:	08 98       	mov	r8,r4
800094aa:	0a 99       	mov	r9,r5
800094ac:	f0 1f 00 16 	mcall	80009504 <_dtoa_r+0x674>
800094b0:	e0 81 00 ae 	brne	8000960c <_dtoa_r+0x77c>
800094b4:	04 98       	mov	r8,r2
800094b6:	06 99       	mov	r9,r3
800094b8:	30 0a       	mov	r10,0
800094ba:	fc 1b 3f e0 	movh	r11,0x3fe0
800094be:	f0 1f 00 11 	mcall	80009500 <_dtoa_r+0x670>
800094c2:	14 98       	mov	r8,r10
800094c4:	16 99       	mov	r9,r11
800094c6:	08 9a       	mov	r10,r4
800094c8:	0a 9b       	mov	r11,r5
800094ca:	f0 1f 00 0f 	mcall	80009504 <_dtoa_r+0x674>
800094ce:	c2 30       	breq	80009514 <_dtoa_r+0x684>
800094d0:	33 0a       	mov	r10,48
800094d2:	02 99       	mov	r9,r1
800094d4:	13 78       	ld.ub	r8,--r9
800094d6:	f4 08 18 00 	cp.b	r8,r10
800094da:	e0 81 02 f6 	brne	80009ac6 <_dtoa_r+0xc36>
800094de:	12 91       	mov	r1,r9
800094e0:	cf 9b       	rjmp	800094d2 <_dtoa_r+0x642>
800094e2:	0a 9b       	mov	r11,r5
800094e4:	30 08       	mov	r8,0
800094e6:	fc 19 40 24 	movh	r9,0x4024
800094ea:	f0 1f 00 04 	mcall	800094f8 <_dtoa_r+0x668>
800094ee:	14 94       	mov	r4,r10
800094f0:	16 95       	mov	r5,r11
800094f2:	cc 0b       	rjmp	80009472 <_dtoa_r+0x5e2>
800094f4:	80 00       	ld.sh	r0,r0[0x0]
800094f6:	55 18       	stdsp	sp[0x144],r8
800094f8:	80 00       	ld.sh	r0,r0[0x0]
800094fa:	ac fc       	st.b	r6[0x7],r12
800094fc:	80 00       	ld.sh	r0,r0[0x0]
800094fe:	53 f8       	stdsp	sp[0xfc],r8
80009500:	80 00       	ld.sh	r0,r0[0x0]
80009502:	52 5c       	stdsp	sp[0x94],r12
80009504:	80 00       	ld.sh	r0,r0[0x0]
80009506:	af b4       	sbr	r4,0xf
80009508:	80 00       	ld.sh	r0,r0[0x0]
8000950a:	bd 9c       	lsr	r12,0x1d
8000950c:	80 00       	ld.sh	r0,r0[0x0]
8000950e:	b0 2c       	st.h	r8[0x4],r12
80009510:	80 00       	ld.sh	r0,r0[0x0]
80009512:	ae e4       	st.b	r7[0x6],r4
80009514:	fa e0 00 50 	ld.d	r0,sp[80]
80009518:	40 aa       	lddsp	r10,sp[0x28]
8000951a:	30 0b       	mov	r11,0
8000951c:	58 ea       	cp.w	r10,14
8000951e:	5f a9       	srle	r9
80009520:	41 7a       	lddsp	r10,sp[0x5c]
80009522:	f4 08 11 ff 	rsub	r8,r10,-1
80009526:	f3 e8 03 f9 	and	r9,r9,r8>>0x1f
8000952a:	f6 09 18 00 	cp.b	r9,r11
8000952e:	e0 80 00 8b 	breq	80009644 <_dtoa_r+0x7b4>
80009532:	40 89       	lddsp	r9,sp[0x20]
80009534:	40 3c       	lddsp	r12,sp[0xc]
80009536:	58 09       	cp.w	r9,0
80009538:	5f a8       	srle	r8
8000953a:	4c b9       	lddpc	r9,80009664 <_dtoa_r+0x7d4>
8000953c:	40 aa       	lddsp	r10,sp[0x28]
8000953e:	f1 ec 03 f8 	and	r8,r8,r12>>0x1f
80009542:	f2 0a 02 34 	ld.d	r4,r9[r10<<0x3]
80009546:	f6 08 18 00 	cp.b	r8,r11
8000954a:	c1 50       	breq	80009574 <_dtoa_r+0x6e4>
8000954c:	40 89       	lddsp	r9,sp[0x20]
8000954e:	58 09       	cp.w	r9,0
80009550:	e0 81 01 9b 	brne	80009886 <_dtoa_r+0x9f6>
80009554:	30 08       	mov	r8,0
80009556:	fc 19 40 14 	movh	r9,0x4014
8000955a:	08 9a       	mov	r10,r4
8000955c:	0a 9b       	mov	r11,r5
8000955e:	f0 1f 00 43 	mcall	80009668 <_dtoa_r+0x7d8>
80009562:	00 98       	mov	r8,r0
80009564:	02 99       	mov	r9,r1
80009566:	f0 1f 00 42 	mcall	8000966c <_dtoa_r+0x7dc>
8000956a:	e0 81 01 8e 	brne	80009886 <_dtoa_r+0x9f6>
8000956e:	40 84       	lddsp	r4,sp[0x20]
80009570:	e0 8f 01 95 	bral	8000989a <_dtoa_r+0xa0a>
80009574:	02 97       	mov	r7,r1
80009576:	00 96       	mov	r6,r0
80009578:	41 61       	lddsp	r1,sp[0x58]
8000957a:	30 13       	mov	r3,1
8000957c:	08 98       	mov	r8,r4
8000957e:	0a 99       	mov	r9,r5
80009580:	0c 9a       	mov	r10,r6
80009582:	0e 9b       	mov	r11,r7
80009584:	f0 1f 00 3b 	mcall	80009670 <_dtoa_r+0x7e0>
80009588:	f0 1f 00 3b 	mcall	80009674 <_dtoa_r+0x7e4>
8000958c:	18 92       	mov	r2,r12
8000958e:	f0 1f 00 3b 	mcall	80009678 <_dtoa_r+0x7e8>
80009592:	08 98       	mov	r8,r4
80009594:	0a 99       	mov	r9,r5
80009596:	f0 1f 00 35 	mcall	80009668 <_dtoa_r+0x7d8>
8000959a:	14 98       	mov	r8,r10
8000959c:	16 99       	mov	r9,r11
8000959e:	0c 9a       	mov	r10,r6
800095a0:	0e 9b       	mov	r11,r7
800095a2:	f0 1f 00 37 	mcall	8000967c <_dtoa_r+0x7ec>
800095a6:	e4 c8 ff d0 	sub	r8,r2,-48
800095aa:	02 c8       	st.b	r1++,r8
800095ac:	16 97       	mov	r7,r11
800095ae:	14 96       	mov	r6,r10
800095b0:	0e 9b       	mov	r11,r7
800095b2:	30 08       	mov	r8,0
800095b4:	fc 19 40 24 	movh	r9,0x4024
800095b8:	40 8c       	lddsp	r12,sp[0x20]
800095ba:	18 33       	cp.w	r3,r12
800095bc:	c3 71       	brne	8000962a <_dtoa_r+0x79a>
800095be:	0c 98       	mov	r8,r6
800095c0:	0e 99       	mov	r9,r7
800095c2:	f0 1f 00 30 	mcall	80009680 <_dtoa_r+0x7f0>
800095c6:	16 97       	mov	r7,r11
800095c8:	14 96       	mov	r6,r10
800095ca:	14 98       	mov	r8,r10
800095cc:	0e 99       	mov	r9,r7
800095ce:	08 9a       	mov	r10,r4
800095d0:	0a 9b       	mov	r11,r5
800095d2:	f0 1f 00 2d 	mcall	80009684 <_dtoa_r+0x7f4>
800095d6:	c1 d1       	brne	80009610 <_dtoa_r+0x780>
800095d8:	08 98       	mov	r8,r4
800095da:	0a 99       	mov	r9,r5
800095dc:	0c 9a       	mov	r10,r6
800095de:	0e 9b       	mov	r11,r7
800095e0:	f0 1f 00 2a 	mcall	80009688 <_dtoa_r+0x7f8>
800095e4:	e0 80 02 6f 	breq	80009ac2 <_dtoa_r+0xc32>
800095e8:	ed b2 00 00 	bld	r2,0x0
800095ec:	c1 20       	breq	80009610 <_dtoa_r+0x780>
800095ee:	e0 8f 02 6a 	bral	80009ac2 <_dtoa_r+0xc32>
800095f2:	41 68       	lddsp	r8,sp[0x58]
800095f4:	10 39       	cp.w	r9,r8
800095f6:	c0 30       	breq	800095fc <_dtoa_r+0x76c>
800095f8:	12 91       	mov	r1,r9
800095fa:	c0 c8       	rjmp	80009612 <_dtoa_r+0x782>
800095fc:	40 ac       	lddsp	r12,sp[0x28]
800095fe:	2f fc       	sub	r12,-1
80009600:	50 ac       	stdsp	sp[0x28],r12
80009602:	33 08       	mov	r8,48
80009604:	41 6a       	lddsp	r10,sp[0x58]
80009606:	b4 88       	st.b	r10[0x0],r8
80009608:	41 69       	lddsp	r9,sp[0x58]
8000960a:	c0 98       	rjmp	8000961c <_dtoa_r+0x78c>
8000960c:	41 39       	lddsp	r9,sp[0x4c]
8000960e:	50 a9       	stdsp	sp[0x28],r9
80009610:	33 9a       	mov	r10,57
80009612:	02 99       	mov	r9,r1
80009614:	13 78       	ld.ub	r8,--r9
80009616:	f4 08 18 00 	cp.b	r8,r10
8000961a:	ce c0       	breq	800095f2 <_dtoa_r+0x762>
8000961c:	40 a8       	lddsp	r8,sp[0x28]
8000961e:	51 38       	stdsp	sp[0x4c],r8
80009620:	13 88       	ld.ub	r8,r9[0x0]
80009622:	2f f8       	sub	r8,-1
80009624:	b2 88       	st.b	r9[0x0],r8
80009626:	e0 8f 02 50 	bral	80009ac6 <_dtoa_r+0xc36>
8000962a:	f0 1f 00 10 	mcall	80009668 <_dtoa_r+0x7d8>
8000962e:	2f f3       	sub	r3,-1
80009630:	16 97       	mov	r7,r11
80009632:	14 96       	mov	r6,r10
80009634:	30 08       	mov	r8,0
80009636:	30 09       	mov	r9,0
80009638:	0e 9b       	mov	r11,r7
8000963a:	f0 1f 00 14 	mcall	80009688 <_dtoa_r+0x7f8>
8000963e:	c9 f0       	breq	8000957c <_dtoa_r+0x6ec>
80009640:	e0 8f 02 41 	bral	80009ac2 <_dtoa_r+0xc32>
80009644:	40 cc       	lddsp	r12,sp[0x30]
80009646:	58 0c       	cp.w	r12,0
80009648:	c0 41       	brne	80009650 <_dtoa_r+0x7c0>
8000964a:	40 65       	lddsp	r5,sp[0x18]
8000964c:	40 77       	lddsp	r7,sp[0x1c]
8000964e:	c4 a8       	rjmp	800096e2 <_dtoa_r+0x852>
80009650:	40 49       	lddsp	r9,sp[0x10]
80009652:	58 19       	cp.w	r9,1
80009654:	e0 89 00 22 	brgt	80009698 <_dtoa_r+0x808>
80009658:	40 f8       	lddsp	r8,sp[0x3c]
8000965a:	58 08       	cp.w	r8,0
8000965c:	c1 80       	breq	8000968c <_dtoa_r+0x7fc>
8000965e:	f4 c8 fb cd 	sub	r8,r10,-1075
80009662:	c1 88       	rjmp	80009692 <_dtoa_r+0x802>
80009664:	80 00       	ld.sh	r0,r0[0x0]
80009666:	bd 9c       	lsr	r12,0x1d
80009668:	80 00       	ld.sh	r0,r0[0x0]
8000966a:	ac fc       	st.b	r6[0x7],r12
8000966c:	80 00       	ld.sh	r0,r0[0x0]
8000966e:	af 4c       	asr	r12,0xe
80009670:	80 00       	ld.sh	r0,r0[0x0]
80009672:	b0 2c       	st.h	r8[0x4],r12
80009674:	80 00       	ld.sh	r0,r0[0x0]
80009676:	ae e4       	st.b	r7[0x6],r4
80009678:	80 00       	ld.sh	r0,r0[0x0]
8000967a:	55 18       	stdsp	sp[0x144],r8
8000967c:	80 00       	ld.sh	r0,r0[0x0]
8000967e:	52 5c       	stdsp	sp[0x94],r12
80009680:	80 00       	ld.sh	r0,r0[0x0]
80009682:	53 f8       	stdsp	sp[0xfc],r8
80009684:	80 00       	ld.sh	r0,r0[0x0]
80009686:	af b4       	sbr	r4,0xf
80009688:	80 00       	ld.sh	r0,r0[0x0]
8000968a:	af 18       	ld.d	r8,--r7
8000968c:	41 88       	lddsp	r8,sp[0x60]
8000968e:	f0 08 11 36 	rsub	r8,r8,54
80009692:	40 65       	lddsp	r5,sp[0x18]
80009694:	40 77       	lddsp	r7,sp[0x1c]
80009696:	c1 c8       	rjmp	800096ce <_dtoa_r+0x83e>
80009698:	40 8a       	lddsp	r10,sp[0x20]
8000969a:	40 7c       	lddsp	r12,sp[0x1c]
8000969c:	20 1a       	sub	r10,1
8000969e:	14 3c       	cp.w	r12,r10
800096a0:	c0 45       	brlt	800096a8 <_dtoa_r+0x818>
800096a2:	18 97       	mov	r7,r12
800096a4:	14 17       	sub	r7,r10
800096a6:	c0 a8       	rjmp	800096ba <_dtoa_r+0x82a>
800096a8:	40 79       	lddsp	r9,sp[0x1c]
800096aa:	40 ec       	lddsp	r12,sp[0x38]
800096ac:	f4 09 01 08 	sub	r8,r10,r9
800096b0:	30 07       	mov	r7,0
800096b2:	10 09       	add	r9,r8
800096b4:	10 0c       	add	r12,r8
800096b6:	50 79       	stdsp	sp[0x1c],r9
800096b8:	50 ec       	stdsp	sp[0x38],r12
800096ba:	40 8a       	lddsp	r10,sp[0x20]
800096bc:	58 0a       	cp.w	r10,0
800096be:	c0 45       	brlt	800096c6 <_dtoa_r+0x836>
800096c0:	14 98       	mov	r8,r10
800096c2:	40 65       	lddsp	r5,sp[0x18]
800096c4:	c0 58       	rjmp	800096ce <_dtoa_r+0x83e>
800096c6:	40 65       	lddsp	r5,sp[0x18]
800096c8:	40 89       	lddsp	r9,sp[0x20]
800096ca:	30 08       	mov	r8,0
800096cc:	12 15       	sub	r5,r9
800096ce:	40 dc       	lddsp	r12,sp[0x34]
800096d0:	40 6a       	lddsp	r10,sp[0x18]
800096d2:	10 0c       	add	r12,r8
800096d4:	10 0a       	add	r10,r8
800096d6:	50 dc       	stdsp	sp[0x34],r12
800096d8:	50 6a       	stdsp	sp[0x18],r10
800096da:	30 1b       	mov	r11,1
800096dc:	40 5c       	lddsp	r12,sp[0x14]
800096de:	f0 1f 01 04 	mcall	80009aec <_dtoa_r+0xc5c>
800096e2:	58 05       	cp.w	r5,0
800096e4:	5f 98       	srgt	r8
800096e6:	40 d9       	lddsp	r9,sp[0x34]
800096e8:	18 94       	mov	r4,r12
800096ea:	58 09       	cp.w	r9,0
800096ec:	5f 99       	srgt	r9
800096ee:	12 68       	and	r8,r9
800096f0:	c0 a0       	breq	80009704 <_dtoa_r+0x874>
800096f2:	40 dc       	lddsp	r12,sp[0x34]
800096f4:	40 6a       	lddsp	r10,sp[0x18]
800096f6:	f8 05 0d 48 	min	r8,r12,r5
800096fa:	10 1c       	sub	r12,r8
800096fc:	10 1a       	sub	r10,r8
800096fe:	50 dc       	stdsp	sp[0x34],r12
80009700:	50 6a       	stdsp	sp[0x18],r10
80009702:	10 15       	sub	r5,r8
80009704:	40 79       	lddsp	r9,sp[0x1c]
80009706:	58 09       	cp.w	r9,0
80009708:	e0 8a 00 23 	brle	8000974e <_dtoa_r+0x8be>
8000970c:	40 c8       	lddsp	r8,sp[0x30]
8000970e:	58 08       	cp.w	r8,0
80009710:	c1 90       	breq	80009742 <_dtoa_r+0x8b2>
80009712:	58 07       	cp.w	r7,0
80009714:	e0 8a 00 13 	brle	8000973a <_dtoa_r+0x8aa>
80009718:	08 9b       	mov	r11,r4
8000971a:	0e 9a       	mov	r10,r7
8000971c:	40 5c       	lddsp	r12,sp[0x14]
8000971e:	f0 1f 00 f5 	mcall	80009af0 <_dtoa_r+0xc60>
80009722:	41 0a       	lddsp	r10,sp[0x40]
80009724:	18 9b       	mov	r11,r12
80009726:	18 94       	mov	r4,r12
80009728:	40 5c       	lddsp	r12,sp[0x14]
8000972a:	f0 1f 00 f3 	mcall	80009af4 <_dtoa_r+0xc64>
8000972e:	41 0b       	lddsp	r11,sp[0x40]
80009730:	18 96       	mov	r6,r12
80009732:	40 5c       	lddsp	r12,sp[0x14]
80009734:	f0 1f 00 f1 	mcall	80009af8 <_dtoa_r+0xc68>
80009738:	51 06       	stdsp	sp[0x40],r6
8000973a:	40 7a       	lddsp	r10,sp[0x1c]
8000973c:	0e 1a       	sub	r10,r7
8000973e:	c0 80       	breq	8000974e <_dtoa_r+0x8be>
80009740:	c0 28       	rjmp	80009744 <_dtoa_r+0x8b4>
80009742:	40 7a       	lddsp	r10,sp[0x1c]
80009744:	41 0b       	lddsp	r11,sp[0x40]
80009746:	40 5c       	lddsp	r12,sp[0x14]
80009748:	f0 1f 00 ea 	mcall	80009af0 <_dtoa_r+0xc60>
8000974c:	51 0c       	stdsp	sp[0x40],r12
8000974e:	30 1b       	mov	r11,1
80009750:	40 5c       	lddsp	r12,sp[0x14]
80009752:	f0 1f 00 e7 	mcall	80009aec <_dtoa_r+0xc5c>
80009756:	51 1c       	stdsp	sp[0x44],r12
80009758:	40 ec       	lddsp	r12,sp[0x38]
8000975a:	58 0c       	cp.w	r12,0
8000975c:	e0 8a 00 08 	brle	8000976c <_dtoa_r+0x8dc>
80009760:	18 9a       	mov	r10,r12
80009762:	41 1b       	lddsp	r11,sp[0x44]
80009764:	40 5c       	lddsp	r12,sp[0x14]
80009766:	f0 1f 00 e3 	mcall	80009af0 <_dtoa_r+0xc60>
8000976a:	51 1c       	stdsp	sp[0x44],r12
8000976c:	40 4a       	lddsp	r10,sp[0x10]
8000976e:	58 1a       	cp.w	r10,1
80009770:	e0 89 00 13 	brgt	80009796 <_dtoa_r+0x906>
80009774:	58 00       	cp.w	r0,0
80009776:	c1 01       	brne	80009796 <_dtoa_r+0x906>
80009778:	02 99       	mov	r9,r1
8000977a:	f1 d1 c0 14 	bfextu	r8,r1,0x0,0x14
8000977e:	c0 c1       	brne	80009796 <_dtoa_r+0x906>
80009780:	e6 19 7f f0 	andh	r9,0x7ff0,COH
80009784:	c0 90       	breq	80009796 <_dtoa_r+0x906>
80009786:	40 69       	lddsp	r9,sp[0x18]
80009788:	40 d8       	lddsp	r8,sp[0x34]
8000978a:	2f f9       	sub	r9,-1
8000978c:	2f f8       	sub	r8,-1
8000978e:	50 69       	stdsp	sp[0x18],r9
80009790:	50 d8       	stdsp	sp[0x34],r8
80009792:	30 17       	mov	r7,1
80009794:	c0 28       	rjmp	80009798 <_dtoa_r+0x908>
80009796:	30 07       	mov	r7,0
80009798:	40 ec       	lddsp	r12,sp[0x38]
8000979a:	58 0c       	cp.w	r12,0
8000979c:	c0 31       	brne	800097a2 <_dtoa_r+0x912>
8000979e:	30 18       	mov	r8,1
800097a0:	c0 a8       	rjmp	800097b4 <_dtoa_r+0x924>
800097a2:	41 1a       	lddsp	r10,sp[0x44]
800097a4:	74 48       	ld.w	r8,r10[0x10]
800097a6:	2f c8       	sub	r8,-4
800097a8:	f4 08 03 2c 	ld.w	r12,r10[r8<<0x2]
800097ac:	f0 1f 00 d4 	mcall	80009afc <_dtoa_r+0xc6c>
800097b0:	f8 08 11 20 	rsub	r8,r12,32
800097b4:	40 d9       	lddsp	r9,sp[0x34]
800097b6:	12 08       	add	r8,r9
800097b8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800097bc:	c0 f0       	breq	800097da <_dtoa_r+0x94a>
800097be:	f0 08 11 20 	rsub	r8,r8,32
800097c2:	58 48       	cp.w	r8,4
800097c4:	e0 8a 00 09 	brle	800097d6 <_dtoa_r+0x946>
800097c8:	20 48       	sub	r8,4
800097ca:	40 6c       	lddsp	r12,sp[0x18]
800097cc:	10 09       	add	r9,r8
800097ce:	10 0c       	add	r12,r8
800097d0:	50 d9       	stdsp	sp[0x34],r9
800097d2:	50 6c       	stdsp	sp[0x18],r12
800097d4:	c0 a8       	rjmp	800097e8 <_dtoa_r+0x958>
800097d6:	58 48       	cp.w	r8,4
800097d8:	c0 90       	breq	800097ea <_dtoa_r+0x95a>
800097da:	2e 48       	sub	r8,-28
800097dc:	40 da       	lddsp	r10,sp[0x34]
800097de:	40 69       	lddsp	r9,sp[0x18]
800097e0:	10 0a       	add	r10,r8
800097e2:	10 09       	add	r9,r8
800097e4:	50 da       	stdsp	sp[0x34],r10
800097e6:	50 69       	stdsp	sp[0x18],r9
800097e8:	10 05       	add	r5,r8
800097ea:	40 68       	lddsp	r8,sp[0x18]
800097ec:	58 08       	cp.w	r8,0
800097ee:	e0 8a 00 08 	brle	800097fe <_dtoa_r+0x96e>
800097f2:	10 9a       	mov	r10,r8
800097f4:	41 0b       	lddsp	r11,sp[0x40]
800097f6:	40 5c       	lddsp	r12,sp[0x14]
800097f8:	f0 1f 00 c2 	mcall	80009b00 <_dtoa_r+0xc70>
800097fc:	51 0c       	stdsp	sp[0x40],r12
800097fe:	40 dc       	lddsp	r12,sp[0x34]
80009800:	58 0c       	cp.w	r12,0
80009802:	e0 8a 00 08 	brle	80009812 <_dtoa_r+0x982>
80009806:	18 9a       	mov	r10,r12
80009808:	41 1b       	lddsp	r11,sp[0x44]
8000980a:	40 5c       	lddsp	r12,sp[0x14]
8000980c:	f0 1f 00 bd 	mcall	80009b00 <_dtoa_r+0xc70>
80009810:	51 1c       	stdsp	sp[0x44],r12
80009812:	40 ba       	lddsp	r10,sp[0x2c]
80009814:	58 0a       	cp.w	r10,0
80009816:	c1 f0       	breq	80009854 <_dtoa_r+0x9c4>
80009818:	41 1b       	lddsp	r11,sp[0x44]
8000981a:	41 0c       	lddsp	r12,sp[0x40]
8000981c:	f0 1f 00 ba 	mcall	80009b04 <_dtoa_r+0xc74>
80009820:	c1 a4       	brge	80009854 <_dtoa_r+0x9c4>
80009822:	40 a9       	lddsp	r9,sp[0x28]
80009824:	20 19       	sub	r9,1
80009826:	41 0b       	lddsp	r11,sp[0x40]
80009828:	50 a9       	stdsp	sp[0x28],r9
8000982a:	30 aa       	mov	r10,10
8000982c:	30 09       	mov	r9,0
8000982e:	40 5c       	lddsp	r12,sp[0x14]
80009830:	f0 1f 00 b6 	mcall	80009b08 <_dtoa_r+0xc78>
80009834:	51 0c       	stdsp	sp[0x40],r12
80009836:	40 c8       	lddsp	r8,sp[0x30]
80009838:	58 08       	cp.w	r8,0
8000983a:	c0 41       	brne	80009842 <_dtoa_r+0x9b2>
8000983c:	40 9c       	lddsp	r12,sp[0x24]
8000983e:	50 8c       	stdsp	sp[0x20],r12
80009840:	c0 a8       	rjmp	80009854 <_dtoa_r+0x9c4>
80009842:	40 9a       	lddsp	r10,sp[0x24]
80009844:	08 9b       	mov	r11,r4
80009846:	50 8a       	stdsp	sp[0x20],r10
80009848:	30 09       	mov	r9,0
8000984a:	30 aa       	mov	r10,10
8000984c:	40 5c       	lddsp	r12,sp[0x14]
8000984e:	f0 1f 00 af 	mcall	80009b08 <_dtoa_r+0xc78>
80009852:	18 94       	mov	r4,r12
80009854:	40 89       	lddsp	r9,sp[0x20]
80009856:	40 4c       	lddsp	r12,sp[0x10]
80009858:	58 09       	cp.w	r9,0
8000985a:	5f a8       	srle	r8
8000985c:	58 2c       	cp.w	r12,2
8000985e:	5f 99       	srgt	r9
80009860:	12 68       	and	r8,r9
80009862:	c2 50       	breq	800098ac <_dtoa_r+0xa1c>
80009864:	40 8a       	lddsp	r10,sp[0x20]
80009866:	58 0a       	cp.w	r10,0
80009868:	c1 11       	brne	8000988a <_dtoa_r+0x9fa>
8000986a:	14 99       	mov	r9,r10
8000986c:	41 1b       	lddsp	r11,sp[0x44]
8000986e:	30 5a       	mov	r10,5
80009870:	40 5c       	lddsp	r12,sp[0x14]
80009872:	f0 1f 00 a6 	mcall	80009b08 <_dtoa_r+0xc78>
80009876:	51 1c       	stdsp	sp[0x44],r12
80009878:	18 9b       	mov	r11,r12
8000987a:	41 0c       	lddsp	r12,sp[0x40]
8000987c:	f0 1f 00 a2 	mcall	80009b04 <_dtoa_r+0xc74>
80009880:	e0 89 00 0e 	brgt	8000989c <_dtoa_r+0xa0c>
80009884:	c0 38       	rjmp	8000988a <_dtoa_r+0x9fa>
80009886:	30 04       	mov	r4,0
80009888:	51 14       	stdsp	sp[0x44],r4
8000988a:	40 39       	lddsp	r9,sp[0xc]
8000988c:	41 61       	lddsp	r1,sp[0x58]
8000988e:	5c d9       	com	r9
80009890:	51 39       	stdsp	sp[0x4c],r9
80009892:	c0 b8       	rjmp	800098a8 <_dtoa_r+0xa18>
80009894:	41 38       	lddsp	r8,sp[0x4c]
80009896:	41 24       	lddsp	r4,sp[0x48]
80009898:	50 a8       	stdsp	sp[0x28],r8
8000989a:	51 14       	stdsp	sp[0x44],r4
8000989c:	40 ac       	lddsp	r12,sp[0x28]
8000989e:	2f fc       	sub	r12,-1
800098a0:	51 3c       	stdsp	sp[0x4c],r12
800098a2:	41 61       	lddsp	r1,sp[0x58]
800098a4:	33 18       	mov	r8,49
800098a6:	02 c8       	st.b	r1++,r8
800098a8:	30 02       	mov	r2,0
800098aa:	cf 78       	rjmp	80009a98 <_dtoa_r+0xc08>
800098ac:	40 ca       	lddsp	r10,sp[0x30]
800098ae:	58 0a       	cp.w	r10,0
800098b0:	e0 80 00 ad 	breq	80009a0a <_dtoa_r+0xb7a>
800098b4:	58 05       	cp.w	r5,0
800098b6:	e0 8a 00 08 	brle	800098c6 <_dtoa_r+0xa36>
800098ba:	08 9b       	mov	r11,r4
800098bc:	0a 9a       	mov	r10,r5
800098be:	40 5c       	lddsp	r12,sp[0x14]
800098c0:	f0 1f 00 90 	mcall	80009b00 <_dtoa_r+0xc70>
800098c4:	18 94       	mov	r4,r12
800098c6:	58 07       	cp.w	r7,0
800098c8:	c0 31       	brne	800098ce <_dtoa_r+0xa3e>
800098ca:	08 9c       	mov	r12,r4
800098cc:	c1 38       	rjmp	800098f2 <_dtoa_r+0xa62>
800098ce:	68 1b       	ld.w	r11,r4[0x4]
800098d0:	40 5c       	lddsp	r12,sp[0x14]
800098d2:	f0 1f 00 8f 	mcall	80009b0c <_dtoa_r+0xc7c>
800098d6:	68 4a       	ld.w	r10,r4[0x10]
800098d8:	18 96       	mov	r6,r12
800098da:	e8 cb ff f4 	sub	r11,r4,-12
800098de:	2f ea       	sub	r10,-2
800098e0:	2f 4c       	sub	r12,-12
800098e2:	a3 6a       	lsl	r10,0x2
800098e4:	f0 1f 00 8b 	mcall	80009b10 <_dtoa_r+0xc80>
800098e8:	0c 9b       	mov	r11,r6
800098ea:	30 1a       	mov	r10,1
800098ec:	40 5c       	lddsp	r12,sp[0x14]
800098ee:	f0 1f 00 85 	mcall	80009b00 <_dtoa_r+0xc70>
800098f2:	08 92       	mov	r2,r4
800098f4:	41 61       	lddsp	r1,sp[0x58]
800098f6:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800098fa:	02 99       	mov	r9,r1
800098fc:	18 94       	mov	r4,r12
800098fe:	5c 39       	neg	r9
80009900:	50 09       	stdsp	sp[0x0],r9
80009902:	41 1b       	lddsp	r11,sp[0x44]
80009904:	41 0c       	lddsp	r12,sp[0x40]
80009906:	f0 1f 00 84 	mcall	80009b14 <_dtoa_r+0xc84>
8000990a:	04 9b       	mov	r11,r2
8000990c:	f8 c6 ff d0 	sub	r6,r12,-48
80009910:	41 0c       	lddsp	r12,sp[0x40]
80009912:	f0 1f 00 7d 	mcall	80009b04 <_dtoa_r+0xc74>
80009916:	08 9a       	mov	r10,r4
80009918:	18 93       	mov	r3,r12
8000991a:	41 1b       	lddsp	r11,sp[0x44]
8000991c:	40 5c       	lddsp	r12,sp[0x14]
8000991e:	f0 1f 00 7f 	mcall	80009b18 <_dtoa_r+0xc88>
80009922:	18 97       	mov	r7,r12
80009924:	78 38       	ld.w	r8,r12[0xc]
80009926:	58 08       	cp.w	r8,0
80009928:	c0 30       	breq	8000992e <_dtoa_r+0xa9e>
8000992a:	30 15       	mov	r5,1
8000992c:	c0 68       	rjmp	80009938 <_dtoa_r+0xaa8>
8000992e:	18 9b       	mov	r11,r12
80009930:	41 0c       	lddsp	r12,sp[0x40]
80009932:	f0 1f 00 75 	mcall	80009b04 <_dtoa_r+0xc74>
80009936:	18 95       	mov	r5,r12
80009938:	40 5c       	lddsp	r12,sp[0x14]
8000993a:	0e 9b       	mov	r11,r7
8000993c:	f0 1f 00 6f 	mcall	80009af8 <_dtoa_r+0xc68>
80009940:	40 4c       	lddsp	r12,sp[0x10]
80009942:	eb ec 10 08 	or	r8,r5,r12
80009946:	c0 d1       	brne	80009960 <_dtoa_r+0xad0>
80009948:	58 00       	cp.w	r0,0
8000994a:	c0 b1       	brne	80009960 <_dtoa_r+0xad0>
8000994c:	e0 46 00 39 	cp.w	r6,57
80009950:	c2 e0       	breq	800099ac <_dtoa_r+0xb1c>
80009952:	58 03       	cp.w	r3,0
80009954:	f7 b6 09 ff 	subgt	r6,-1
80009958:	02 c6       	st.b	r1++,r6
8000995a:	40 aa       	lddsp	r10,sp[0x28]
8000995c:	51 3a       	stdsp	sp[0x4c],r10
8000995e:	c9 d8       	rjmp	80009a98 <_dtoa_r+0xc08>
80009960:	58 03       	cp.w	r3,0
80009962:	c0 75       	brlt	80009970 <_dtoa_r+0xae0>
80009964:	40 49       	lddsp	r9,sp[0x10]
80009966:	e7 e9 10 08 	or	r8,r3,r9
8000996a:	c1 b1       	brne	800099a0 <_dtoa_r+0xb10>
8000996c:	58 00       	cp.w	r0,0
8000996e:	c1 91       	brne	800099a0 <_dtoa_r+0xb10>
80009970:	58 05       	cp.w	r5,0
80009972:	e0 8a 00 15 	brle	8000999c <_dtoa_r+0xb0c>
80009976:	41 0b       	lddsp	r11,sp[0x40]
80009978:	30 1a       	mov	r10,1
8000997a:	40 5c       	lddsp	r12,sp[0x14]
8000997c:	f0 1f 00 61 	mcall	80009b00 <_dtoa_r+0xc70>
80009980:	41 1b       	lddsp	r11,sp[0x44]
80009982:	51 0c       	stdsp	sp[0x40],r12
80009984:	f0 1f 00 60 	mcall	80009b04 <_dtoa_r+0xc74>
80009988:	e0 89 00 06 	brgt	80009994 <_dtoa_r+0xb04>
8000998c:	c0 81       	brne	8000999c <_dtoa_r+0xb0c>
8000998e:	ed b6 00 00 	bld	r6,0x0
80009992:	c0 51       	brne	8000999c <_dtoa_r+0xb0c>
80009994:	e0 46 00 39 	cp.w	r6,57
80009998:	c0 a0       	breq	800099ac <_dtoa_r+0xb1c>
8000999a:	2f f6       	sub	r6,-1
8000999c:	02 c6       	st.b	r1++,r6
8000999e:	c7 08       	rjmp	80009a7e <_dtoa_r+0xbee>
800099a0:	58 05       	cp.w	r5,0
800099a2:	e0 8a 00 0c 	brle	800099ba <_dtoa_r+0xb2a>
800099a6:	e0 46 00 39 	cp.w	r6,57
800099aa:	c0 41       	brne	800099b2 <_dtoa_r+0xb22>
800099ac:	33 98       	mov	r8,57
800099ae:	02 c8       	st.b	r1++,r8
800099b0:	c5 f8       	rjmp	80009a6e <_dtoa_r+0xbde>
800099b2:	ec c8 ff ff 	sub	r8,r6,-1
800099b6:	02 c8       	st.b	r1++,r8
800099b8:	c6 e8       	rjmp	80009a94 <_dtoa_r+0xc04>
800099ba:	02 c6       	st.b	r1++,r6
800099bc:	40 0a       	lddsp	r10,sp[0x0]
800099be:	40 89       	lddsp	r9,sp[0x20]
800099c0:	e2 0a 00 08 	add	r8,r1,r10
800099c4:	12 38       	cp.w	r8,r9
800099c6:	c3 80       	breq	80009a36 <_dtoa_r+0xba6>
800099c8:	41 0b       	lddsp	r11,sp[0x40]
800099ca:	30 09       	mov	r9,0
800099cc:	30 aa       	mov	r10,10
800099ce:	40 5c       	lddsp	r12,sp[0x14]
800099d0:	f0 1f 00 4e 	mcall	80009b08 <_dtoa_r+0xc78>
800099d4:	51 0c       	stdsp	sp[0x40],r12
800099d6:	08 32       	cp.w	r2,r4
800099d8:	c0 a1       	brne	800099ec <_dtoa_r+0xb5c>
800099da:	04 9b       	mov	r11,r2
800099dc:	30 09       	mov	r9,0
800099de:	30 aa       	mov	r10,10
800099e0:	40 5c       	lddsp	r12,sp[0x14]
800099e2:	f0 1f 00 4a 	mcall	80009b08 <_dtoa_r+0xc78>
800099e6:	18 92       	mov	r2,r12
800099e8:	18 94       	mov	r4,r12
800099ea:	c8 cb       	rjmp	80009902 <_dtoa_r+0xa72>
800099ec:	04 9b       	mov	r11,r2
800099ee:	30 09       	mov	r9,0
800099f0:	30 aa       	mov	r10,10
800099f2:	40 5c       	lddsp	r12,sp[0x14]
800099f4:	f0 1f 00 45 	mcall	80009b08 <_dtoa_r+0xc78>
800099f8:	08 9b       	mov	r11,r4
800099fa:	18 92       	mov	r2,r12
800099fc:	30 09       	mov	r9,0
800099fe:	30 aa       	mov	r10,10
80009a00:	40 5c       	lddsp	r12,sp[0x14]
80009a02:	f0 1f 00 42 	mcall	80009b08 <_dtoa_r+0xc78>
80009a06:	18 94       	mov	r4,r12
80009a08:	c7 db       	rjmp	80009902 <_dtoa_r+0xa72>
80009a0a:	41 61       	lddsp	r1,sp[0x58]
80009a0c:	30 17       	mov	r7,1
80009a0e:	41 1b       	lddsp	r11,sp[0x44]
80009a10:	41 0c       	lddsp	r12,sp[0x40]
80009a12:	f0 1f 00 41 	mcall	80009b14 <_dtoa_r+0xc84>
80009a16:	f8 c6 ff d0 	sub	r6,r12,-48
80009a1a:	02 c6       	st.b	r1++,r6
80009a1c:	40 88       	lddsp	r8,sp[0x20]
80009a1e:	10 37       	cp.w	r7,r8
80009a20:	c0 a4       	brge	80009a34 <_dtoa_r+0xba4>
80009a22:	41 0b       	lddsp	r11,sp[0x40]
80009a24:	2f f7       	sub	r7,-1
80009a26:	30 09       	mov	r9,0
80009a28:	30 aa       	mov	r10,10
80009a2a:	40 5c       	lddsp	r12,sp[0x14]
80009a2c:	f0 1f 00 37 	mcall	80009b08 <_dtoa_r+0xc78>
80009a30:	51 0c       	stdsp	sp[0x40],r12
80009a32:	ce eb       	rjmp	80009a0e <_dtoa_r+0xb7e>
80009a34:	30 02       	mov	r2,0
80009a36:	41 0b       	lddsp	r11,sp[0x40]
80009a38:	30 1a       	mov	r10,1
80009a3a:	40 5c       	lddsp	r12,sp[0x14]
80009a3c:	f0 1f 00 31 	mcall	80009b00 <_dtoa_r+0xc70>
80009a40:	41 1b       	lddsp	r11,sp[0x44]
80009a42:	51 0c       	stdsp	sp[0x40],r12
80009a44:	f0 1f 00 30 	mcall	80009b04 <_dtoa_r+0xc74>
80009a48:	e0 89 00 13 	brgt	80009a6e <_dtoa_r+0xbde>
80009a4c:	c1 e1       	brne	80009a88 <_dtoa_r+0xbf8>
80009a4e:	ed b6 00 00 	bld	r6,0x0
80009a52:	c0 e0       	breq	80009a6e <_dtoa_r+0xbde>
80009a54:	c1 a8       	rjmp	80009a88 <_dtoa_r+0xbf8>
80009a56:	41 6c       	lddsp	r12,sp[0x58]
80009a58:	18 39       	cp.w	r9,r12
80009a5a:	c0 30       	breq	80009a60 <_dtoa_r+0xbd0>
80009a5c:	12 91       	mov	r1,r9
80009a5e:	c0 98       	rjmp	80009a70 <_dtoa_r+0xbe0>
80009a60:	40 aa       	lddsp	r10,sp[0x28]
80009a62:	2f fa       	sub	r10,-1
80009a64:	51 3a       	stdsp	sp[0x4c],r10
80009a66:	33 18       	mov	r8,49
80009a68:	41 69       	lddsp	r9,sp[0x58]
80009a6a:	b2 88       	st.b	r9[0x0],r8
80009a6c:	c1 68       	rjmp	80009a98 <_dtoa_r+0xc08>
80009a6e:	33 9a       	mov	r10,57
80009a70:	02 99       	mov	r9,r1
80009a72:	13 78       	ld.ub	r8,--r9
80009a74:	f4 08 18 00 	cp.b	r8,r10
80009a78:	ce f0       	breq	80009a56 <_dtoa_r+0xbc6>
80009a7a:	2f f8       	sub	r8,-1
80009a7c:	b2 88       	st.b	r9[0x0],r8
80009a7e:	40 a8       	lddsp	r8,sp[0x28]
80009a80:	51 38       	stdsp	sp[0x4c],r8
80009a82:	c0 b8       	rjmp	80009a98 <_dtoa_r+0xc08>
80009a84:	12 91       	mov	r1,r9
80009a86:	c0 28       	rjmp	80009a8a <_dtoa_r+0xbfa>
80009a88:	33 0a       	mov	r10,48
80009a8a:	02 99       	mov	r9,r1
80009a8c:	13 78       	ld.ub	r8,--r9
80009a8e:	f4 08 18 00 	cp.b	r8,r10
80009a92:	cf 90       	breq	80009a84 <_dtoa_r+0xbf4>
80009a94:	40 ac       	lddsp	r12,sp[0x28]
80009a96:	51 3c       	stdsp	sp[0x4c],r12
80009a98:	41 1b       	lddsp	r11,sp[0x44]
80009a9a:	40 5c       	lddsp	r12,sp[0x14]
80009a9c:	f0 1f 00 17 	mcall	80009af8 <_dtoa_r+0xc68>
80009aa0:	58 04       	cp.w	r4,0
80009aa2:	c1 20       	breq	80009ac6 <_dtoa_r+0xc36>
80009aa4:	58 02       	cp.w	r2,0
80009aa6:	5f 18       	srne	r8
80009aa8:	08 32       	cp.w	r2,r4
80009aaa:	5f 19       	srne	r9
80009aac:	12 68       	and	r8,r9
80009aae:	c0 50       	breq	80009ab8 <_dtoa_r+0xc28>
80009ab0:	04 9b       	mov	r11,r2
80009ab2:	40 5c       	lddsp	r12,sp[0x14]
80009ab4:	f0 1f 00 11 	mcall	80009af8 <_dtoa_r+0xc68>
80009ab8:	08 9b       	mov	r11,r4
80009aba:	40 5c       	lddsp	r12,sp[0x14]
80009abc:	f0 1f 00 0f 	mcall	80009af8 <_dtoa_r+0xc68>
80009ac0:	c0 38       	rjmp	80009ac6 <_dtoa_r+0xc36>
80009ac2:	40 aa       	lddsp	r10,sp[0x28]
80009ac4:	51 3a       	stdsp	sp[0x4c],r10
80009ac6:	40 5c       	lddsp	r12,sp[0x14]
80009ac8:	41 0b       	lddsp	r11,sp[0x40]
80009aca:	f0 1f 00 0c 	mcall	80009af8 <_dtoa_r+0xc68>
80009ace:	30 08       	mov	r8,0
80009ad0:	a2 88       	st.b	r1[0x0],r8
80009ad2:	41 38       	lddsp	r8,sp[0x4c]
80009ad4:	2f f8       	sub	r8,-1
80009ad6:	40 29       	lddsp	r9,sp[0x8]
80009ad8:	93 08       	st.w	r9[0x0],r8
80009ada:	40 18       	lddsp	r8,sp[0x4]
80009adc:	58 08       	cp.w	r8,0
80009ade:	fb fc 10 01 	ld.wne	r12,sp[0x4]
80009ae2:	f9 f1 1a 00 	st.wne	r12[0x0],r1
80009ae6:	41 6c       	lddsp	r12,sp[0x58]
80009ae8:	2e 7d       	sub	sp,-100
80009aea:	d8 32       	popm	r0-r7,pc
80009aec:	80 00       	ld.sh	r0,r0[0x0]
80009aee:	a7 88       	lsr	r8,0x6
80009af0:	80 00       	ld.sh	r0,r0[0x0]
80009af2:	a8 30       	st.h	r4[0x6],r0
80009af4:	80 00       	ld.sh	r0,r0[0x0]
80009af6:	a6 7c       	st.h	r3[0xe],r12
80009af8:	80 00       	ld.sh	r0,r0[0x0]
80009afa:	a3 9c       	lsr	r12,0x3
80009afc:	80 00       	ld.sh	r0,r0[0x0]
80009afe:	a2 78       	st.h	r1[0xe],r8
80009b00:	80 00       	ld.sh	r0,r0[0x0]
80009b02:	a5 e4       	*unknown*
80009b04:	80 00       	ld.sh	r0,r0[0x0]
80009b06:	a3 62       	lsl	r2,0x2
80009b08:	80 00       	ld.sh	r0,r0[0x0]
80009b0a:	a7 a0       	sbr	r0,0x6
80009b0c:	80 00       	ld.sh	r0,r0[0x0]
80009b0e:	a3 d4       	cbr	r4,0x3
80009b10:	80 00       	ld.sh	r0,r0[0x0]
80009b12:	a0 f2       	st.b	r0[0x7],r2
80009b14:	80 00       	ld.sh	r0,r0[0x0]
80009b16:	8d 68       	st.w	r6[0x18],r8
80009b18:	80 00       	ld.sh	r0,r0[0x0]
80009b1a:	a5 08       	ld.d	r8,r2

80009b1c <_fclose_r>:
80009b1c:	d4 21       	pushm	r4-r7,lr
80009b1e:	18 96       	mov	r6,r12
80009b20:	16 97       	mov	r7,r11
80009b22:	58 0b       	cp.w	r11,0
80009b24:	c0 31       	brne	80009b2a <_fclose_r+0xe>
80009b26:	16 95       	mov	r5,r11
80009b28:	c5 08       	rjmp	80009bc8 <_fclose_r+0xac>
80009b2a:	f0 1f 00 29 	mcall	80009bcc <_fclose_r+0xb0>
80009b2e:	58 06       	cp.w	r6,0
80009b30:	c0 70       	breq	80009b3e <_fclose_r+0x22>
80009b32:	6c 68       	ld.w	r8,r6[0x18]
80009b34:	58 08       	cp.w	r8,0
80009b36:	c0 41       	brne	80009b3e <_fclose_r+0x22>
80009b38:	0c 9c       	mov	r12,r6
80009b3a:	f0 1f 00 26 	mcall	80009bd0 <_fclose_r+0xb4>
80009b3e:	4a 68       	lddpc	r8,80009bd4 <_fclose_r+0xb8>
80009b40:	10 37       	cp.w	r7,r8
80009b42:	c0 31       	brne	80009b48 <_fclose_r+0x2c>
80009b44:	6c 07       	ld.w	r7,r6[0x0]
80009b46:	c0 a8       	rjmp	80009b5a <_fclose_r+0x3e>
80009b48:	4a 48       	lddpc	r8,80009bd8 <_fclose_r+0xbc>
80009b4a:	10 37       	cp.w	r7,r8
80009b4c:	c0 31       	brne	80009b52 <_fclose_r+0x36>
80009b4e:	6c 17       	ld.w	r7,r6[0x4]
80009b50:	c0 58       	rjmp	80009b5a <_fclose_r+0x3e>
80009b52:	4a 38       	lddpc	r8,80009bdc <_fclose_r+0xc0>
80009b54:	10 37       	cp.w	r7,r8
80009b56:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80009b5a:	8e 69       	ld.sh	r9,r7[0xc]
80009b5c:	30 08       	mov	r8,0
80009b5e:	f0 09 19 00 	cp.h	r9,r8
80009b62:	c0 51       	brne	80009b6c <_fclose_r+0x50>
80009b64:	f0 1f 00 1f 	mcall	80009be0 <_fclose_r+0xc4>
80009b68:	30 05       	mov	r5,0
80009b6a:	c2 f8       	rjmp	80009bc8 <_fclose_r+0xac>
80009b6c:	0e 9b       	mov	r11,r7
80009b6e:	0c 9c       	mov	r12,r6
80009b70:	f0 1f 00 1d 	mcall	80009be4 <_fclose_r+0xc8>
80009b74:	6e c8       	ld.w	r8,r7[0x30]
80009b76:	18 95       	mov	r5,r12
80009b78:	58 08       	cp.w	r8,0
80009b7a:	c0 60       	breq	80009b86 <_fclose_r+0x6a>
80009b7c:	6e 8b       	ld.w	r11,r7[0x20]
80009b7e:	0c 9c       	mov	r12,r6
80009b80:	5d 18       	icall	r8
80009b82:	f9 b5 05 ff 	movlt	r5,-1
80009b86:	8e 68       	ld.sh	r8,r7[0xc]
80009b88:	ed b8 00 07 	bld	r8,0x7
80009b8c:	c0 51       	brne	80009b96 <_fclose_r+0x7a>
80009b8e:	6e 4b       	ld.w	r11,r7[0x10]
80009b90:	0c 9c       	mov	r12,r6
80009b92:	f0 1f 00 16 	mcall	80009be8 <_fclose_r+0xcc>
80009b96:	6e db       	ld.w	r11,r7[0x34]
80009b98:	58 0b       	cp.w	r11,0
80009b9a:	c0 a0       	breq	80009bae <_fclose_r+0x92>
80009b9c:	ee c8 ff bc 	sub	r8,r7,-68
80009ba0:	10 3b       	cp.w	r11,r8
80009ba2:	c0 40       	breq	80009baa <_fclose_r+0x8e>
80009ba4:	0c 9c       	mov	r12,r6
80009ba6:	f0 1f 00 11 	mcall	80009be8 <_fclose_r+0xcc>
80009baa:	30 08       	mov	r8,0
80009bac:	8f d8       	st.w	r7[0x34],r8
80009bae:	6f 2b       	ld.w	r11,r7[0x48]
80009bb0:	58 0b       	cp.w	r11,0
80009bb2:	c0 70       	breq	80009bc0 <_fclose_r+0xa4>
80009bb4:	0c 9c       	mov	r12,r6
80009bb6:	f0 1f 00 0d 	mcall	80009be8 <_fclose_r+0xcc>
80009bba:	30 08       	mov	r8,0
80009bbc:	ef 48 00 48 	st.w	r7[72],r8
80009bc0:	30 08       	mov	r8,0
80009bc2:	ae 68       	st.h	r7[0xc],r8
80009bc4:	f0 1f 00 07 	mcall	80009be0 <_fclose_r+0xc4>
80009bc8:	0a 9c       	mov	r12,r5
80009bca:	d8 22       	popm	r4-r7,pc
80009bcc:	80 00       	ld.sh	r0,r0[0x0]
80009bce:	65 50       	ld.w	r0,r2[0x54]
80009bd0:	80 00       	ld.sh	r0,r0[0x0]
80009bd2:	66 14       	ld.w	r4,r3[0x4]
80009bd4:	80 00       	ld.sh	r0,r0[0x0]
80009bd6:	b8 fc       	st.b	r12[0x7],r12
80009bd8:	80 00       	ld.sh	r0,r0[0x0]
80009bda:	b9 1c       	ld.d	r12,--r12
80009bdc:	80 00       	ld.sh	r0,r0[0x0]
80009bde:	b9 3c       	mul	r12,r12
80009be0:	80 00       	ld.sh	r0,r0[0x0]
80009be2:	65 52       	ld.w	r2,r2[0x54]
80009be4:	80 00       	ld.sh	r0,r0[0x0]
80009be6:	9c 04       	ld.sh	r4,lr[0x0]
80009be8:	80 00       	ld.sh	r0,r0[0x0]
80009bea:	67 6c       	ld.w	r12,r3[0x58]

80009bec <fclose>:
80009bec:	d4 01       	pushm	lr
80009bee:	48 48       	lddpc	r8,80009bfc <fclose+0x10>
80009bf0:	18 9b       	mov	r11,r12
80009bf2:	70 0c       	ld.w	r12,r8[0x0]
80009bf4:	f0 1f 00 03 	mcall	80009c00 <fclose+0x14>
80009bf8:	d8 02       	popm	pc
80009bfa:	00 00       	add	r0,r0
80009bfc:	00 00       	add	r0,r0
80009bfe:	01 30       	ld.ub	r0,r0++
80009c00:	80 00       	ld.sh	r0,r0[0x0]
80009c02:	9b 1c       	st.w	sp[0x4],r12

80009c04 <_fflush_r>:
80009c04:	d4 21       	pushm	r4-r7,lr
80009c06:	16 97       	mov	r7,r11
80009c08:	18 94       	mov	r4,r12
80009c0a:	76 48       	ld.w	r8,r11[0x10]
80009c0c:	58 08       	cp.w	r8,0
80009c0e:	c7 e0       	breq	80009d0a <_fflush_r+0x106>
80009c10:	58 0c       	cp.w	r12,0
80009c12:	c0 60       	breq	80009c1e <_fflush_r+0x1a>
80009c14:	78 68       	ld.w	r8,r12[0x18]
80009c16:	58 08       	cp.w	r8,0
80009c18:	c0 31       	brne	80009c1e <_fflush_r+0x1a>
80009c1a:	f0 1f 00 3d 	mcall	80009d0c <_fflush_r+0x108>
80009c1e:	4b d8       	lddpc	r8,80009d10 <_fflush_r+0x10c>
80009c20:	10 37       	cp.w	r7,r8
80009c22:	c0 31       	brne	80009c28 <_fflush_r+0x24>
80009c24:	68 07       	ld.w	r7,r4[0x0]
80009c26:	c0 a8       	rjmp	80009c3a <_fflush_r+0x36>
80009c28:	4b b8       	lddpc	r8,80009d14 <_fflush_r+0x110>
80009c2a:	10 37       	cp.w	r7,r8
80009c2c:	c0 31       	brne	80009c32 <_fflush_r+0x2e>
80009c2e:	68 17       	ld.w	r7,r4[0x4]
80009c30:	c0 58       	rjmp	80009c3a <_fflush_r+0x36>
80009c32:	4b a8       	lddpc	r8,80009d18 <_fflush_r+0x114>
80009c34:	10 37       	cp.w	r7,r8
80009c36:	e9 f7 00 02 	ld.weq	r7,r4[0x8]
80009c3a:	8e 6a       	ld.sh	r10,r7[0xc]
80009c3c:	ed ba 00 03 	bld	r10,0x3
80009c40:	c4 30       	breq	80009cc6 <_fflush_r+0xc2>
80009c42:	ab ba       	sbr	r10,0xb
80009c44:	ae 6a       	st.h	r7[0xc],r10
80009c46:	6e 18       	ld.w	r8,r7[0x4]
80009c48:	58 08       	cp.w	r8,0
80009c4a:	e0 89 00 06 	brgt	80009c56 <_fflush_r+0x52>
80009c4e:	6f 08       	ld.w	r8,r7[0x40]
80009c50:	58 08       	cp.w	r8,0
80009c52:	e0 8a 00 5c 	brle	80009d0a <_fflush_r+0x106>
80009c56:	6e b8       	ld.w	r8,r7[0x2c]
80009c58:	58 08       	cp.w	r8,0
80009c5a:	c5 80       	breq	80009d0a <_fflush_r+0x106>
80009c5c:	e2 1a 10 00 	andl	r10,0x1000,COH
80009c60:	c0 30       	breq	80009c66 <_fflush_r+0x62>
80009c62:	6f 56       	ld.w	r6,r7[0x54]
80009c64:	c0 f8       	rjmp	80009c82 <_fflush_r+0x7e>
80009c66:	30 19       	mov	r9,1
80009c68:	6e 8b       	ld.w	r11,r7[0x20]
80009c6a:	08 9c       	mov	r12,r4
80009c6c:	5d 18       	icall	r8
80009c6e:	18 96       	mov	r6,r12
80009c70:	5b fc       	cp.w	r12,-1
80009c72:	c0 81       	brne	80009c82 <_fflush_r+0x7e>
80009c74:	68 38       	ld.w	r8,r4[0xc]
80009c76:	59 d8       	cp.w	r8,29
80009c78:	c4 90       	breq	80009d0a <_fflush_r+0x106>
80009c7a:	8e 68       	ld.sh	r8,r7[0xc]
80009c7c:	a7 a8       	sbr	r8,0x6
80009c7e:	ae 68       	st.h	r7[0xc],r8
80009c80:	d8 22       	popm	r4-r7,pc
80009c82:	8e 68       	ld.sh	r8,r7[0xc]
80009c84:	ed b8 00 02 	bld	r8,0x2
80009c88:	c0 91       	brne	80009c9a <_fflush_r+0x96>
80009c8a:	6e 18       	ld.w	r8,r7[0x4]
80009c8c:	10 16       	sub	r6,r8
80009c8e:	6e d8       	ld.w	r8,r7[0x34]
80009c90:	58 08       	cp.w	r8,0
80009c92:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80009c96:	ed d8 e1 16 	subne	r6,r6,r8
80009c9a:	6e b8       	ld.w	r8,r7[0x2c]
80009c9c:	08 9c       	mov	r12,r4
80009c9e:	30 09       	mov	r9,0
80009ca0:	0c 9a       	mov	r10,r6
80009ca2:	6e 8b       	ld.w	r11,r7[0x20]
80009ca4:	5d 18       	icall	r8
80009ca6:	8e 68       	ld.sh	r8,r7[0xc]
80009ca8:	0c 3c       	cp.w	r12,r6
80009caa:	c2 81       	brne	80009cfa <_fflush_r+0xf6>
80009cac:	ab d8       	cbr	r8,0xb
80009cae:	30 0c       	mov	r12,0
80009cb0:	ae 68       	st.h	r7[0xc],r8
80009cb2:	8f 1c       	st.w	r7[0x4],r12
80009cb4:	6e 48       	ld.w	r8,r7[0x10]
80009cb6:	8f 08       	st.w	r7[0x0],r8
80009cb8:	8e 68       	ld.sh	r8,r7[0xc]
80009cba:	ed b8 00 0c 	bld	r8,0xc
80009cbe:	c2 61       	brne	80009d0a <_fflush_r+0x106>
80009cc0:	ef 46 00 54 	st.w	r7[84],r6
80009cc4:	d8 22       	popm	r4-r7,pc
80009cc6:	6e 45       	ld.w	r5,r7[0x10]
80009cc8:	58 05       	cp.w	r5,0
80009cca:	c2 00       	breq	80009d0a <_fflush_r+0x106>
80009ccc:	6e 09       	ld.w	r9,r7[0x0]
80009cce:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80009cd2:	8f 05       	st.w	r7[0x0],r5
80009cd4:	f9 b8 01 00 	movne	r8,0
80009cd8:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80009cdc:	f2 05 01 06 	sub	r6,r9,r5
80009ce0:	8f 28       	st.w	r7[0x8],r8
80009ce2:	c1 18       	rjmp	80009d04 <_fflush_r+0x100>
80009ce4:	0c 99       	mov	r9,r6
80009ce6:	0a 9a       	mov	r10,r5
80009ce8:	6e a8       	ld.w	r8,r7[0x28]
80009cea:	6e 8b       	ld.w	r11,r7[0x20]
80009cec:	08 9c       	mov	r12,r4
80009cee:	5d 18       	icall	r8
80009cf0:	18 16       	sub	r6,r12
80009cf2:	58 0c       	cp.w	r12,0
80009cf4:	e0 89 00 07 	brgt	80009d02 <_fflush_r+0xfe>
80009cf8:	8e 68       	ld.sh	r8,r7[0xc]
80009cfa:	a7 a8       	sbr	r8,0x6
80009cfc:	3f fc       	mov	r12,-1
80009cfe:	ae 68       	st.h	r7[0xc],r8
80009d00:	d8 22       	popm	r4-r7,pc
80009d02:	18 05       	add	r5,r12
80009d04:	58 06       	cp.w	r6,0
80009d06:	fe 99 ff ef 	brgt	80009ce4 <_fflush_r+0xe0>
80009d0a:	d8 2a       	popm	r4-r7,pc,r12=0
80009d0c:	80 00       	ld.sh	r0,r0[0x0]
80009d0e:	66 14       	ld.w	r4,r3[0x4]
80009d10:	80 00       	ld.sh	r0,r0[0x0]
80009d12:	b8 fc       	st.b	r12[0x7],r12
80009d14:	80 00       	ld.sh	r0,r0[0x0]
80009d16:	b9 1c       	ld.d	r12,--r12
80009d18:	80 00       	ld.sh	r0,r0[0x0]
80009d1a:	b9 3c       	mul	r12,r12

80009d1c <__sfvwrite_r>:
80009d1c:	d4 31       	pushm	r0-r7,lr
80009d1e:	20 2d       	sub	sp,8
80009d20:	50 0a       	stdsp	sp[0x0],r10
80009d22:	50 1c       	stdsp	sp[0x4],r12
80009d24:	16 96       	mov	r6,r11
80009d26:	74 28       	ld.w	r8,r10[0x8]
80009d28:	58 08       	cp.w	r8,0
80009d2a:	e0 80 01 40 	breq	80009faa <__sfvwrite_r+0x28e>
80009d2e:	96 68       	ld.sh	r8,r11[0xc]
80009d30:	ed b8 00 03 	bld	r8,0x3
80009d34:	c0 41       	brne	80009d3c <__sfvwrite_r+0x20>
80009d36:	76 48       	ld.w	r8,r11[0x10]
80009d38:	58 08       	cp.w	r8,0
80009d3a:	c0 d1       	brne	80009d54 <__sfvwrite_r+0x38>
80009d3c:	0c 9b       	mov	r11,r6
80009d3e:	40 1c       	lddsp	r12,sp[0x4]
80009d40:	f0 1f 00 9c 	mcall	80009fb0 <__sfvwrite_r+0x294>
80009d44:	c0 80       	breq	80009d54 <__sfvwrite_r+0x38>
80009d46:	8c 68       	ld.sh	r8,r6[0xc]
80009d48:	a7 a8       	sbr	r8,0x6
80009d4a:	40 19       	lddsp	r9,sp[0x4]
80009d4c:	ac 68       	st.h	r6[0xc],r8
80009d4e:	30 98       	mov	r8,9
80009d50:	93 38       	st.w	r9[0xc],r8
80009d52:	c2 a9       	rjmp	80009fa6 <__sfvwrite_r+0x28a>
80009d54:	40 09       	lddsp	r9,sp[0x0]
80009d56:	8c 68       	ld.sh	r8,r6[0xc]
80009d58:	72 00       	ld.w	r0,r9[0x0]
80009d5a:	10 99       	mov	r9,r8
80009d5c:	e2 19 00 02 	andl	r9,0x2,COH
80009d60:	c2 20       	breq	80009da4 <__sfvwrite_r+0x88>
80009d62:	30 07       	mov	r7,0
80009d64:	e0 64 04 00 	mov	r4,1024
80009d68:	0e 95       	mov	r5,r7
80009d6a:	c0 48       	rjmp	80009d72 <__sfvwrite_r+0x56>
80009d6c:	60 05       	ld.w	r5,r0[0x0]
80009d6e:	60 17       	ld.w	r7,r0[0x4]
80009d70:	2f 80       	sub	r0,-8
80009d72:	58 07       	cp.w	r7,0
80009d74:	cf c0       	breq	80009d6c <__sfvwrite_r+0x50>
80009d76:	e0 47 04 00 	cp.w	r7,1024
80009d7a:	ee 09 17 80 	movls	r9,r7
80009d7e:	e8 09 17 b0 	movhi	r9,r4
80009d82:	0a 9a       	mov	r10,r5
80009d84:	6c a8       	ld.w	r8,r6[0x28]
80009d86:	6c 8b       	ld.w	r11,r6[0x20]
80009d88:	40 1c       	lddsp	r12,sp[0x4]
80009d8a:	5d 18       	icall	r8
80009d8c:	18 17       	sub	r7,r12
80009d8e:	58 0c       	cp.w	r12,0
80009d90:	e0 8a 01 08 	brle	80009fa0 <__sfvwrite_r+0x284>
80009d94:	40 09       	lddsp	r9,sp[0x0]
80009d96:	72 28       	ld.w	r8,r9[0x8]
80009d98:	18 18       	sub	r8,r12
80009d9a:	93 28       	st.w	r9[0x8],r8
80009d9c:	e0 80 01 07 	breq	80009faa <__sfvwrite_r+0x28e>
80009da0:	18 05       	add	r5,r12
80009da2:	ce 8b       	rjmp	80009d72 <__sfvwrite_r+0x56>
80009da4:	f5 d8 c0 01 	bfextu	r10,r8,0x0,0x1
80009da8:	c0 60       	breq	80009db4 <__sfvwrite_r+0x98>
80009daa:	12 94       	mov	r4,r9
80009dac:	12 92       	mov	r2,r9
80009dae:	12 91       	mov	r1,r9
80009db0:	12 93       	mov	r3,r9
80009db2:	c9 b8       	rjmp	80009ee8 <__sfvwrite_r+0x1cc>
80009db4:	14 94       	mov	r4,r10
80009db6:	30 21       	mov	r1,2
80009db8:	14 92       	mov	r2,r10
80009dba:	c0 48       	rjmp	80009dc2 <__sfvwrite_r+0xa6>
80009dbc:	60 02       	ld.w	r2,r0[0x0]
80009dbe:	60 14       	ld.w	r4,r0[0x4]
80009dc0:	2f 80       	sub	r0,-8
80009dc2:	58 04       	cp.w	r4,0
80009dc4:	cf c0       	breq	80009dbc <__sfvwrite_r+0xa0>
80009dc6:	8c 6c       	ld.sh	r12,r6[0xc]
80009dc8:	6c 27       	ld.w	r7,r6[0x8]
80009dca:	18 9a       	mov	r10,r12
80009dcc:	e2 1a 02 00 	andl	r10,0x200,COH
80009dd0:	c5 20       	breq	80009e74 <__sfvwrite_r+0x158>
80009dd2:	0e 34       	cp.w	r4,r7
80009dd4:	c4 03       	brcs	80009e54 <__sfvwrite_r+0x138>
80009dd6:	18 98       	mov	r8,r12
80009dd8:	e2 18 04 80 	andl	r8,0x480,COH
80009ddc:	c3 c0       	breq	80009e54 <__sfvwrite_r+0x138>
80009dde:	6c 08       	ld.w	r8,r6[0x0]
80009de0:	6c 4b       	ld.w	r11,r6[0x10]
80009de2:	6c 59       	ld.w	r9,r6[0x14]
80009de4:	f0 0b 01 03 	sub	r3,r8,r11
80009de8:	f2 09 00 19 	add	r9,r9,r9<<0x1
80009dec:	f2 01 0c 08 	divs	r8,r9,r1
80009df0:	e2 1c 04 00 	andl	r12,0x400,COH
80009df4:	10 97       	mov	r7,r8
80009df6:	e6 c8 ff ff 	sub	r8,r3,-1
80009dfa:	08 08       	add	r8,r4
80009dfc:	10 37       	cp.w	r7,r8
80009dfe:	f0 07 17 30 	movlo	r7,r8
80009e02:	58 0c       	cp.w	r12,0
80009e04:	c1 10       	breq	80009e26 <__sfvwrite_r+0x10a>
80009e06:	0e 9b       	mov	r11,r7
80009e08:	40 1c       	lddsp	r12,sp[0x4]
80009e0a:	f0 1f 00 6b 	mcall	80009fb4 <__sfvwrite_r+0x298>
80009e0e:	18 95       	mov	r5,r12
80009e10:	c1 50       	breq	80009e3a <__sfvwrite_r+0x11e>
80009e12:	06 9a       	mov	r10,r3
80009e14:	6c 4b       	ld.w	r11,r6[0x10]
80009e16:	f0 1f 00 69 	mcall	80009fb8 <__sfvwrite_r+0x29c>
80009e1a:	8c 68       	ld.sh	r8,r6[0xc]
80009e1c:	e0 18 fb 7f 	andl	r8,0xfb7f
80009e20:	a7 b8       	sbr	r8,0x7
80009e22:	ac 68       	st.h	r6[0xc],r8
80009e24:	c0 f8       	rjmp	80009e42 <__sfvwrite_r+0x126>
80009e26:	0e 9a       	mov	r10,r7
80009e28:	40 1c       	lddsp	r12,sp[0x4]
80009e2a:	f0 1f 00 65 	mcall	80009fbc <__sfvwrite_r+0x2a0>
80009e2e:	18 95       	mov	r5,r12
80009e30:	c0 91       	brne	80009e42 <__sfvwrite_r+0x126>
80009e32:	6c 4b       	ld.w	r11,r6[0x10]
80009e34:	40 1c       	lddsp	r12,sp[0x4]
80009e36:	f0 1f 00 63 	mcall	80009fc0 <__sfvwrite_r+0x2a4>
80009e3a:	30 c8       	mov	r8,12
80009e3c:	40 19       	lddsp	r9,sp[0x4]
80009e3e:	93 38       	st.w	r9[0xc],r8
80009e40:	cb 08       	rjmp	80009fa0 <__sfvwrite_r+0x284>
80009e42:	ee 03 01 08 	sub	r8,r7,r3
80009e46:	8d 57       	st.w	r6[0x14],r7
80009e48:	8d 28       	st.w	r6[0x8],r8
80009e4a:	8d 45       	st.w	r6[0x10],r5
80009e4c:	ea 03 00 08 	add	r8,r5,r3
80009e50:	08 97       	mov	r7,r4
80009e52:	8d 08       	st.w	r6[0x0],r8
80009e54:	0e 34       	cp.w	r4,r7
80009e56:	e8 07 17 30 	movlo	r7,r4
80009e5a:	04 9b       	mov	r11,r2
80009e5c:	0e 9a       	mov	r10,r7
80009e5e:	6c 0c       	ld.w	r12,r6[0x0]
80009e60:	f0 1f 00 59 	mcall	80009fc4 <__sfvwrite_r+0x2a8>
80009e64:	6c 08       	ld.w	r8,r6[0x0]
80009e66:	0e 08       	add	r8,r7
80009e68:	8d 08       	st.w	r6[0x0],r8
80009e6a:	6c 28       	ld.w	r8,r6[0x8]
80009e6c:	0e 18       	sub	r8,r7
80009e6e:	08 97       	mov	r7,r4
80009e70:	8d 28       	st.w	r6[0x8],r8
80009e72:	c2 f8       	rjmp	80009ed0 <__sfvwrite_r+0x1b4>
80009e74:	0e 34       	cp.w	r4,r7
80009e76:	5f b9       	srhi	r9
80009e78:	6c 0c       	ld.w	r12,r6[0x0]
80009e7a:	6c 48       	ld.w	r8,r6[0x10]
80009e7c:	10 3c       	cp.w	r12,r8
80009e7e:	5f b8       	srhi	r8
80009e80:	12 68       	and	r8,r9
80009e82:	f4 08 18 00 	cp.b	r8,r10
80009e86:	c0 e0       	breq	80009ea2 <__sfvwrite_r+0x186>
80009e88:	04 9b       	mov	r11,r2
80009e8a:	0e 9a       	mov	r10,r7
80009e8c:	f0 1f 00 4e 	mcall	80009fc4 <__sfvwrite_r+0x2a8>
80009e90:	6c 08       	ld.w	r8,r6[0x0]
80009e92:	0e 08       	add	r8,r7
80009e94:	0c 9b       	mov	r11,r6
80009e96:	8d 08       	st.w	r6[0x0],r8
80009e98:	40 1c       	lddsp	r12,sp[0x4]
80009e9a:	f0 1f 00 4c 	mcall	80009fc8 <__sfvwrite_r+0x2ac>
80009e9e:	c1 90       	breq	80009ed0 <__sfvwrite_r+0x1b4>
80009ea0:	c8 08       	rjmp	80009fa0 <__sfvwrite_r+0x284>
80009ea2:	6c 59       	ld.w	r9,r6[0x14]
80009ea4:	12 34       	cp.w	r4,r9
80009ea6:	c0 a3       	brcs	80009eba <__sfvwrite_r+0x19e>
80009ea8:	6c a8       	ld.w	r8,r6[0x28]
80009eaa:	04 9a       	mov	r10,r2
80009eac:	6c 8b       	ld.w	r11,r6[0x20]
80009eae:	40 1c       	lddsp	r12,sp[0x4]
80009eb0:	5d 18       	icall	r8
80009eb2:	18 97       	mov	r7,r12
80009eb4:	e0 89 00 0e 	brgt	80009ed0 <__sfvwrite_r+0x1b4>
80009eb8:	c7 48       	rjmp	80009fa0 <__sfvwrite_r+0x284>
80009eba:	08 9a       	mov	r10,r4
80009ebc:	04 9b       	mov	r11,r2
80009ebe:	f0 1f 00 42 	mcall	80009fc4 <__sfvwrite_r+0x2a8>
80009ec2:	6c 08       	ld.w	r8,r6[0x0]
80009ec4:	08 08       	add	r8,r4
80009ec6:	08 97       	mov	r7,r4
80009ec8:	8d 08       	st.w	r6[0x0],r8
80009eca:	6c 28       	ld.w	r8,r6[0x8]
80009ecc:	08 18       	sub	r8,r4
80009ece:	8d 28       	st.w	r6[0x8],r8
80009ed0:	40 09       	lddsp	r9,sp[0x0]
80009ed2:	72 28       	ld.w	r8,r9[0x8]
80009ed4:	0e 18       	sub	r8,r7
80009ed6:	93 28       	st.w	r9[0x8],r8
80009ed8:	c6 90       	breq	80009faa <__sfvwrite_r+0x28e>
80009eda:	0e 14       	sub	r4,r7
80009edc:	0e 02       	add	r2,r7
80009ede:	c7 2b       	rjmp	80009dc2 <__sfvwrite_r+0xa6>
80009ee0:	60 02       	ld.w	r2,r0[0x0]
80009ee2:	60 14       	ld.w	r4,r0[0x4]
80009ee4:	30 01       	mov	r1,0
80009ee6:	2f 80       	sub	r0,-8
80009ee8:	58 04       	cp.w	r4,0
80009eea:	cf b0       	breq	80009ee0 <__sfvwrite_r+0x1c4>
80009eec:	58 01       	cp.w	r1,0
80009eee:	c1 11       	brne	80009f10 <__sfvwrite_r+0x1f4>
80009ef0:	08 9a       	mov	r10,r4
80009ef2:	30 ab       	mov	r11,10
80009ef4:	04 9c       	mov	r12,r2
80009ef6:	30 11       	mov	r1,1
80009ef8:	f0 1f 00 35 	mcall	80009fcc <__sfvwrite_r+0x2b0>
80009efc:	f9 b9 01 01 	movne	r9,1
80009f00:	f9 d9 e1 08 	addne	r8,r12,r9
80009f04:	f1 d2 e1 13 	subne	r3,r8,r2
80009f08:	f9 b8 00 01 	moveq	r8,1
80009f0c:	e9 d8 e0 03 	addeq	r3,r4,r8
80009f10:	6c 28       	ld.w	r8,r6[0x8]
80009f12:	08 33       	cp.w	r3,r4
80009f14:	e6 05 17 80 	movls	r5,r3
80009f18:	e8 05 17 b0 	movhi	r5,r4
80009f1c:	6c 5b       	ld.w	r11,r6[0x14]
80009f1e:	f6 08 00 07 	add	r7,r11,r8
80009f22:	0e 35       	cp.w	r5,r7
80009f24:	5f 99       	srgt	r9
80009f26:	6c 0c       	ld.w	r12,r6[0x0]
80009f28:	6c 48       	ld.w	r8,r6[0x10]
80009f2a:	10 3c       	cp.w	r12,r8
80009f2c:	5f b8       	srhi	r8
80009f2e:	12 68       	and	r8,r9
80009f30:	30 09       	mov	r9,0
80009f32:	f2 08 18 00 	cp.b	r8,r9
80009f36:	c0 e0       	breq	80009f52 <__sfvwrite_r+0x236>
80009f38:	04 9b       	mov	r11,r2
80009f3a:	0e 9a       	mov	r10,r7
80009f3c:	f0 1f 00 22 	mcall	80009fc4 <__sfvwrite_r+0x2a8>
80009f40:	6c 08       	ld.w	r8,r6[0x0]
80009f42:	0e 08       	add	r8,r7
80009f44:	0c 9b       	mov	r11,r6
80009f46:	8d 08       	st.w	r6[0x0],r8
80009f48:	40 1c       	lddsp	r12,sp[0x4]
80009f4a:	f0 1f 00 20 	mcall	80009fc8 <__sfvwrite_r+0x2ac>
80009f4e:	c1 90       	breq	80009f80 <__sfvwrite_r+0x264>
80009f50:	c2 88       	rjmp	80009fa0 <__sfvwrite_r+0x284>
80009f52:	16 35       	cp.w	r5,r11
80009f54:	c0 b5       	brlt	80009f6a <__sfvwrite_r+0x24e>
80009f56:	16 99       	mov	r9,r11
80009f58:	6c a8       	ld.w	r8,r6[0x28]
80009f5a:	04 9a       	mov	r10,r2
80009f5c:	6c 8b       	ld.w	r11,r6[0x20]
80009f5e:	40 1c       	lddsp	r12,sp[0x4]
80009f60:	5d 18       	icall	r8
80009f62:	18 97       	mov	r7,r12
80009f64:	e0 89 00 0e 	brgt	80009f80 <__sfvwrite_r+0x264>
80009f68:	c1 c8       	rjmp	80009fa0 <__sfvwrite_r+0x284>
80009f6a:	0a 97       	mov	r7,r5
80009f6c:	0a 9a       	mov	r10,r5
80009f6e:	04 9b       	mov	r11,r2
80009f70:	f0 1f 00 15 	mcall	80009fc4 <__sfvwrite_r+0x2a8>
80009f74:	6c 08       	ld.w	r8,r6[0x0]
80009f76:	0a 08       	add	r8,r5
80009f78:	8d 08       	st.w	r6[0x0],r8
80009f7a:	6c 28       	ld.w	r8,r6[0x8]
80009f7c:	0a 18       	sub	r8,r5
80009f7e:	8d 28       	st.w	r6[0x8],r8
80009f80:	0e 13       	sub	r3,r7
80009f82:	c0 71       	brne	80009f90 <__sfvwrite_r+0x274>
80009f84:	0c 9b       	mov	r11,r6
80009f86:	40 1c       	lddsp	r12,sp[0x4]
80009f88:	f0 1f 00 10 	mcall	80009fc8 <__sfvwrite_r+0x2ac>
80009f8c:	c0 a1       	brne	80009fa0 <__sfvwrite_r+0x284>
80009f8e:	06 91       	mov	r1,r3
80009f90:	40 09       	lddsp	r9,sp[0x0]
80009f92:	72 28       	ld.w	r8,r9[0x8]
80009f94:	0e 18       	sub	r8,r7
80009f96:	93 28       	st.w	r9[0x8],r8
80009f98:	c0 90       	breq	80009faa <__sfvwrite_r+0x28e>
80009f9a:	0e 14       	sub	r4,r7
80009f9c:	0e 02       	add	r2,r7
80009f9e:	ca 5b       	rjmp	80009ee8 <__sfvwrite_r+0x1cc>
80009fa0:	8c 68       	ld.sh	r8,r6[0xc]
80009fa2:	a7 a8       	sbr	r8,0x6
80009fa4:	ac 68       	st.h	r6[0xc],r8
80009fa6:	3f fc       	mov	r12,-1
80009fa8:	c0 28       	rjmp	80009fac <__sfvwrite_r+0x290>
80009faa:	30 0c       	mov	r12,0
80009fac:	2f ed       	sub	sp,-8
80009fae:	d8 32       	popm	r0-r7,pc
80009fb0:	80 00       	ld.sh	r0,r0[0x0]
80009fb2:	8c 54       	ld.sh	r4,r6[0xa]
80009fb4:	80 00       	ld.sh	r0,r0[0x0]
80009fb6:	5e d0       	retvc	r0
80009fb8:	80 00       	ld.sh	r0,r0[0x0]
80009fba:	a0 f2       	st.b	r0[0x7],r2
80009fbc:	80 00       	ld.sh	r0,r0[0x0]
80009fbe:	a9 08       	ld.d	r8,r4
80009fc0:	80 00       	ld.sh	r0,r0[0x0]
80009fc2:	67 6c       	ld.w	r12,r3[0x58]
80009fc4:	80 00       	ld.sh	r0,r0[0x0]
80009fc6:	a2 3a       	st.h	r1[0x6],r10
80009fc8:	80 00       	ld.sh	r0,r0[0x0]
80009fca:	9c 04       	ld.sh	r4,lr[0x0]
80009fcc:	80 00       	ld.sh	r0,r0[0x0]
80009fce:	a0 dc       	st.b	r0[0x5],r12

80009fd0 <_localeconv_r>:
80009fd0:	48 1c       	lddpc	r12,80009fd4 <_localeconv_r+0x4>
80009fd2:	5e fc       	retal	r12
80009fd4:	80 00       	ld.sh	r0,r0[0x0]
80009fd6:	bd 5c       	asr	r12,0x1d

80009fd8 <_lseek_r>:
80009fd8:	d4 21       	pushm	r4-r7,lr
80009fda:	16 98       	mov	r8,r11
80009fdc:	18 96       	mov	r6,r12
80009fde:	10 9c       	mov	r12,r8
80009fe0:	30 08       	mov	r8,0
80009fe2:	14 9b       	mov	r11,r10
80009fe4:	48 67       	lddpc	r7,80009ffc <_lseek_r+0x24>
80009fe6:	12 9a       	mov	r10,r9
80009fe8:	8f 08       	st.w	r7[0x0],r8
80009fea:	f0 1f 00 06 	mcall	8000a000 <_lseek_r+0x28>
80009fee:	5b fc       	cp.w	r12,-1
80009ff0:	c0 51       	brne	80009ffa <_lseek_r+0x22>
80009ff2:	6e 08       	ld.w	r8,r7[0x0]
80009ff4:	58 08       	cp.w	r8,0
80009ff6:	ed f8 1a 03 	st.wne	r6[0xc],r8
80009ffa:	d8 22       	popm	r4-r7,pc
80009ffc:	00 00       	add	r0,r0
80009ffe:	06 a4       	st.w	r3++,r4
8000a000:	80 00       	ld.sh	r0,r0[0x0]
8000a002:	50 08       	stdsp	sp[0x0],r8

8000a004 <__smakebuf_r>:
8000a004:	d4 21       	pushm	r4-r7,lr
8000a006:	20 fd       	sub	sp,60
8000a008:	96 68       	ld.sh	r8,r11[0xc]
8000a00a:	16 97       	mov	r7,r11
8000a00c:	18 94       	mov	r4,r12
8000a00e:	e2 18 00 02 	andl	r8,0x2,COH
8000a012:	c3 e1       	brne	8000a08e <__smakebuf_r+0x8a>
8000a014:	96 7b       	ld.sh	r11,r11[0xe]
8000a016:	f0 0b 19 00 	cp.h	r11,r8
8000a01a:	c0 55       	brlt	8000a024 <__smakebuf_r+0x20>
8000a01c:	1a 9a       	mov	r10,sp
8000a01e:	f0 1f 00 2b 	mcall	8000a0c8 <__smakebuf_r+0xc4>
8000a022:	c1 04       	brge	8000a042 <__smakebuf_r+0x3e>
8000a024:	8e 68       	ld.sh	r8,r7[0xc]
8000a026:	e0 69 04 00 	mov	r9,1024
8000a02a:	10 9a       	mov	r10,r8
8000a02c:	30 05       	mov	r5,0
8000a02e:	e2 1a 00 80 	andl	r10,0x80,COH
8000a032:	ab b8       	sbr	r8,0xb
8000a034:	58 0a       	cp.w	r10,0
8000a036:	f9 b6 01 40 	movne	r6,64
8000a03a:	f2 06 17 00 	moveq	r6,r9
8000a03e:	ae 68       	st.h	r7[0xc],r8
8000a040:	c1 c8       	rjmp	8000a078 <__smakebuf_r+0x74>
8000a042:	40 18       	lddsp	r8,sp[0x4]
8000a044:	e2 18 f0 00 	andl	r8,0xf000,COH
8000a048:	e0 48 20 00 	cp.w	r8,8192
8000a04c:	5f 05       	sreq	r5
8000a04e:	e0 48 80 00 	cp.w	r8,32768
8000a052:	c0 e1       	brne	8000a06e <__smakebuf_r+0x6a>
8000a054:	6e b9       	ld.w	r9,r7[0x2c]
8000a056:	49 e8       	lddpc	r8,8000a0cc <__smakebuf_r+0xc8>
8000a058:	10 39       	cp.w	r9,r8
8000a05a:	c0 a1       	brne	8000a06e <__smakebuf_r+0x6a>
8000a05c:	8e 68       	ld.sh	r8,r7[0xc]
8000a05e:	ab a8       	sbr	r8,0xa
8000a060:	ae 68       	st.h	r7[0xc],r8
8000a062:	e0 68 04 00 	mov	r8,1024
8000a066:	ef 48 00 50 	st.w	r7[80],r8
8000a06a:	10 96       	mov	r6,r8
8000a06c:	c0 68       	rjmp	8000a078 <__smakebuf_r+0x74>
8000a06e:	8e 68       	ld.sh	r8,r7[0xc]
8000a070:	e0 66 04 00 	mov	r6,1024
8000a074:	ab b8       	sbr	r8,0xb
8000a076:	ae 68       	st.h	r7[0xc],r8
8000a078:	0c 9b       	mov	r11,r6
8000a07a:	08 9c       	mov	r12,r4
8000a07c:	f0 1f 00 15 	mcall	8000a0d0 <__smakebuf_r+0xcc>
8000a080:	8e 69       	ld.sh	r9,r7[0xc]
8000a082:	c0 d1       	brne	8000a09c <__smakebuf_r+0x98>
8000a084:	ed b9 00 09 	bld	r9,0x9
8000a088:	c1 e0       	breq	8000a0c4 <__smakebuf_r+0xc0>
8000a08a:	a1 b9       	sbr	r9,0x1
8000a08c:	ae 69       	st.h	r7[0xc],r9
8000a08e:	ee c8 ff b9 	sub	r8,r7,-71
8000a092:	8f 48       	st.w	r7[0x10],r8
8000a094:	8f 08       	st.w	r7[0x0],r8
8000a096:	30 18       	mov	r8,1
8000a098:	8f 58       	st.w	r7[0x14],r8
8000a09a:	c1 58       	rjmp	8000a0c4 <__smakebuf_r+0xc0>
8000a09c:	a7 b9       	sbr	r9,0x7
8000a09e:	48 e8       	lddpc	r8,8000a0d4 <__smakebuf_r+0xd0>
8000a0a0:	8f 4c       	st.w	r7[0x10],r12
8000a0a2:	8f 56       	st.w	r7[0x14],r6
8000a0a4:	ae 69       	st.h	r7[0xc],r9
8000a0a6:	8f 0c       	st.w	r7[0x0],r12
8000a0a8:	89 a8       	st.w	r4[0x28],r8
8000a0aa:	58 05       	cp.w	r5,0
8000a0ac:	c0 c0       	breq	8000a0c4 <__smakebuf_r+0xc0>
8000a0ae:	8e 7c       	ld.sh	r12,r7[0xe]
8000a0b0:	f0 1f 00 0a 	mcall	8000a0d8 <__smakebuf_r+0xd4>
8000a0b4:	ef f8 12 06 	ld.shne	r8,r7[0xc]
8000a0b8:	f9 b9 01 01 	movne	r9,1
8000a0bc:	f1 d9 e1 38 	orne	r8,r8,r9
8000a0c0:	ef f8 1c 06 	st.hne	r7[0xc],r8
8000a0c4:	2f 1d       	sub	sp,-60
8000a0c6:	d8 22       	popm	r4-r7,pc
8000a0c8:	80 00       	ld.sh	r0,r0[0x0]
8000a0ca:	ac d0       	st.b	r6[0x5],r0
8000a0cc:	80 00       	ld.sh	r0,r0[0x0]
8000a0ce:	69 8c       	ld.w	r12,r4[0x60]
8000a0d0:	80 00       	ld.sh	r0,r0[0x0]
8000a0d2:	5e d0       	retvc	r0
8000a0d4:	80 00       	ld.sh	r0,r0[0x0]
8000a0d6:	65 54       	ld.w	r4,r2[0x54]
8000a0d8:	80 00       	ld.sh	r0,r0[0x0]
8000a0da:	4f 30       	lddpc	r0,8000a2a4 <__hi0bits+0x2c>

8000a0dc <memchr>:
8000a0dc:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000a0e0:	c0 68       	rjmp	8000a0ec <memchr+0x10>
8000a0e2:	20 1a       	sub	r10,1
8000a0e4:	19 88       	ld.ub	r8,r12[0x0]
8000a0e6:	16 38       	cp.w	r8,r11
8000a0e8:	5e 0c       	reteq	r12
8000a0ea:	2f fc       	sub	r12,-1
8000a0ec:	58 0a       	cp.w	r10,0
8000a0ee:	cf a1       	brne	8000a0e2 <memchr+0x6>
8000a0f0:	5e fa       	retal	r10

8000a0f2 <memcpy>:
8000a0f2:	58 8a       	cp.w	r10,8
8000a0f4:	c2 f5       	brlt	8000a152 <memcpy+0x60>
8000a0f6:	f9 eb 10 09 	or	r9,r12,r11
8000a0fa:	e2 19 00 03 	andl	r9,0x3,COH
8000a0fe:	e0 81 00 97 	brne	8000a22c <memcpy+0x13a>
8000a102:	e0 4a 00 20 	cp.w	r10,32
8000a106:	c3 b4       	brge	8000a17c <memcpy+0x8a>
8000a108:	f4 08 14 02 	asr	r8,r10,0x2
8000a10c:	f0 09 11 08 	rsub	r9,r8,8
8000a110:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000a114:	76 69       	ld.w	r9,r11[0x18]
8000a116:	99 69       	st.w	r12[0x18],r9
8000a118:	76 59       	ld.w	r9,r11[0x14]
8000a11a:	99 59       	st.w	r12[0x14],r9
8000a11c:	76 49       	ld.w	r9,r11[0x10]
8000a11e:	99 49       	st.w	r12[0x10],r9
8000a120:	76 39       	ld.w	r9,r11[0xc]
8000a122:	99 39       	st.w	r12[0xc],r9
8000a124:	76 29       	ld.w	r9,r11[0x8]
8000a126:	99 29       	st.w	r12[0x8],r9
8000a128:	76 19       	ld.w	r9,r11[0x4]
8000a12a:	99 19       	st.w	r12[0x4],r9
8000a12c:	76 09       	ld.w	r9,r11[0x0]
8000a12e:	99 09       	st.w	r12[0x0],r9
8000a130:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000a134:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000a138:	e0 1a 00 03 	andl	r10,0x3
8000a13c:	f4 0a 11 04 	rsub	r10,r10,4
8000a140:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000a144:	17 a9       	ld.ub	r9,r11[0x2]
8000a146:	b0 a9       	st.b	r8[0x2],r9
8000a148:	17 99       	ld.ub	r9,r11[0x1]
8000a14a:	b0 99       	st.b	r8[0x1],r9
8000a14c:	17 89       	ld.ub	r9,r11[0x0]
8000a14e:	b0 89       	st.b	r8[0x0],r9
8000a150:	5e fc       	retal	r12
8000a152:	f4 0a 11 09 	rsub	r10,r10,9
8000a156:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000a15a:	17 f9       	ld.ub	r9,r11[0x7]
8000a15c:	b8 f9       	st.b	r12[0x7],r9
8000a15e:	17 e9       	ld.ub	r9,r11[0x6]
8000a160:	b8 e9       	st.b	r12[0x6],r9
8000a162:	17 d9       	ld.ub	r9,r11[0x5]
8000a164:	b8 d9       	st.b	r12[0x5],r9
8000a166:	17 c9       	ld.ub	r9,r11[0x4]
8000a168:	b8 c9       	st.b	r12[0x4],r9
8000a16a:	17 b9       	ld.ub	r9,r11[0x3]
8000a16c:	b8 b9       	st.b	r12[0x3],r9
8000a16e:	17 a9       	ld.ub	r9,r11[0x2]
8000a170:	b8 a9       	st.b	r12[0x2],r9
8000a172:	17 99       	ld.ub	r9,r11[0x1]
8000a174:	b8 99       	st.b	r12[0x1],r9
8000a176:	17 89       	ld.ub	r9,r11[0x0]
8000a178:	b8 89       	st.b	r12[0x0],r9
8000a17a:	5e fc       	retal	r12
8000a17c:	eb cd 40 c0 	pushm	r6-r7,lr
8000a180:	18 99       	mov	r9,r12
8000a182:	22 0a       	sub	r10,32
8000a184:	b7 07       	ld.d	r6,r11++
8000a186:	b3 26       	st.d	r9++,r6
8000a188:	b7 07       	ld.d	r6,r11++
8000a18a:	b3 26       	st.d	r9++,r6
8000a18c:	b7 07       	ld.d	r6,r11++
8000a18e:	b3 26       	st.d	r9++,r6
8000a190:	b7 07       	ld.d	r6,r11++
8000a192:	b3 26       	st.d	r9++,r6
8000a194:	22 0a       	sub	r10,32
8000a196:	cf 74       	brge	8000a184 <memcpy+0x92>
8000a198:	2f 0a       	sub	r10,-16
8000a19a:	c0 65       	brlt	8000a1a6 <memcpy+0xb4>
8000a19c:	b7 07       	ld.d	r6,r11++
8000a19e:	b3 26       	st.d	r9++,r6
8000a1a0:	b7 07       	ld.d	r6,r11++
8000a1a2:	b3 26       	st.d	r9++,r6
8000a1a4:	21 0a       	sub	r10,16
8000a1a6:	5c 3a       	neg	r10
8000a1a8:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000a1ac:	d7 03       	nop
8000a1ae:	d7 03       	nop
8000a1b0:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000a1b4:	f3 66 00 0e 	st.b	r9[14],r6
8000a1b8:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000a1bc:	f3 66 00 0d 	st.b	r9[13],r6
8000a1c0:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000a1c4:	f3 66 00 0c 	st.b	r9[12],r6
8000a1c8:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000a1cc:	f3 66 00 0b 	st.b	r9[11],r6
8000a1d0:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000a1d4:	f3 66 00 0a 	st.b	r9[10],r6
8000a1d8:	f7 36 00 09 	ld.ub	r6,r11[9]
8000a1dc:	f3 66 00 09 	st.b	r9[9],r6
8000a1e0:	f7 36 00 08 	ld.ub	r6,r11[8]
8000a1e4:	f3 66 00 08 	st.b	r9[8],r6
8000a1e8:	f7 36 00 07 	ld.ub	r6,r11[7]
8000a1ec:	f3 66 00 07 	st.b	r9[7],r6
8000a1f0:	f7 36 00 06 	ld.ub	r6,r11[6]
8000a1f4:	f3 66 00 06 	st.b	r9[6],r6
8000a1f8:	f7 36 00 05 	ld.ub	r6,r11[5]
8000a1fc:	f3 66 00 05 	st.b	r9[5],r6
8000a200:	f7 36 00 04 	ld.ub	r6,r11[4]
8000a204:	f3 66 00 04 	st.b	r9[4],r6
8000a208:	f7 36 00 03 	ld.ub	r6,r11[3]
8000a20c:	f3 66 00 03 	st.b	r9[3],r6
8000a210:	f7 36 00 02 	ld.ub	r6,r11[2]
8000a214:	f3 66 00 02 	st.b	r9[2],r6
8000a218:	f7 36 00 01 	ld.ub	r6,r11[1]
8000a21c:	f3 66 00 01 	st.b	r9[1],r6
8000a220:	f7 36 00 00 	ld.ub	r6,r11[0]
8000a224:	f3 66 00 00 	st.b	r9[0],r6
8000a228:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a22c:	20 1a       	sub	r10,1
8000a22e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000a232:	f8 0a 0b 09 	st.b	r12[r10],r9
8000a236:	cf b1       	brne	8000a22c <memcpy+0x13a>
8000a238:	5e fc       	retal	r12

8000a23a <memmove>:
8000a23a:	d4 01       	pushm	lr
8000a23c:	18 3b       	cp.w	r11,r12
8000a23e:	c1 92       	brcc	8000a270 <memmove+0x36>
8000a240:	f6 0a 00 0e 	add	lr,r11,r10
8000a244:	1c 3c       	cp.w	r12,lr
8000a246:	c1 52       	brcc	8000a270 <memmove+0x36>
8000a248:	f8 0a 00 0b 	add	r11,r12,r10
8000a24c:	30 09       	mov	r9,0
8000a24e:	c0 68       	rjmp	8000a25a <memmove+0x20>
8000a250:	fc 09 07 08 	ld.ub	r8,lr[r9]
8000a254:	20 1a       	sub	r10,1
8000a256:	f6 09 0b 08 	st.b	r11[r9],r8
8000a25a:	20 19       	sub	r9,1
8000a25c:	58 0a       	cp.w	r10,0
8000a25e:	cf 91       	brne	8000a250 <memmove+0x16>
8000a260:	d8 02       	popm	pc
8000a262:	f6 09 07 08 	ld.ub	r8,r11[r9]
8000a266:	20 1a       	sub	r10,1
8000a268:	f8 09 0b 08 	st.b	r12[r9],r8
8000a26c:	2f f9       	sub	r9,-1
8000a26e:	c0 28       	rjmp	8000a272 <memmove+0x38>
8000a270:	30 09       	mov	r9,0
8000a272:	58 0a       	cp.w	r10,0
8000a274:	cf 71       	brne	8000a262 <memmove+0x28>
8000a276:	d8 02       	popm	pc

8000a278 <__hi0bits>:
8000a278:	18 98       	mov	r8,r12
8000a27a:	f8 09 15 10 	lsl	r9,r12,0x10
8000a27e:	e0 18 00 00 	andl	r8,0x0
8000a282:	f2 0c 17 00 	moveq	r12,r9
8000a286:	f9 b9 00 10 	moveq	r9,16
8000a28a:	f9 b9 01 00 	movne	r9,0
8000a28e:	f8 0a 15 08 	lsl	r10,r12,0x8
8000a292:	18 98       	mov	r8,r12
8000a294:	e6 18 ff 00 	andh	r8,0xff00,COH
8000a298:	f7 b9 00 f8 	subeq	r9,-8
8000a29c:	f4 0c 17 00 	moveq	r12,r10
8000a2a0:	18 98       	mov	r8,r12
8000a2a2:	f8 0a 15 04 	lsl	r10,r12,0x4
8000a2a6:	e6 18 f0 00 	andh	r8,0xf000,COH
8000a2aa:	f7 b9 00 fc 	subeq	r9,-4
8000a2ae:	f4 0c 17 00 	moveq	r12,r10
8000a2b2:	18 98       	mov	r8,r12
8000a2b4:	f8 0a 15 02 	lsl	r10,r12,0x2
8000a2b8:	e6 18 c0 00 	andh	r8,0xc000,COH
8000a2bc:	f7 b9 00 fe 	subeq	r9,-2
8000a2c0:	f4 0c 17 00 	moveq	r12,r10
8000a2c4:	58 0c       	cp.w	r12,0
8000a2c6:	c0 75       	brlt	8000a2d4 <__hi0bits+0x5c>
8000a2c8:	ed bc 00 1e 	bld	r12,0x1e
8000a2cc:	f9 b9 01 20 	movne	r9,32
8000a2d0:	f7 b9 00 ff 	subeq	r9,-1
8000a2d4:	5e f9       	retal	r9

8000a2d6 <__lo0bits>:
8000a2d6:	18 9b       	mov	r11,r12
8000a2d8:	78 0a       	ld.w	r10,r12[0x0]
8000a2da:	f9 da c0 03 	bfextu	r12,r10,0x0,0x3
8000a2de:	c1 40       	breq	8000a306 <__lo0bits+0x30>
8000a2e0:	ed ba 00 00 	bld	r10,0x0
8000a2e4:	c0 21       	brne	8000a2e8 <__lo0bits+0x12>
8000a2e6:	5e fd       	retal	0
8000a2e8:	f4 09 16 01 	lsr	r9,r10,0x1
8000a2ec:	f4 08 16 02 	lsr	r8,r10,0x2
8000a2f0:	ed ba 00 01 	bld	r10,0x1
8000a2f4:	f7 f9 0a 00 	st.weq	r11[0x0],r9
8000a2f8:	f9 bc 00 01 	moveq	r12,1
8000a2fc:	f7 f8 1a 00 	st.wne	r11[0x0],r8
8000a300:	f9 bc 01 02 	movne	r12,2
8000a304:	5e fc       	retal	r12
8000a306:	f1 da c0 10 	bfextu	r8,r10,0x0,0x10
8000a30a:	f4 09 16 10 	lsr	r9,r10,0x10
8000a30e:	58 08       	cp.w	r8,0
8000a310:	f2 0a 17 00 	moveq	r10,r9
8000a314:	f9 bc 00 10 	moveq	r12,16
8000a318:	f4 09 16 08 	lsr	r9,r10,0x8
8000a31c:	58 08       	cp.w	r8,0
8000a31e:	f1 da c0 08 	bfextu	r8,r10,0x0,0x8
8000a322:	f7 bc 00 f8 	subeq	r12,-8
8000a326:	f2 0a 17 00 	moveq	r10,r9
8000a32a:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
8000a32e:	f4 09 16 04 	lsr	r9,r10,0x4
8000a332:	58 08       	cp.w	r8,0
8000a334:	f7 bc 00 fc 	subeq	r12,-4
8000a338:	f2 0a 17 00 	moveq	r10,r9
8000a33c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000a340:	f4 09 16 02 	lsr	r9,r10,0x2
8000a344:	58 08       	cp.w	r8,0
8000a346:	f7 bc 00 fe 	subeq	r12,-2
8000a34a:	f2 0a 17 00 	moveq	r10,r9
8000a34e:	ed ba 00 00 	bld	r10,0x0
8000a352:	c0 60       	breq	8000a35e <__lo0bits+0x88>
8000a354:	a1 9a       	lsr	r10,0x1
8000a356:	c0 31       	brne	8000a35c <__lo0bits+0x86>
8000a358:	32 0c       	mov	r12,32
8000a35a:	5e fc       	retal	r12
8000a35c:	2f fc       	sub	r12,-1
8000a35e:	97 0a       	st.w	r11[0x0],r10
8000a360:	5e fc       	retal	r12

8000a362 <__mcmp>:
8000a362:	d4 01       	pushm	lr
8000a364:	16 9a       	mov	r10,r11
8000a366:	78 48       	ld.w	r8,r12[0x10]
8000a368:	76 49       	ld.w	r9,r11[0x10]
8000a36a:	f0 09 01 0b 	sub	r11,r8,r9
8000a36e:	c1 51       	brne	8000a398 <__mcmp+0x36>
8000a370:	f2 c8 ff fb 	sub	r8,r9,-5
8000a374:	a3 68       	lsl	r8,0x2
8000a376:	f4 08 00 0e 	add	lr,r10,r8
8000a37a:	f8 08 00 08 	add	r8,r12,r8
8000a37e:	2e cc       	sub	r12,-20
8000a380:	11 4a       	ld.w	r10,--r8
8000a382:	1d 49       	ld.w	r9,--lr
8000a384:	12 3a       	cp.w	r10,r9
8000a386:	c0 60       	breq	8000a392 <__mcmp+0x30>
8000a388:	f9 bb 03 ff 	movlo	r11,-1
8000a38c:	f9 bb 02 01 	movhs	r11,1
8000a390:	c0 48       	rjmp	8000a398 <__mcmp+0x36>
8000a392:	18 38       	cp.w	r8,r12
8000a394:	fe 9b ff f6 	brhi	8000a380 <__mcmp+0x1e>
8000a398:	16 9c       	mov	r12,r11
8000a39a:	d8 02       	popm	pc

8000a39c <_Bfree>:
8000a39c:	d4 21       	pushm	r4-r7,lr
8000a39e:	18 96       	mov	r6,r12
8000a3a0:	16 95       	mov	r5,r11
8000a3a2:	78 97       	ld.w	r7,r12[0x24]
8000a3a4:	58 07       	cp.w	r7,0
8000a3a6:	c0 91       	brne	8000a3b8 <_Bfree+0x1c>
8000a3a8:	31 0c       	mov	r12,16
8000a3aa:	f0 1f 00 0a 	mcall	8000a3d0 <_Bfree+0x34>
8000a3ae:	99 37       	st.w	r12[0xc],r7
8000a3b0:	8d 9c       	st.w	r6[0x24],r12
8000a3b2:	99 17       	st.w	r12[0x4],r7
8000a3b4:	99 27       	st.w	r12[0x8],r7
8000a3b6:	99 07       	st.w	r12[0x0],r7
8000a3b8:	58 05       	cp.w	r5,0
8000a3ba:	c0 90       	breq	8000a3cc <_Bfree+0x30>
8000a3bc:	6c 98       	ld.w	r8,r6[0x24]
8000a3be:	6a 19       	ld.w	r9,r5[0x4]
8000a3c0:	70 3a       	ld.w	r10,r8[0xc]
8000a3c2:	f4 09 03 28 	ld.w	r8,r10[r9<<0x2]
8000a3c6:	8b 08       	st.w	r5[0x0],r8
8000a3c8:	f4 09 09 25 	st.w	r10[r9<<0x2],r5
8000a3cc:	d8 22       	popm	r4-r7,pc
8000a3ce:	00 00       	add	r0,r0
8000a3d0:	80 00       	ld.sh	r0,r0[0x0]
8000a3d2:	5e b8       	rethi	r8

8000a3d4 <_Balloc>:
8000a3d4:	d4 21       	pushm	r4-r7,lr
8000a3d6:	18 96       	mov	r6,r12
8000a3d8:	16 95       	mov	r5,r11
8000a3da:	78 97       	ld.w	r7,r12[0x24]
8000a3dc:	58 07       	cp.w	r7,0
8000a3de:	c0 91       	brne	8000a3f0 <_Balloc+0x1c>
8000a3e0:	31 0c       	mov	r12,16
8000a3e2:	f0 1f 00 19 	mcall	8000a444 <_Balloc+0x70>
8000a3e6:	99 37       	st.w	r12[0xc],r7
8000a3e8:	8d 9c       	st.w	r6[0x24],r12
8000a3ea:	99 17       	st.w	r12[0x4],r7
8000a3ec:	99 27       	st.w	r12[0x8],r7
8000a3ee:	99 07       	st.w	r12[0x0],r7
8000a3f0:	6c 97       	ld.w	r7,r6[0x24]
8000a3f2:	6e 38       	ld.w	r8,r7[0xc]
8000a3f4:	58 08       	cp.w	r8,0
8000a3f6:	c0 b1       	brne	8000a40c <_Balloc+0x38>
8000a3f8:	31 0a       	mov	r10,16
8000a3fa:	30 4b       	mov	r11,4
8000a3fc:	0c 9c       	mov	r12,r6
8000a3fe:	f0 1f 00 13 	mcall	8000a448 <_Balloc+0x74>
8000a402:	8f 3c       	st.w	r7[0xc],r12
8000a404:	6c 98       	ld.w	r8,r6[0x24]
8000a406:	70 3c       	ld.w	r12,r8[0xc]
8000a408:	58 0c       	cp.w	r12,0
8000a40a:	c1 b0       	breq	8000a440 <_Balloc+0x6c>
8000a40c:	6c 98       	ld.w	r8,r6[0x24]
8000a40e:	70 38       	ld.w	r8,r8[0xc]
8000a410:	f0 05 00 29 	add	r9,r8,r5<<0x2
8000a414:	72 0c       	ld.w	r12,r9[0x0]
8000a416:	58 0c       	cp.w	r12,0
8000a418:	c0 40       	breq	8000a420 <_Balloc+0x4c>
8000a41a:	78 08       	ld.w	r8,r12[0x0]
8000a41c:	93 08       	st.w	r9[0x0],r8
8000a41e:	c0 e8       	rjmp	8000a43a <_Balloc+0x66>
8000a420:	30 18       	mov	r8,1
8000a422:	0c 9c       	mov	r12,r6
8000a424:	f0 05 09 47 	lsl	r7,r8,r5
8000a428:	10 9b       	mov	r11,r8
8000a42a:	ee ca ff fb 	sub	r10,r7,-5
8000a42e:	a3 6a       	lsl	r10,0x2
8000a430:	f0 1f 00 06 	mcall	8000a448 <_Balloc+0x74>
8000a434:	c0 60       	breq	8000a440 <_Balloc+0x6c>
8000a436:	99 15       	st.w	r12[0x4],r5
8000a438:	99 27       	st.w	r12[0x8],r7
8000a43a:	30 08       	mov	r8,0
8000a43c:	99 38       	st.w	r12[0xc],r8
8000a43e:	99 48       	st.w	r12[0x10],r8
8000a440:	d8 22       	popm	r4-r7,pc
8000a442:	00 00       	add	r0,r0
8000a444:	80 00       	ld.sh	r0,r0[0x0]
8000a446:	5e b8       	rethi	r8
8000a448:	80 00       	ld.sh	r0,r0[0x0]
8000a44a:	ac 6c       	st.h	r6[0xc],r12

8000a44c <__d2b>:
8000a44c:	d4 31       	pushm	r0-r7,lr
8000a44e:	20 2d       	sub	sp,8
8000a450:	16 97       	mov	r7,r11
8000a452:	14 96       	mov	r6,r10
8000a454:	12 93       	mov	r3,r9
8000a456:	10 92       	mov	r2,r8
8000a458:	30 1b       	mov	r11,1
8000a45a:	f0 1f 00 29 	mcall	8000a4fc <__d2b+0xb0>
8000a45e:	f5 d7 c0 14 	bfextu	r10,r7,0x0,0x14
8000a462:	50 0a       	stdsp	sp[0x0],r10
8000a464:	0e 98       	mov	r8,r7
8000a466:	f3 d7 c0 1f 	bfextu	r9,r7,0x0,0x1f
8000a46a:	f2 04 16 14 	lsr	r4,r9,0x14
8000a46e:	fc 1b 00 10 	movh	r11,0x10
8000a472:	f5 db e1 38 	orne	r8,r10,r11
8000a476:	fb f8 1a 00 	st.wne	sp[0x0],r8
8000a47a:	18 95       	mov	r5,r12
8000a47c:	58 06       	cp.w	r6,0
8000a47e:	c1 d0       	breq	8000a4b8 <__d2b+0x6c>
8000a480:	fa cc ff f8 	sub	r12,sp,-8
8000a484:	18 d6       	st.w	--r12,r6
8000a486:	f0 1f 00 1f 	mcall	8000a500 <__d2b+0xb4>
8000a48a:	40 1a       	lddsp	r10,sp[0x4]
8000a48c:	c0 c0       	breq	8000a4a4 <__d2b+0x58>
8000a48e:	40 09       	lddsp	r9,sp[0x0]
8000a490:	f8 08 11 20 	rsub	r8,r12,32
8000a494:	f2 08 09 48 	lsl	r8,r9,r8
8000a498:	14 48       	or	r8,r10
8000a49a:	8b 58       	st.w	r5[0x14],r8
8000a49c:	f2 0c 0a 49 	lsr	r9,r9,r12
8000a4a0:	50 09       	stdsp	sp[0x0],r9
8000a4a2:	c0 28       	rjmp	8000a4a6 <__d2b+0x5a>
8000a4a4:	8b 5a       	st.w	r5[0x14],r10
8000a4a6:	40 08       	lddsp	r8,sp[0x0]
8000a4a8:	58 08       	cp.w	r8,0
8000a4aa:	f9 b7 01 02 	movne	r7,2
8000a4ae:	f9 b7 00 01 	moveq	r7,1
8000a4b2:	8b 68       	st.w	r5[0x18],r8
8000a4b4:	8b 47       	st.w	r5[0x10],r7
8000a4b6:	c0 a8       	rjmp	8000a4ca <__d2b+0x7e>
8000a4b8:	1a 9c       	mov	r12,sp
8000a4ba:	f0 1f 00 12 	mcall	8000a500 <__d2b+0xb4>
8000a4be:	30 18       	mov	r8,1
8000a4c0:	2e 0c       	sub	r12,-32
8000a4c2:	8b 48       	st.w	r5[0x10],r8
8000a4c4:	10 97       	mov	r7,r8
8000a4c6:	40 08       	lddsp	r8,sp[0x0]
8000a4c8:	8b 58       	st.w	r5[0x14],r8
8000a4ca:	58 04       	cp.w	r4,0
8000a4cc:	c0 90       	breq	8000a4de <__d2b+0x92>
8000a4ce:	e8 c8 04 33 	sub	r8,r4,1075
8000a4d2:	18 08       	add	r8,r12
8000a4d4:	87 08       	st.w	r3[0x0],r8
8000a4d6:	f8 0c 11 35 	rsub	r12,r12,53
8000a4da:	85 0c       	st.w	r2[0x0],r12
8000a4dc:	c0 d8       	rjmp	8000a4f6 <__d2b+0xaa>
8000a4de:	f8 c8 04 32 	sub	r8,r12,1074
8000a4e2:	87 08       	st.w	r3[0x0],r8
8000a4e4:	ea 07 00 28 	add	r8,r5,r7<<0x2
8000a4e8:	70 4c       	ld.w	r12,r8[0x10]
8000a4ea:	f0 1f 00 07 	mcall	8000a504 <__d2b+0xb8>
8000a4ee:	ee 08 15 05 	lsl	r8,r7,0x5
8000a4f2:	18 18       	sub	r8,r12
8000a4f4:	85 08       	st.w	r2[0x0],r8
8000a4f6:	0a 9c       	mov	r12,r5
8000a4f8:	2f ed       	sub	sp,-8
8000a4fa:	d8 32       	popm	r0-r7,pc
8000a4fc:	80 00       	ld.sh	r0,r0[0x0]
8000a4fe:	a3 d4       	cbr	r4,0x3
8000a500:	80 00       	ld.sh	r0,r0[0x0]
8000a502:	a2 d6       	st.b	r1[0x5],r6
8000a504:	80 00       	ld.sh	r0,r0[0x0]
8000a506:	a2 78       	st.h	r1[0xe],r8

8000a508 <__mdiff>:
8000a508:	d4 31       	pushm	r0-r7,lr
8000a50a:	74 49       	ld.w	r9,r10[0x10]
8000a50c:	76 48       	ld.w	r8,r11[0x10]
8000a50e:	16 97       	mov	r7,r11
8000a510:	14 96       	mov	r6,r10
8000a512:	f0 09 01 05 	sub	r5,r8,r9
8000a516:	c1 41       	brne	8000a53e <__mdiff+0x36>
8000a518:	f2 c8 ff fb 	sub	r8,r9,-5
8000a51c:	ee ce ff ec 	sub	lr,r7,-20
8000a520:	a3 68       	lsl	r8,0x2
8000a522:	f4 08 00 0b 	add	r11,r10,r8
8000a526:	ee 08 00 08 	add	r8,r7,r8
8000a52a:	11 4a       	ld.w	r10,--r8
8000a52c:	17 49       	ld.w	r9,--r11
8000a52e:	12 3a       	cp.w	r10,r9
8000a530:	c0 30       	breq	8000a536 <__mdiff+0x2e>
8000a532:	c0 e2       	brcc	8000a54e <__mdiff+0x46>
8000a534:	c0 78       	rjmp	8000a542 <__mdiff+0x3a>
8000a536:	1c 38       	cp.w	r8,lr
8000a538:	fe 9b ff f9 	brhi	8000a52a <__mdiff+0x22>
8000a53c:	c4 a8       	rjmp	8000a5d0 <__mdiff+0xc8>
8000a53e:	58 05       	cp.w	r5,0
8000a540:	c0 64       	brge	8000a54c <__mdiff+0x44>
8000a542:	0c 98       	mov	r8,r6
8000a544:	30 15       	mov	r5,1
8000a546:	0e 96       	mov	r6,r7
8000a548:	10 97       	mov	r7,r8
8000a54a:	c0 28       	rjmp	8000a54e <__mdiff+0x46>
8000a54c:	30 05       	mov	r5,0
8000a54e:	6e 1b       	ld.w	r11,r7[0x4]
8000a550:	f0 1f 00 24 	mcall	8000a5e0 <__mdiff+0xd8>
8000a554:	6c 48       	ld.w	r8,r6[0x10]
8000a556:	2f b8       	sub	r8,-5
8000a558:	6e 44       	ld.w	r4,r7[0x10]
8000a55a:	ec 08 00 23 	add	r3,r6,r8<<0x2
8000a55e:	99 35       	st.w	r12[0xc],r5
8000a560:	e8 c8 ff fb 	sub	r8,r4,-5
8000a564:	ee c5 ff ec 	sub	r5,r7,-20
8000a568:	ee 08 00 22 	add	r2,r7,r8<<0x2
8000a56c:	2e c6       	sub	r6,-20
8000a56e:	f8 ce ff ec 	sub	lr,r12,-20
8000a572:	30 07       	mov	r7,0
8000a574:	0b 08       	ld.w	r8,r5++
8000a576:	0d 09       	ld.w	r9,r6++
8000a578:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a57c:	f2 0a 16 10 	lsr	r10,r9,0x10
8000a580:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000a584:	14 1b       	sub	r11,r10
8000a586:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000a58a:	12 18       	sub	r8,r9
8000a58c:	0e 08       	add	r8,r7
8000a58e:	bc 18       	st.h	lr[0x2],r8
8000a590:	b1 48       	asr	r8,0x10
8000a592:	10 0b       	add	r11,r8
8000a594:	bc 0b       	st.h	lr[0x0],r11
8000a596:	f6 07 14 10 	asr	r7,r11,0x10
8000a59a:	2f ce       	sub	lr,-4
8000a59c:	06 36       	cp.w	r6,r3
8000a59e:	ce b3       	brcs	8000a574 <__mdiff+0x6c>
8000a5a0:	c0 f8       	rjmp	8000a5be <__mdiff+0xb6>
8000a5a2:	0b 08       	ld.w	r8,r5++
8000a5a4:	f0 09 16 10 	lsr	r9,r8,0x10
8000a5a8:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000a5ac:	ee 08 00 08 	add	r8,r7,r8
8000a5b0:	bc 18       	st.h	lr[0x2],r8
8000a5b2:	b1 48       	asr	r8,0x10
8000a5b4:	12 08       	add	r8,r9
8000a5b6:	bc 08       	st.h	lr[0x0],r8
8000a5b8:	f0 07 14 10 	asr	r7,r8,0x10
8000a5bc:	2f ce       	sub	lr,-4
8000a5be:	04 35       	cp.w	r5,r2
8000a5c0:	cf 13       	brcs	8000a5a2 <__mdiff+0x9a>
8000a5c2:	c0 28       	rjmp	8000a5c6 <__mdiff+0xbe>
8000a5c4:	20 14       	sub	r4,1
8000a5c6:	1d 48       	ld.w	r8,--lr
8000a5c8:	58 08       	cp.w	r8,0
8000a5ca:	cf d0       	breq	8000a5c4 <__mdiff+0xbc>
8000a5cc:	99 44       	st.w	r12[0x10],r4
8000a5ce:	d8 32       	popm	r0-r7,pc
8000a5d0:	30 0b       	mov	r11,0
8000a5d2:	f0 1f 00 04 	mcall	8000a5e0 <__mdiff+0xd8>
8000a5d6:	30 18       	mov	r8,1
8000a5d8:	99 48       	st.w	r12[0x10],r8
8000a5da:	30 08       	mov	r8,0
8000a5dc:	99 58       	st.w	r12[0x14],r8
8000a5de:	d8 32       	popm	r0-r7,pc
8000a5e0:	80 00       	ld.sh	r0,r0[0x0]
8000a5e2:	a3 d4       	cbr	r4,0x3

8000a5e4 <__lshift>:
8000a5e4:	d4 31       	pushm	r0-r7,lr
8000a5e6:	76 48       	ld.w	r8,r11[0x10]
8000a5e8:	2f f8       	sub	r8,-1
8000a5ea:	16 97       	mov	r7,r11
8000a5ec:	f4 04 14 05 	asr	r4,r10,0x5
8000a5f0:	14 93       	mov	r3,r10
8000a5f2:	f0 04 00 06 	add	r6,r8,r4
8000a5f6:	18 92       	mov	r2,r12
8000a5f8:	76 1b       	ld.w	r11,r11[0x4]
8000a5fa:	6e 28       	ld.w	r8,r7[0x8]
8000a5fc:	c0 38       	rjmp	8000a602 <__lshift+0x1e>
8000a5fe:	2f fb       	sub	r11,-1
8000a600:	a1 78       	lsl	r8,0x1
8000a602:	10 36       	cp.w	r6,r8
8000a604:	fe 99 ff fd 	brgt	8000a5fe <__lshift+0x1a>
8000a608:	04 9c       	mov	r12,r2
8000a60a:	f0 1f 00 1b 	mcall	8000a674 <__lshift+0x90>
8000a60e:	30 08       	mov	r8,0
8000a610:	18 95       	mov	r5,r12
8000a612:	10 99       	mov	r9,r8
8000a614:	2e cc       	sub	r12,-20
8000a616:	c0 38       	rjmp	8000a61c <__lshift+0x38>
8000a618:	18 a9       	st.w	r12++,r9
8000a61a:	2f f8       	sub	r8,-1
8000a61c:	08 38       	cp.w	r8,r4
8000a61e:	cf d5       	brlt	8000a618 <__lshift+0x34>
8000a620:	6e 48       	ld.w	r8,r7[0x10]
8000a622:	f5 d3 c0 05 	bfextu	r10,r3,0x0,0x5
8000a626:	2f b8       	sub	r8,-5
8000a628:	ee c9 ff ec 	sub	r9,r7,-20
8000a62c:	ee 08 00 24 	add	r4,r7,r8<<0x2
8000a630:	58 0a       	cp.w	r10,0
8000a632:	c1 40       	breq	8000a65a <__lshift+0x76>
8000a634:	f4 0e 11 20 	rsub	lr,r10,32
8000a638:	30 0b       	mov	r11,0
8000a63a:	72 08       	ld.w	r8,r9[0x0]
8000a63c:	f0 0a 09 48 	lsl	r8,r8,r10
8000a640:	f7 e8 10 08 	or	r8,r11,r8
8000a644:	18 a8       	st.w	r12++,r8
8000a646:	13 08       	ld.w	r8,r9++
8000a648:	f0 0e 0a 4b 	lsr	r11,r8,lr
8000a64c:	08 39       	cp.w	r9,r4
8000a64e:	cf 63       	brcs	8000a63a <__lshift+0x56>
8000a650:	99 0b       	st.w	r12[0x0],r11
8000a652:	58 0b       	cp.w	r11,0
8000a654:	c0 70       	breq	8000a662 <__lshift+0x7e>
8000a656:	2f f6       	sub	r6,-1
8000a658:	c0 58       	rjmp	8000a662 <__lshift+0x7e>
8000a65a:	13 08       	ld.w	r8,r9++
8000a65c:	18 a8       	st.w	r12++,r8
8000a65e:	08 39       	cp.w	r9,r4
8000a660:	cf d3       	brcs	8000a65a <__lshift+0x76>
8000a662:	ec c8 00 01 	sub	r8,r6,1
8000a666:	04 9c       	mov	r12,r2
8000a668:	8b 48       	st.w	r5[0x10],r8
8000a66a:	0e 9b       	mov	r11,r7
8000a66c:	f0 1f 00 03 	mcall	8000a678 <__lshift+0x94>
8000a670:	0a 9c       	mov	r12,r5
8000a672:	d8 32       	popm	r0-r7,pc
8000a674:	80 00       	ld.sh	r0,r0[0x0]
8000a676:	a3 d4       	cbr	r4,0x3
8000a678:	80 00       	ld.sh	r0,r0[0x0]
8000a67a:	a3 9c       	lsr	r12,0x3

8000a67c <__multiply>:
8000a67c:	d4 31       	pushm	r0-r7,lr
8000a67e:	20 2d       	sub	sp,8
8000a680:	16 97       	mov	r7,r11
8000a682:	76 49       	ld.w	r9,r11[0x10]
8000a684:	74 48       	ld.w	r8,r10[0x10]
8000a686:	14 96       	mov	r6,r10
8000a688:	10 39       	cp.w	r9,r8
8000a68a:	ec 08 17 50 	movlt	r8,r6
8000a68e:	ee 06 17 50 	movlt	r6,r7
8000a692:	f0 07 17 50 	movlt	r7,r8
8000a696:	6e 28       	ld.w	r8,r7[0x8]
8000a698:	76 45       	ld.w	r5,r11[0x10]
8000a69a:	74 44       	ld.w	r4,r10[0x10]
8000a69c:	76 1b       	ld.w	r11,r11[0x4]
8000a69e:	e8 05 00 03 	add	r3,r4,r5
8000a6a2:	10 33       	cp.w	r3,r8
8000a6a4:	f7 bb 09 ff 	subgt	r11,-1
8000a6a8:	f0 1f 00 37 	mcall	8000a784 <__multiply+0x108>
8000a6ac:	e6 c8 ff fb 	sub	r8,r3,-5
8000a6b0:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000a6b4:	f8 c9 ff ec 	sub	r9,r12,-20
8000a6b8:	50 08       	stdsp	sp[0x0],r8
8000a6ba:	18 92       	mov	r2,r12
8000a6bc:	30 0a       	mov	r10,0
8000a6be:	12 98       	mov	r8,r9
8000a6c0:	c0 28       	rjmp	8000a6c4 <__multiply+0x48>
8000a6c2:	10 aa       	st.w	r8++,r10
8000a6c4:	40 0b       	lddsp	r11,sp[0x0]
8000a6c6:	16 38       	cp.w	r8,r11
8000a6c8:	cf d3       	brcs	8000a6c2 <__multiply+0x46>
8000a6ca:	ea c8 ff fb 	sub	r8,r5,-5
8000a6ce:	ee c1 ff ec 	sub	r1,r7,-20
8000a6d2:	ee 08 00 20 	add	r0,r7,r8<<0x2
8000a6d6:	ec c5 ff ec 	sub	r5,r6,-20
8000a6da:	e8 c8 ff fb 	sub	r8,r4,-5
8000a6de:	12 94       	mov	r4,r9
8000a6e0:	ec 08 00 28 	add	r8,r6,r8<<0x2
8000a6e4:	50 18       	stdsp	sp[0x4],r8
8000a6e6:	c3 e8       	rjmp	8000a762 <__multiply+0xe6>
8000a6e8:	8a 9c       	ld.uh	r12,r5[0x2]
8000a6ea:	58 0c       	cp.w	r12,0
8000a6ec:	c1 d0       	breq	8000a726 <__multiply+0xaa>
8000a6ee:	02 96       	mov	r6,r1
8000a6f0:	08 9e       	mov	lr,r4
8000a6f2:	30 07       	mov	r7,0
8000a6f4:	7c 0a       	ld.w	r10,lr[0x0]
8000a6f6:	0d 08       	ld.w	r8,r6++
8000a6f8:	f4 0b 16 10 	lsr	r11,r10,0x10
8000a6fc:	f0 09 16 10 	lsr	r9,r8,0x10
8000a700:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000a704:	b9 39       	mul	r9,r12
8000a706:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000a70a:	16 09       	add	r9,r11
8000a70c:	b9 38       	mul	r8,r12
8000a70e:	14 08       	add	r8,r10
8000a710:	0e 08       	add	r8,r7
8000a712:	bc 18       	st.h	lr[0x2],r8
8000a714:	b1 88       	lsr	r8,0x10
8000a716:	10 09       	add	r9,r8
8000a718:	bc 09       	st.h	lr[0x0],r9
8000a71a:	f2 07 16 10 	lsr	r7,r9,0x10
8000a71e:	2f ce       	sub	lr,-4
8000a720:	00 36       	cp.w	r6,r0
8000a722:	ce 93       	brcs	8000a6f4 <__multiply+0x78>
8000a724:	9d 07       	st.w	lr[0x0],r7
8000a726:	8a 87       	ld.uh	r7,r5[0x0]
8000a728:	58 07       	cp.w	r7,0
8000a72a:	c1 a0       	breq	8000a75e <__multiply+0xe2>
8000a72c:	68 09       	ld.w	r9,r4[0x0]
8000a72e:	02 9e       	mov	lr,r1
8000a730:	08 9b       	mov	r11,r4
8000a732:	30 06       	mov	r6,0
8000a734:	96 8a       	ld.uh	r10,r11[0x0]
8000a736:	b6 19       	st.h	r11[0x2],r9
8000a738:	1d 09       	ld.w	r9,lr++
8000a73a:	f1 d9 c0 10 	bfextu	r8,r9,0x0,0x10
8000a73e:	af 38       	mul	r8,r7
8000a740:	14 08       	add	r8,r10
8000a742:	0c 08       	add	r8,r6
8000a744:	b6 08       	st.h	r11[0x0],r8
8000a746:	b1 89       	lsr	r9,0x10
8000a748:	2f cb       	sub	r11,-4
8000a74a:	af 39       	mul	r9,r7
8000a74c:	b1 88       	lsr	r8,0x10
8000a74e:	96 9a       	ld.uh	r10,r11[0x2]
8000a750:	14 09       	add	r9,r10
8000a752:	10 09       	add	r9,r8
8000a754:	f2 06 16 10 	lsr	r6,r9,0x10
8000a758:	00 3e       	cp.w	lr,r0
8000a75a:	ce d3       	brcs	8000a734 <__multiply+0xb8>
8000a75c:	97 09       	st.w	r11[0x0],r9
8000a75e:	2f c5       	sub	r5,-4
8000a760:	2f c4       	sub	r4,-4
8000a762:	40 18       	lddsp	r8,sp[0x4]
8000a764:	10 35       	cp.w	r5,r8
8000a766:	cc 13       	brcs	8000a6e8 <__multiply+0x6c>
8000a768:	40 09       	lddsp	r9,sp[0x0]
8000a76a:	c0 28       	rjmp	8000a76e <__multiply+0xf2>
8000a76c:	20 13       	sub	r3,1
8000a76e:	58 03       	cp.w	r3,0
8000a770:	e0 8a 00 05 	brle	8000a77a <__multiply+0xfe>
8000a774:	13 48       	ld.w	r8,--r9
8000a776:	58 08       	cp.w	r8,0
8000a778:	cf a0       	breq	8000a76c <__multiply+0xf0>
8000a77a:	85 43       	st.w	r2[0x10],r3
8000a77c:	04 9c       	mov	r12,r2
8000a77e:	2f ed       	sub	sp,-8
8000a780:	d8 32       	popm	r0-r7,pc
8000a782:	00 00       	add	r0,r0
8000a784:	80 00       	ld.sh	r0,r0[0x0]
8000a786:	a3 d4       	cbr	r4,0x3

8000a788 <__i2b>:
8000a788:	d4 21       	pushm	r4-r7,lr
8000a78a:	16 96       	mov	r6,r11
8000a78c:	30 1b       	mov	r11,1
8000a78e:	f0 1f 00 04 	mcall	8000a79c <__i2b+0x14>
8000a792:	30 18       	mov	r8,1
8000a794:	99 56       	st.w	r12[0x14],r6
8000a796:	99 48       	st.w	r12[0x10],r8
8000a798:	d8 22       	popm	r4-r7,pc
8000a79a:	00 00       	add	r0,r0
8000a79c:	80 00       	ld.sh	r0,r0[0x0]
8000a79e:	a3 d4       	cbr	r4,0x3

8000a7a0 <__multadd>:
8000a7a0:	d4 31       	pushm	r0-r7,lr
8000a7a2:	16 97       	mov	r7,r11
8000a7a4:	18 93       	mov	r3,r12
8000a7a6:	76 44       	ld.w	r4,r11[0x10]
8000a7a8:	f6 cc ff ec 	sub	r12,r11,-20
8000a7ac:	14 9e       	mov	lr,r10
8000a7ae:	12 95       	mov	r5,r9
8000a7b0:	30 0b       	mov	r11,0
8000a7b2:	78 09       	ld.w	r9,r12[0x0]
8000a7b4:	f2 08 16 10 	lsr	r8,r9,0x10
8000a7b8:	fc 08 02 48 	mul	r8,lr,r8
8000a7bc:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000a7c0:	fc 09 02 49 	mul	r9,lr,r9
8000a7c4:	ea 09 00 09 	add	r9,r5,r9
8000a7c8:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
8000a7cc:	b1 89       	lsr	r9,0x10
8000a7ce:	10 09       	add	r9,r8
8000a7d0:	f2 08 15 10 	lsl	r8,r9,0x10
8000a7d4:	14 08       	add	r8,r10
8000a7d6:	18 a8       	st.w	r12++,r8
8000a7d8:	2f fb       	sub	r11,-1
8000a7da:	f2 05 16 10 	lsr	r5,r9,0x10
8000a7de:	08 3b       	cp.w	r11,r4
8000a7e0:	ce 95       	brlt	8000a7b2 <__multadd+0x12>
8000a7e2:	58 05       	cp.w	r5,0
8000a7e4:	c1 e0       	breq	8000a820 <__multadd+0x80>
8000a7e6:	6e 28       	ld.w	r8,r7[0x8]
8000a7e8:	10 34       	cp.w	r4,r8
8000a7ea:	c1 45       	brlt	8000a812 <__multadd+0x72>
8000a7ec:	6e 1b       	ld.w	r11,r7[0x4]
8000a7ee:	06 9c       	mov	r12,r3
8000a7f0:	2f fb       	sub	r11,-1
8000a7f2:	f0 1f 00 0d 	mcall	8000a824 <__multadd+0x84>
8000a7f6:	6e 4a       	ld.w	r10,r7[0x10]
8000a7f8:	ee cb ff f4 	sub	r11,r7,-12
8000a7fc:	18 96       	mov	r6,r12
8000a7fe:	2f ea       	sub	r10,-2
8000a800:	2f 4c       	sub	r12,-12
8000a802:	a3 6a       	lsl	r10,0x2
8000a804:	f0 1f 00 09 	mcall	8000a828 <__multadd+0x88>
8000a808:	0e 9b       	mov	r11,r7
8000a80a:	06 9c       	mov	r12,r3
8000a80c:	f0 1f 00 08 	mcall	8000a82c <__multadd+0x8c>
8000a810:	0c 97       	mov	r7,r6
8000a812:	e8 c8 ff ff 	sub	r8,r4,-1
8000a816:	8f 48       	st.w	r7[0x10],r8
8000a818:	e8 c8 ff fb 	sub	r8,r4,-5
8000a81c:	ee 08 09 25 	st.w	r7[r8<<0x2],r5
8000a820:	0e 9c       	mov	r12,r7
8000a822:	d8 32       	popm	r0-r7,pc
8000a824:	80 00       	ld.sh	r0,r0[0x0]
8000a826:	a3 d4       	cbr	r4,0x3
8000a828:	80 00       	ld.sh	r0,r0[0x0]
8000a82a:	a0 f2       	st.b	r0[0x7],r2
8000a82c:	80 00       	ld.sh	r0,r0[0x0]
8000a82e:	a3 9c       	lsr	r12,0x3

8000a830 <__pow5mult>:
8000a830:	d4 31       	pushm	r0-r7,lr
8000a832:	14 97       	mov	r7,r10
8000a834:	18 95       	mov	r5,r12
8000a836:	16 93       	mov	r3,r11
8000a838:	f3 da c0 02 	bfextu	r9,r10,0x0,0x2
8000a83c:	c0 90       	breq	8000a84e <__pow5mult+0x1e>
8000a83e:	20 19       	sub	r9,1
8000a840:	4a 18       	lddpc	r8,8000a8c4 <__pow5mult+0x94>
8000a842:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000a846:	30 09       	mov	r9,0
8000a848:	f0 1f 00 20 	mcall	8000a8c8 <__pow5mult+0x98>
8000a84c:	18 93       	mov	r3,r12
8000a84e:	ee 04 14 02 	asr	r4,r7,0x2
8000a852:	c3 70       	breq	8000a8c0 <__pow5mult+0x90>
8000a854:	6a 96       	ld.w	r6,r5[0x24]
8000a856:	58 06       	cp.w	r6,0
8000a858:	c0 91       	brne	8000a86a <__pow5mult+0x3a>
8000a85a:	31 0c       	mov	r12,16
8000a85c:	f0 1f 00 1c 	mcall	8000a8cc <__pow5mult+0x9c>
8000a860:	99 36       	st.w	r12[0xc],r6
8000a862:	8b 9c       	st.w	r5[0x24],r12
8000a864:	99 16       	st.w	r12[0x4],r6
8000a866:	99 26       	st.w	r12[0x8],r6
8000a868:	99 06       	st.w	r12[0x0],r6
8000a86a:	6a 96       	ld.w	r6,r5[0x24]
8000a86c:	6c 27       	ld.w	r7,r6[0x8]
8000a86e:	58 07       	cp.w	r7,0
8000a870:	c0 d1       	brne	8000a88a <__pow5mult+0x5a>
8000a872:	e0 6b 02 71 	mov	r11,625
8000a876:	0a 9c       	mov	r12,r5
8000a878:	f0 1f 00 16 	mcall	8000a8d0 <__pow5mult+0xa0>
8000a87c:	8d 2c       	st.w	r6[0x8],r12
8000a87e:	30 08       	mov	r8,0
8000a880:	18 97       	mov	r7,r12
8000a882:	99 08       	st.w	r12[0x0],r8
8000a884:	c0 38       	rjmp	8000a88a <__pow5mult+0x5a>
8000a886:	0c 9c       	mov	r12,r6
8000a888:	18 97       	mov	r7,r12
8000a88a:	ed b4 00 00 	bld	r4,0x0
8000a88e:	c0 c1       	brne	8000a8a6 <__pow5mult+0x76>
8000a890:	06 9b       	mov	r11,r3
8000a892:	0e 9a       	mov	r10,r7
8000a894:	0a 9c       	mov	r12,r5
8000a896:	f0 1f 00 10 	mcall	8000a8d4 <__pow5mult+0xa4>
8000a89a:	06 9b       	mov	r11,r3
8000a89c:	18 96       	mov	r6,r12
8000a89e:	0a 9c       	mov	r12,r5
8000a8a0:	0c 93       	mov	r3,r6
8000a8a2:	f0 1f 00 0e 	mcall	8000a8d8 <__pow5mult+0xa8>
8000a8a6:	a1 54       	asr	r4,0x1
8000a8a8:	c0 c0       	breq	8000a8c0 <__pow5mult+0x90>
8000a8aa:	6e 06       	ld.w	r6,r7[0x0]
8000a8ac:	58 06       	cp.w	r6,0
8000a8ae:	ce c1       	brne	8000a886 <__pow5mult+0x56>
8000a8b0:	0e 9a       	mov	r10,r7
8000a8b2:	0e 9b       	mov	r11,r7
8000a8b4:	0a 9c       	mov	r12,r5
8000a8b6:	f0 1f 00 08 	mcall	8000a8d4 <__pow5mult+0xa4>
8000a8ba:	8f 0c       	st.w	r7[0x0],r12
8000a8bc:	99 06       	st.w	r12[0x0],r6
8000a8be:	ce 5b       	rjmp	8000a888 <__pow5mult+0x58>
8000a8c0:	06 9c       	mov	r12,r3
8000a8c2:	d8 32       	popm	r0-r7,pc
8000a8c4:	80 00       	ld.sh	r0,r0[0x0]
8000a8c6:	be 8c       	st.b	pc[0x0],r12
8000a8c8:	80 00       	ld.sh	r0,r0[0x0]
8000a8ca:	a7 a0       	sbr	r0,0x6
8000a8cc:	80 00       	ld.sh	r0,r0[0x0]
8000a8ce:	5e b8       	rethi	r8
8000a8d0:	80 00       	ld.sh	r0,r0[0x0]
8000a8d2:	a7 88       	lsr	r8,0x6
8000a8d4:	80 00       	ld.sh	r0,r0[0x0]
8000a8d6:	a6 7c       	st.h	r3[0xe],r12
8000a8d8:	80 00       	ld.sh	r0,r0[0x0]
8000a8da:	a3 9c       	lsr	r12,0x3

8000a8dc <_read_r>:
8000a8dc:	d4 21       	pushm	r4-r7,lr
8000a8de:	16 98       	mov	r8,r11
8000a8e0:	18 96       	mov	r6,r12
8000a8e2:	10 9c       	mov	r12,r8
8000a8e4:	30 08       	mov	r8,0
8000a8e6:	14 9b       	mov	r11,r10
8000a8e8:	48 67       	lddpc	r7,8000a900 <_read_r+0x24>
8000a8ea:	12 9a       	mov	r10,r9
8000a8ec:	8f 08       	st.w	r7[0x0],r8
8000a8ee:	f0 1f 00 06 	mcall	8000a904 <_read_r+0x28>
8000a8f2:	5b fc       	cp.w	r12,-1
8000a8f4:	c0 51       	brne	8000a8fe <_read_r+0x22>
8000a8f6:	6e 08       	ld.w	r8,r7[0x0]
8000a8f8:	58 08       	cp.w	r8,0
8000a8fa:	ed f8 1a 03 	st.wne	r6[0xc],r8
8000a8fe:	d8 22       	popm	r4-r7,pc
8000a900:	00 00       	add	r0,r0
8000a902:	06 a4       	st.w	r3++,r4
8000a904:	80 00       	ld.sh	r0,r0[0x0]
8000a906:	50 44       	stdsp	sp[0x10],r4

8000a908 <_realloc_r>:
8000a908:	d4 31       	pushm	r0-r7,lr
8000a90a:	20 1d       	sub	sp,4
8000a90c:	16 94       	mov	r4,r11
8000a90e:	14 91       	mov	r1,r10
8000a910:	18 90       	mov	r0,r12
8000a912:	58 0b       	cp.w	r11,0
8000a914:	c0 61       	brne	8000a920 <_realloc_r+0x18>
8000a916:	14 9b       	mov	r11,r10
8000a918:	f0 1f 00 5a 	mcall	8000aa80 <_realloc_r+0x178>
8000a91c:	18 93       	mov	r3,r12
8000a91e:	c7 39       	rjmp	8000ac04 <_realloc_r+0x2fc>
8000a920:	f0 1f 00 59 	mcall	8000aa84 <_realloc_r+0x17c>
8000a924:	e2 c8 ff f5 	sub	r8,r1,-11
8000a928:	e8 c6 00 08 	sub	r6,r4,8
8000a92c:	59 68       	cp.w	r8,22
8000a92e:	f9 b2 08 10 	movls	r2,16
8000a932:	f9 b9 0b f8 	movhi	r9,-8
8000a936:	f1 d9 eb 22 	andhi	r2,r8,r9
8000a93a:	6c 1e       	ld.w	lr,r6[0x4]
8000a93c:	02 32       	cp.w	r2,r1
8000a93e:	5f 38       	srlo	r8
8000a940:	f1 e2 13 f8 	or	r8,r8,r2>>0x1f
8000a944:	c0 50       	breq	8000a94e <_realloc_r+0x46>
8000a946:	30 c8       	mov	r8,12
8000a948:	30 03       	mov	r3,0
8000a94a:	81 38       	st.w	r0[0xc],r8
8000a94c:	c5 c9       	rjmp	8000ac04 <_realloc_r+0x2fc>
8000a94e:	1c 95       	mov	r5,lr
8000a950:	e0 15 ff fc 	andl	r5,0xfffc
8000a954:	04 35       	cp.w	r5,r2
8000a956:	e0 84 01 2c 	brge	8000abae <_realloc_r+0x2a6>
8000a95a:	4c c8       	lddpc	r8,8000aa88 <_realloc_r+0x180>
8000a95c:	ec 05 00 0a 	add	r10,r6,r5
8000a960:	70 2c       	ld.w	r12,r8[0x8]
8000a962:	18 3a       	cp.w	r10,r12
8000a964:	c0 90       	breq	8000a976 <_realloc_r+0x6e>
8000a966:	74 18       	ld.w	r8,r10[0x4]
8000a968:	a1 c8       	cbr	r8,0x0
8000a96a:	f4 08 00 08 	add	r8,r10,r8
8000a96e:	70 18       	ld.w	r8,r8[0x4]
8000a970:	ed b8 00 00 	bld	r8,0x0
8000a974:	c2 70       	breq	8000a9c2 <_realloc_r+0xba>
8000a976:	74 1b       	ld.w	r11,r10[0x4]
8000a978:	e0 1b ff fc 	andl	r11,0xfffc
8000a97c:	f6 05 00 09 	add	r9,r11,r5
8000a980:	18 3a       	cp.w	r10,r12
8000a982:	c1 71       	brne	8000a9b0 <_realloc_r+0xa8>
8000a984:	e4 c8 ff f0 	sub	r8,r2,-16
8000a988:	10 39       	cp.w	r9,r8
8000a98a:	c1 e5       	brlt	8000a9c6 <_realloc_r+0xbe>
8000a98c:	f2 02 01 08 	sub	r8,r9,r2
8000a990:	ec 02 00 09 	add	r9,r6,r2
8000a994:	a1 a8       	sbr	r8,0x0
8000a996:	93 18       	st.w	r9[0x4],r8
8000a998:	4b ca       	lddpc	r10,8000aa88 <_realloc_r+0x180>
8000a99a:	6c 18       	ld.w	r8,r6[0x4]
8000a99c:	95 29       	st.w	r10[0x8],r9
8000a99e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a9a2:	00 9c       	mov	r12,r0
8000a9a4:	e5 e8 10 08 	or	r8,r2,r8
8000a9a8:	ec c3 ff f8 	sub	r3,r6,-8
8000a9ac:	8d 18       	st.w	r6[0x4],r8
8000a9ae:	c2 99       	rjmp	8000ac00 <_realloc_r+0x2f8>
8000a9b0:	12 93       	mov	r3,r9
8000a9b2:	04 39       	cp.w	r9,r2
8000a9b4:	c0 95       	brlt	8000a9c6 <_realloc_r+0xbe>
8000a9b6:	74 29       	ld.w	r9,r10[0x8]
8000a9b8:	74 38       	ld.w	r8,r10[0xc]
8000a9ba:	0c 97       	mov	r7,r6
8000a9bc:	91 29       	st.w	r8[0x8],r9
8000a9be:	93 38       	st.w	r9[0xc],r8
8000a9c0:	cf 98       	rjmp	8000abb2 <_realloc_r+0x2aa>
8000a9c2:	30 0b       	mov	r11,0
8000a9c4:	16 9a       	mov	r10,r11
8000a9c6:	ed be 00 00 	bld	lr,0x0
8000a9ca:	e0 80 00 aa 	breq	8000ab1e <_realloc_r+0x216>
8000a9ce:	6c 08       	ld.w	r8,r6[0x0]
8000a9d0:	ec 08 01 07 	sub	r7,r6,r8
8000a9d4:	6e 19       	ld.w	r9,r7[0x4]
8000a9d6:	e0 19 ff fc 	andl	r9,0xfffc
8000a9da:	58 0a       	cp.w	r10,0
8000a9dc:	c6 70       	breq	8000aaaa <_realloc_r+0x1a2>
8000a9de:	f2 05 00 08 	add	r8,r9,r5
8000a9e2:	18 3a       	cp.w	r10,r12
8000a9e4:	c5 61       	brne	8000aa90 <_realloc_r+0x188>
8000a9e6:	16 08       	add	r8,r11
8000a9e8:	50 08       	stdsp	sp[0x0],r8
8000a9ea:	e4 c8 ff f0 	sub	r8,r2,-16
8000a9ee:	40 0a       	lddsp	r10,sp[0x0]
8000a9f0:	10 3a       	cp.w	r10,r8
8000a9f2:	c5 c5       	brlt	8000aaaa <_realloc_r+0x1a2>
8000a9f4:	6e 39       	ld.w	r9,r7[0xc]
8000a9f6:	6e 28       	ld.w	r8,r7[0x8]
8000a9f8:	93 28       	st.w	r9[0x8],r8
8000a9fa:	91 39       	st.w	r8[0xc],r9
8000a9fc:	ea cb 00 04 	sub	r11,r5,4
8000aa00:	ee c3 ff f8 	sub	r3,r7,-8
8000aa04:	e0 4b 00 24 	cp.w	r11,36
8000aa08:	e0 8b 00 27 	brhi	8000aa56 <_realloc_r+0x14e>
8000aa0c:	08 99       	mov	r9,r4
8000aa0e:	06 9a       	mov	r10,r3
8000aa10:	59 3b       	cp.w	r11,19
8000aa12:	e0 88 00 1b 	brls	8000aa48 <_realloc_r+0x140>
8000aa16:	68 08       	ld.w	r8,r4[0x0]
8000aa18:	87 08       	st.w	r3[0x0],r8
8000aa1a:	2f c9       	sub	r9,-4
8000aa1c:	13 08       	ld.w	r8,r9++
8000aa1e:	8f 38       	st.w	r7[0xc],r8
8000aa20:	ee ca ff f0 	sub	r10,r7,-16
8000aa24:	59 bb       	cp.w	r11,27
8000aa26:	e0 88 00 11 	brls	8000aa48 <_realloc_r+0x140>
8000aa2a:	13 08       	ld.w	r8,r9++
8000aa2c:	95 08       	st.w	r10[0x0],r8
8000aa2e:	13 08       	ld.w	r8,r9++
8000aa30:	8f 58       	st.w	r7[0x14],r8
8000aa32:	ee ca ff e8 	sub	r10,r7,-24
8000aa36:	e0 4b 00 24 	cp.w	r11,36
8000aa3a:	c0 71       	brne	8000aa48 <_realloc_r+0x140>
8000aa3c:	13 08       	ld.w	r8,r9++
8000aa3e:	95 08       	st.w	r10[0x0],r8
8000aa40:	ee ca ff e0 	sub	r10,r7,-32
8000aa44:	13 08       	ld.w	r8,r9++
8000aa46:	8f 78       	st.w	r7[0x1c],r8
8000aa48:	13 08       	ld.w	r8,r9++
8000aa4a:	14 a8       	st.w	r10++,r8
8000aa4c:	72 08       	ld.w	r8,r9[0x0]
8000aa4e:	95 08       	st.w	r10[0x0],r8
8000aa50:	72 18       	ld.w	r8,r9[0x4]
8000aa52:	95 18       	st.w	r10[0x4],r8
8000aa54:	c0 68       	rjmp	8000aa60 <_realloc_r+0x158>
8000aa56:	16 9a       	mov	r10,r11
8000aa58:	06 9c       	mov	r12,r3
8000aa5a:	08 9b       	mov	r11,r4
8000aa5c:	f0 1f 00 0c 	mcall	8000aa8c <_realloc_r+0x184>
8000aa60:	40 08       	lddsp	r8,sp[0x0]
8000aa62:	04 18       	sub	r8,r2
8000aa64:	a1 a8       	sbr	r8,0x0
8000aa66:	ee 02 00 09 	add	r9,r7,r2
8000aa6a:	93 18       	st.w	r9[0x4],r8
8000aa6c:	48 78       	lddpc	r8,8000aa88 <_realloc_r+0x180>
8000aa6e:	00 9c       	mov	r12,r0
8000aa70:	91 29       	st.w	r8[0x8],r9
8000aa72:	6e 18       	ld.w	r8,r7[0x4]
8000aa74:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000aa78:	e5 e8 10 08 	or	r8,r2,r8
8000aa7c:	8f 18       	st.w	r7[0x4],r8
8000aa7e:	cc 18       	rjmp	8000ac00 <_realloc_r+0x2f8>
8000aa80:	80 00       	ld.sh	r0,r0[0x0]
8000aa82:	5e d0       	retvc	r0
8000aa84:	80 00       	ld.sh	r0,r0[0x0]
8000aa86:	63 50       	ld.w	r0,r1[0x54]
8000aa88:	00 00       	add	r0,r0
8000aa8a:	01 34       	ld.ub	r4,r0++
8000aa8c:	80 00       	ld.sh	r0,r0[0x0]
8000aa8e:	a2 3a       	st.h	r1[0x6],r10
8000aa90:	f0 0b 00 03 	add	r3,r8,r11
8000aa94:	04 33       	cp.w	r3,r2
8000aa96:	c0 a5       	brlt	8000aaaa <_realloc_r+0x1a2>
8000aa98:	74 29       	ld.w	r9,r10[0x8]
8000aa9a:	74 38       	ld.w	r8,r10[0xc]
8000aa9c:	91 29       	st.w	r8[0x8],r9
8000aa9e:	93 38       	st.w	r9[0xc],r8
8000aaa0:	6e 29       	ld.w	r9,r7[0x8]
8000aaa2:	6e 38       	ld.w	r8,r7[0xc]
8000aaa4:	91 29       	st.w	r8[0x8],r9
8000aaa6:	93 38       	st.w	r9[0xc],r8
8000aaa8:	c0 98       	rjmp	8000aaba <_realloc_r+0x1b2>
8000aaaa:	f2 05 00 03 	add	r3,r9,r5
8000aaae:	04 33       	cp.w	r3,r2
8000aab0:	c3 75       	brlt	8000ab1e <_realloc_r+0x216>
8000aab2:	6e 39       	ld.w	r9,r7[0xc]
8000aab4:	6e 28       	ld.w	r8,r7[0x8]
8000aab6:	93 28       	st.w	r9[0x8],r8
8000aab8:	91 39       	st.w	r8[0xc],r9
8000aaba:	ea cb 00 04 	sub	r11,r5,4
8000aabe:	ee cc ff f8 	sub	r12,r7,-8
8000aac2:	e0 4b 00 24 	cp.w	r11,36
8000aac6:	e0 8b 00 27 	brhi	8000ab14 <_realloc_r+0x20c>
8000aaca:	08 99       	mov	r9,r4
8000aacc:	18 9a       	mov	r10,r12
8000aace:	59 3b       	cp.w	r11,19
8000aad0:	e0 88 00 1b 	brls	8000ab06 <_realloc_r+0x1fe>
8000aad4:	68 08       	ld.w	r8,r4[0x0]
8000aad6:	99 08       	st.w	r12[0x0],r8
8000aad8:	2f c9       	sub	r9,-4
8000aada:	13 08       	ld.w	r8,r9++
8000aadc:	8f 38       	st.w	r7[0xc],r8
8000aade:	ee ca ff f0 	sub	r10,r7,-16
8000aae2:	59 bb       	cp.w	r11,27
8000aae4:	e0 88 00 11 	brls	8000ab06 <_realloc_r+0x1fe>
8000aae8:	13 08       	ld.w	r8,r9++
8000aaea:	95 08       	st.w	r10[0x0],r8
8000aaec:	13 08       	ld.w	r8,r9++
8000aaee:	8f 58       	st.w	r7[0x14],r8
8000aaf0:	ee ca ff e8 	sub	r10,r7,-24
8000aaf4:	e0 4b 00 24 	cp.w	r11,36
8000aaf8:	c0 71       	brne	8000ab06 <_realloc_r+0x1fe>
8000aafa:	13 08       	ld.w	r8,r9++
8000aafc:	95 08       	st.w	r10[0x0],r8
8000aafe:	ee ca ff e0 	sub	r10,r7,-32
8000ab02:	13 08       	ld.w	r8,r9++
8000ab04:	8f 78       	st.w	r7[0x1c],r8
8000ab06:	13 08       	ld.w	r8,r9++
8000ab08:	14 a8       	st.w	r10++,r8
8000ab0a:	72 08       	ld.w	r8,r9[0x0]
8000ab0c:	95 08       	st.w	r10[0x0],r8
8000ab0e:	72 18       	ld.w	r8,r9[0x4]
8000ab10:	95 18       	st.w	r10[0x4],r8
8000ab12:	c5 08       	rjmp	8000abb2 <_realloc_r+0x2aa>
8000ab14:	16 9a       	mov	r10,r11
8000ab16:	08 9b       	mov	r11,r4
8000ab18:	f0 1f 00 3d 	mcall	8000ac0c <_realloc_r+0x304>
8000ab1c:	c4 b8       	rjmp	8000abb2 <_realloc_r+0x2aa>
8000ab1e:	02 9b       	mov	r11,r1
8000ab20:	00 9c       	mov	r12,r0
8000ab22:	f0 1f 00 3c 	mcall	8000ac10 <_realloc_r+0x308>
8000ab26:	18 93       	mov	r3,r12
8000ab28:	c4 10       	breq	8000abaa <_realloc_r+0x2a2>
8000ab2a:	6c 18       	ld.w	r8,r6[0x4]
8000ab2c:	f8 c9 00 08 	sub	r9,r12,8
8000ab30:	a1 c8       	cbr	r8,0x0
8000ab32:	ec 08 00 08 	add	r8,r6,r8
8000ab36:	10 39       	cp.w	r9,r8
8000ab38:	c0 81       	brne	8000ab48 <_realloc_r+0x240>
8000ab3a:	72 18       	ld.w	r8,r9[0x4]
8000ab3c:	0c 97       	mov	r7,r6
8000ab3e:	e0 18 ff fc 	andl	r8,0xfffc
8000ab42:	f0 05 00 03 	add	r3,r8,r5
8000ab46:	c3 68       	rjmp	8000abb2 <_realloc_r+0x2aa>
8000ab48:	ea ce 00 04 	sub	lr,r5,4
8000ab4c:	e0 4e 00 24 	cp.w	lr,36
8000ab50:	e0 8b 00 25 	brhi	8000ab9a <_realloc_r+0x292>
8000ab54:	08 9b       	mov	r11,r4
8000ab56:	18 9a       	mov	r10,r12
8000ab58:	59 3e       	cp.w	lr,19
8000ab5a:	e0 88 00 18 	brls	8000ab8a <_realloc_r+0x282>
8000ab5e:	08 98       	mov	r8,r4
8000ab60:	18 99       	mov	r9,r12
8000ab62:	11 0a       	ld.w	r10,r8++
8000ab64:	12 aa       	st.w	r9++,r10
8000ab66:	10 9b       	mov	r11,r8
8000ab68:	12 9a       	mov	r10,r9
8000ab6a:	17 08       	ld.w	r8,r11++
8000ab6c:	14 a8       	st.w	r10++,r8
8000ab6e:	59 be       	cp.w	lr,27
8000ab70:	e0 88 00 0d 	brls	8000ab8a <_realloc_r+0x282>
8000ab74:	17 08       	ld.w	r8,r11++
8000ab76:	14 a8       	st.w	r10++,r8
8000ab78:	17 08       	ld.w	r8,r11++
8000ab7a:	14 a8       	st.w	r10++,r8
8000ab7c:	e0 4e 00 24 	cp.w	lr,36
8000ab80:	c0 51       	brne	8000ab8a <_realloc_r+0x282>
8000ab82:	17 08       	ld.w	r8,r11++
8000ab84:	14 a8       	st.w	r10++,r8
8000ab86:	17 08       	ld.w	r8,r11++
8000ab88:	14 a8       	st.w	r10++,r8
8000ab8a:	16 99       	mov	r9,r11
8000ab8c:	13 08       	ld.w	r8,r9++
8000ab8e:	14 a8       	st.w	r10++,r8
8000ab90:	72 08       	ld.w	r8,r9[0x0]
8000ab92:	95 08       	st.w	r10[0x0],r8
8000ab94:	72 18       	ld.w	r8,r9[0x4]
8000ab96:	95 18       	st.w	r10[0x4],r8
8000ab98:	c0 58       	rjmp	8000aba2 <_realloc_r+0x29a>
8000ab9a:	1c 9a       	mov	r10,lr
8000ab9c:	08 9b       	mov	r11,r4
8000ab9e:	f0 1f 00 1c 	mcall	8000ac0c <_realloc_r+0x304>
8000aba2:	08 9b       	mov	r11,r4
8000aba4:	00 9c       	mov	r12,r0
8000aba6:	f0 1f 00 1c 	mcall	8000ac14 <_realloc_r+0x30c>
8000abaa:	00 9c       	mov	r12,r0
8000abac:	c2 a8       	rjmp	8000ac00 <_realloc_r+0x2f8>
8000abae:	0c 97       	mov	r7,r6
8000abb0:	0a 93       	mov	r3,r5
8000abb2:	e6 02 01 09 	sub	r9,r3,r2
8000abb6:	6e 18       	ld.w	r8,r7[0x4]
8000abb8:	58 f9       	cp.w	r9,15
8000abba:	e0 88 00 16 	brls	8000abe6 <_realloc_r+0x2de>
8000abbe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000abc2:	e5 e8 10 08 	or	r8,r2,r8
8000abc6:	8f 18       	st.w	r7[0x4],r8
8000abc8:	12 98       	mov	r8,r9
8000abca:	a1 a8       	sbr	r8,0x0
8000abcc:	ee 02 00 0b 	add	r11,r7,r2
8000abd0:	f6 09 00 09 	add	r9,r11,r9
8000abd4:	97 18       	st.w	r11[0x4],r8
8000abd6:	72 18       	ld.w	r8,r9[0x4]
8000abd8:	a1 a8       	sbr	r8,0x0
8000abda:	2f 8b       	sub	r11,-8
8000abdc:	93 18       	st.w	r9[0x4],r8
8000abde:	00 9c       	mov	r12,r0
8000abe0:	f0 1f 00 0d 	mcall	8000ac14 <_realloc_r+0x30c>
8000abe4:	c0 b8       	rjmp	8000abfa <_realloc_r+0x2f2>
8000abe6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000abea:	e7 e8 10 08 	or	r8,r3,r8
8000abee:	8f 18       	st.w	r7[0x4],r8
8000abf0:	ee 03 00 09 	add	r9,r7,r3
8000abf4:	72 18       	ld.w	r8,r9[0x4]
8000abf6:	a1 a8       	sbr	r8,0x0
8000abf8:	93 18       	st.w	r9[0x4],r8
8000abfa:	00 9c       	mov	r12,r0
8000abfc:	ee c3 ff f8 	sub	r3,r7,-8
8000ac00:	f0 1f 00 06 	mcall	8000ac18 <_realloc_r+0x310>
8000ac04:	06 9c       	mov	r12,r3
8000ac06:	2f fd       	sub	sp,-4
8000ac08:	d8 32       	popm	r0-r7,pc
8000ac0a:	00 00       	add	r0,r0
8000ac0c:	80 00       	ld.sh	r0,r0[0x0]
8000ac0e:	a2 3a       	st.h	r1[0x6],r10
8000ac10:	80 00       	ld.sh	r0,r0[0x0]
8000ac12:	5e d0       	retvc	r0
8000ac14:	80 00       	ld.sh	r0,r0[0x0]
8000ac16:	67 6c       	ld.w	r12,r3[0x58]
8000ac18:	80 00       	ld.sh	r0,r0[0x0]
8000ac1a:	63 52       	ld.w	r2,r1[0x54]

8000ac1c <__isinfd>:
8000ac1c:	14 98       	mov	r8,r10
8000ac1e:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8000ac22:	5c 3a       	neg	r10
8000ac24:	10 4a       	or	r10,r8
8000ac26:	fc 18 7f f0 	movh	r8,0x7ff0
8000ac2a:	f7 ea 13 fb 	or	r11,r11,r10>>0x1f
8000ac2e:	f0 0b 01 0b 	sub	r11,r8,r11
8000ac32:	f6 0c 11 00 	rsub	r12,r11,0
8000ac36:	16 4c       	or	r12,r11
8000ac38:	bf 5c       	asr	r12,0x1f
8000ac3a:	2f fc       	sub	r12,-1
8000ac3c:	5e fc       	retal	r12

8000ac3e <__isnand>:
8000ac3e:	14 98       	mov	r8,r10
8000ac40:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8000ac44:	5c 3a       	neg	r10
8000ac46:	10 4a       	or	r10,r8
8000ac48:	fc 18 7f f0 	movh	r8,0x7ff0
8000ac4c:	f9 ea 13 fc 	or	r12,r12,r10>>0x1f
8000ac50:	f0 0c 01 0c 	sub	r12,r8,r12
8000ac54:	bf 9c       	lsr	r12,0x1f
8000ac56:	5e fc       	retal	r12

8000ac58 <strlen>:
8000ac58:	18 99       	mov	r9,r12
8000ac5a:	30 0a       	mov	r10,0
8000ac5c:	c0 28       	rjmp	8000ac60 <strlen+0x8>
8000ac5e:	2f fc       	sub	r12,-1
8000ac60:	19 88       	ld.ub	r8,r12[0x0]
8000ac62:	f4 08 18 00 	cp.b	r8,r10
8000ac66:	cf c1       	brne	8000ac5e <strlen+0x6>
8000ac68:	12 1c       	sub	r12,r9
8000ac6a:	5e fc       	retal	r12

8000ac6c <_calloc_r>:
8000ac6c:	d4 21       	pushm	r4-r7,lr
8000ac6e:	f4 0b 02 4b 	mul	r11,r10,r11
8000ac72:	f0 1f 00 16 	mcall	8000acc8 <_calloc_r+0x5c>
8000ac76:	18 97       	mov	r7,r12
8000ac78:	c2 60       	breq	8000acc4 <_calloc_r+0x58>
8000ac7a:	f8 f8 ff fc 	ld.w	r8,r12[-4]
8000ac7e:	e0 18 ff fc 	andl	r8,0xfffc
8000ac82:	f0 ca 00 04 	sub	r10,r8,4
8000ac86:	e0 4a 00 24 	cp.w	r10,36
8000ac8a:	e0 8b 00 1a 	brhi	8000acbe <_calloc_r+0x52>
8000ac8e:	18 99       	mov	r9,r12
8000ac90:	59 3a       	cp.w	r10,19
8000ac92:	e0 88 00 11 	brls	8000acb4 <_calloc_r+0x48>
8000ac96:	30 0b       	mov	r11,0
8000ac98:	18 98       	mov	r8,r12
8000ac9a:	10 ab       	st.w	r8++,r11
8000ac9c:	10 99       	mov	r9,r8
8000ac9e:	12 ab       	st.w	r9++,r11
8000aca0:	59 ba       	cp.w	r10,27
8000aca2:	e0 88 00 09 	brls	8000acb4 <_calloc_r+0x48>
8000aca6:	12 ab       	st.w	r9++,r11
8000aca8:	12 ab       	st.w	r9++,r11
8000acaa:	e0 4a 00 24 	cp.w	r10,36
8000acae:	c0 31       	brne	8000acb4 <_calloc_r+0x48>
8000acb0:	12 ab       	st.w	r9++,r11
8000acb2:	12 ab       	st.w	r9++,r11
8000acb4:	30 08       	mov	r8,0
8000acb6:	12 a8       	st.w	r9++,r8
8000acb8:	93 18       	st.w	r9[0x4],r8
8000acba:	93 08       	st.w	r9[0x0],r8
8000acbc:	c0 48       	rjmp	8000acc4 <_calloc_r+0x58>
8000acbe:	30 0b       	mov	r11,0
8000acc0:	f0 1f 00 03 	mcall	8000accc <_calloc_r+0x60>
8000acc4:	0e 9c       	mov	r12,r7
8000acc6:	d8 22       	popm	r4-r7,pc
8000acc8:	80 00       	ld.sh	r0,r0[0x0]
8000acca:	5e d0       	retvc	r0
8000accc:	80 00       	ld.sh	r0,r0[0x0]
8000acce:	69 6c       	ld.w	r12,r4[0x58]

8000acd0 <_fstat_r>:
8000acd0:	d4 21       	pushm	r4-r7,lr
8000acd2:	16 98       	mov	r8,r11
8000acd4:	18 96       	mov	r6,r12
8000acd6:	10 9c       	mov	r12,r8
8000acd8:	30 08       	mov	r8,0
8000acda:	48 77       	lddpc	r7,8000acf4 <_fstat_r+0x24>
8000acdc:	14 9b       	mov	r11,r10
8000acde:	8f 08       	st.w	r7[0x0],r8
8000ace0:	f0 1f 00 06 	mcall	8000acf8 <_fstat_r+0x28>
8000ace4:	5b fc       	cp.w	r12,-1
8000ace6:	c0 51       	brne	8000acf0 <_fstat_r+0x20>
8000ace8:	6e 08       	ld.w	r8,r7[0x0]
8000acea:	58 08       	cp.w	r8,0
8000acec:	ed f8 1a 03 	st.wne	r6[0xc],r8
8000acf0:	d8 22       	popm	r4-r7,pc
8000acf2:	00 00       	add	r0,r0
8000acf4:	00 00       	add	r0,r0
8000acf6:	06 a4       	st.w	r3++,r4
8000acf8:	80 00       	ld.sh	r0,r0[0x0]
8000acfa:	4f 46       	lddpc	r6,8000aec8 <__avr32_f64_mul_op1_zero+0x10>

8000acfc <__avr32_f64_mul>:
8000acfc:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000ad00:	e0 80 00 dc 	breq	8000aeb8 <__avr32_f64_mul_op1_zero>
8000ad04:	d4 21       	pushm	r4-r7,lr
8000ad06:	f7 e9 20 0e 	eor	lr,r11,r9
8000ad0a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000ad0e:	30 15       	mov	r5,1
8000ad10:	c4 30       	breq	8000ad96 <__avr32_f64_mul_op1_subnormal>
8000ad12:	ab 6b       	lsl	r11,0xa
8000ad14:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000ad18:	ab 6a       	lsl	r10,0xa
8000ad1a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000ad1e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000ad22:	c5 c0       	breq	8000adda <__avr32_f64_mul_op2_subnormal>
8000ad24:	a1 78       	lsl	r8,0x1
8000ad26:	5c f9       	rol	r9
8000ad28:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000ad2c:	e0 47 07 ff 	cp.w	r7,2047
8000ad30:	c7 70       	breq	8000ae1e <__avr32_f64_mul_op_nan_or_inf>
8000ad32:	e0 46 07 ff 	cp.w	r6,2047
8000ad36:	c7 40       	breq	8000ae1e <__avr32_f64_mul_op_nan_or_inf>
8000ad38:	ee 06 00 0c 	add	r12,r7,r6
8000ad3c:	e0 2c 03 fe 	sub	r12,1022
8000ad40:	f6 08 06 44 	mulu.d	r4,r11,r8
8000ad44:	f4 09 07 44 	macu.d	r4,r10,r9
8000ad48:	f4 08 06 46 	mulu.d	r6,r10,r8
8000ad4c:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000ad50:	08 07       	add	r7,r4
8000ad52:	f4 05 00 4a 	adc	r10,r10,r5
8000ad56:	5c 0b       	acr	r11
8000ad58:	ed bb 00 14 	bld	r11,0x14
8000ad5c:	c0 50       	breq	8000ad66 <__avr32_f64_mul+0x6a>
8000ad5e:	a1 77       	lsl	r7,0x1
8000ad60:	5c fa       	rol	r10
8000ad62:	5c fb       	rol	r11
8000ad64:	20 1c       	sub	r12,1
8000ad66:	58 0c       	cp.w	r12,0
8000ad68:	e0 8a 00 6f 	brle	8000ae46 <__avr32_f64_mul_res_subnormal>
8000ad6c:	e0 4c 07 ff 	cp.w	r12,2047
8000ad70:	e0 84 00 9c 	brge	8000aea8 <__avr32_f64_mul_res_inf>
8000ad74:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000ad78:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000ad7c:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000ad80:	ee 17 80 00 	eorh	r7,0x8000
8000ad84:	f1 b7 04 20 	satu	r7,0x1
8000ad88:	0e 0a       	add	r10,r7
8000ad8a:	5c 0b       	acr	r11
8000ad8c:	ed be 00 1f 	bld	lr,0x1f
8000ad90:	ef bb 00 1f 	bst	r11,0x1f
8000ad94:	d8 22       	popm	r4-r7,pc

8000ad96 <__avr32_f64_mul_op1_subnormal>:
8000ad96:	e4 1b 00 0f 	andh	r11,0xf
8000ad9a:	f4 0c 12 00 	clz	r12,r10
8000ad9e:	f6 06 12 00 	clz	r6,r11
8000ada2:	f7 bc 03 e1 	sublo	r12,-31
8000ada6:	f8 06 17 30 	movlo	r6,r12
8000adaa:	f7 b6 02 01 	subhs	r6,1
8000adae:	e0 46 00 20 	cp.w	r6,32
8000adb2:	c0 d4       	brge	8000adcc <__avr32_f64_mul_op1_subnormal+0x36>
8000adb4:	ec 0c 11 20 	rsub	r12,r6,32
8000adb8:	f6 06 09 4b 	lsl	r11,r11,r6
8000adbc:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000adc0:	18 4b       	or	r11,r12
8000adc2:	f4 06 09 4a 	lsl	r10,r10,r6
8000adc6:	20 b6       	sub	r6,11
8000adc8:	0c 17       	sub	r7,r6
8000adca:	ca ab       	rjmp	8000ad1e <__avr32_f64_mul+0x22>
8000adcc:	f4 06 09 4b 	lsl	r11,r10,r6
8000add0:	c6 40       	breq	8000ae98 <__avr32_f64_mul_res_zero>
8000add2:	30 0a       	mov	r10,0
8000add4:	20 b6       	sub	r6,11
8000add6:	0c 17       	sub	r7,r6
8000add8:	ca 3b       	rjmp	8000ad1e <__avr32_f64_mul+0x22>

8000adda <__avr32_f64_mul_op2_subnormal>:
8000adda:	e4 19 00 0f 	andh	r9,0xf
8000adde:	f0 0c 12 00 	clz	r12,r8
8000ade2:	f2 05 12 00 	clz	r5,r9
8000ade6:	f7 bc 03 ea 	sublo	r12,-22
8000adea:	f8 05 17 30 	movlo	r5,r12
8000adee:	f7 b5 02 0a 	subhs	r5,10
8000adf2:	e0 45 00 20 	cp.w	r5,32
8000adf6:	c0 d4       	brge	8000ae10 <__avr32_f64_mul_op2_subnormal+0x36>
8000adf8:	ea 0c 11 20 	rsub	r12,r5,32
8000adfc:	f2 05 09 49 	lsl	r9,r9,r5
8000ae00:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000ae04:	18 49       	or	r9,r12
8000ae06:	f0 05 09 48 	lsl	r8,r8,r5
8000ae0a:	20 25       	sub	r5,2
8000ae0c:	0a 16       	sub	r6,r5
8000ae0e:	c8 fb       	rjmp	8000ad2c <__avr32_f64_mul+0x30>
8000ae10:	f0 05 09 49 	lsl	r9,r8,r5
8000ae14:	c4 20       	breq	8000ae98 <__avr32_f64_mul_res_zero>
8000ae16:	30 08       	mov	r8,0
8000ae18:	20 25       	sub	r5,2
8000ae1a:	0a 16       	sub	r6,r5
8000ae1c:	c8 8b       	rjmp	8000ad2c <__avr32_f64_mul+0x30>

8000ae1e <__avr32_f64_mul_op_nan_or_inf>:
8000ae1e:	e4 19 00 0f 	andh	r9,0xf
8000ae22:	e4 1b 00 0f 	andh	r11,0xf
8000ae26:	14 4b       	or	r11,r10
8000ae28:	10 49       	or	r9,r8
8000ae2a:	e0 47 07 ff 	cp.w	r7,2047
8000ae2e:	c0 91       	brne	8000ae40 <__avr32_f64_mul_op1_not_naninf>
8000ae30:	58 0b       	cp.w	r11,0
8000ae32:	c3 81       	brne	8000aea2 <__avr32_f64_mul_res_nan>
8000ae34:	e0 46 07 ff 	cp.w	r6,2047
8000ae38:	c3 81       	brne	8000aea8 <__avr32_f64_mul_res_inf>
8000ae3a:	58 09       	cp.w	r9,0
8000ae3c:	c3 60       	breq	8000aea8 <__avr32_f64_mul_res_inf>
8000ae3e:	c3 28       	rjmp	8000aea2 <__avr32_f64_mul_res_nan>

8000ae40 <__avr32_f64_mul_op1_not_naninf>:
8000ae40:	58 09       	cp.w	r9,0
8000ae42:	c3 30       	breq	8000aea8 <__avr32_f64_mul_res_inf>
8000ae44:	c2 f8       	rjmp	8000aea2 <__avr32_f64_mul_res_nan>

8000ae46 <__avr32_f64_mul_res_subnormal>:
8000ae46:	5c 3c       	neg	r12
8000ae48:	2f fc       	sub	r12,-1
8000ae4a:	f1 bc 04 c0 	satu	r12,0x6
8000ae4e:	e0 4c 00 20 	cp.w	r12,32
8000ae52:	c1 14       	brge	8000ae74 <__avr32_f64_mul_res_subnormal+0x2e>
8000ae54:	f8 08 11 20 	rsub	r8,r12,32
8000ae58:	0e 46       	or	r6,r7
8000ae5a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000ae5e:	f4 08 09 49 	lsl	r9,r10,r8
8000ae62:	12 47       	or	r7,r9
8000ae64:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000ae68:	f6 08 09 49 	lsl	r9,r11,r8
8000ae6c:	12 4a       	or	r10,r9
8000ae6e:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000ae72:	c8 3b       	rjmp	8000ad78 <__avr32_f64_mul+0x7c>
8000ae74:	f8 08 11 20 	rsub	r8,r12,32
8000ae78:	f9 b9 00 00 	moveq	r9,0
8000ae7c:	c0 30       	breq	8000ae82 <__avr32_f64_mul_res_subnormal+0x3c>
8000ae7e:	f6 08 09 49 	lsl	r9,r11,r8
8000ae82:	0e 46       	or	r6,r7
8000ae84:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000ae88:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000ae8c:	f3 ea 10 07 	or	r7,r9,r10
8000ae90:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000ae94:	30 0b       	mov	r11,0
8000ae96:	c7 1b       	rjmp	8000ad78 <__avr32_f64_mul+0x7c>

8000ae98 <__avr32_f64_mul_res_zero>:
8000ae98:	1c 9b       	mov	r11,lr
8000ae9a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000ae9e:	30 0a       	mov	r10,0
8000aea0:	d8 22       	popm	r4-r7,pc

8000aea2 <__avr32_f64_mul_res_nan>:
8000aea2:	3f fb       	mov	r11,-1
8000aea4:	3f fa       	mov	r10,-1
8000aea6:	d8 22       	popm	r4-r7,pc

8000aea8 <__avr32_f64_mul_res_inf>:
8000aea8:	f0 6b 00 00 	mov	r11,-1048576
8000aeac:	ed be 00 1f 	bld	lr,0x1f
8000aeb0:	ef bb 00 1f 	bst	r11,0x1f
8000aeb4:	30 0a       	mov	r10,0
8000aeb6:	d8 22       	popm	r4-r7,pc

8000aeb8 <__avr32_f64_mul_op1_zero>:
8000aeb8:	f7 e9 20 0b 	eor	r11,r11,r9
8000aebc:	e6 1b 80 00 	andh	r11,0x8000,COH
8000aec0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000aec4:	e0 4c 07 ff 	cp.w	r12,2047
8000aec8:	5e 1c       	retne	r12
8000aeca:	3f fa       	mov	r10,-1
8000aecc:	3f fb       	mov	r11,-1
8000aece:	5e fc       	retal	r12
8000aed0:	58 17       	cp.w	r7,1
8000aed2:	58 09       	cp.w	r9,0
8000aed4:	f5 b8 00 00 	subfeq	r8,0
8000aed8:	1b 07       	ld.w	r7,sp++
8000aeda:	1b 0e       	ld.w	lr,sp++
8000aedc:	5e fc       	retal	r12
	...

8000aee0 <__avr32_f64_to_u32>:
8000aee0:	58 0b       	cp.w	r11,0
8000aee2:	5e 6d       	retmi	0

8000aee4 <__avr32_f64_to_s32>:
8000aee4:	f6 0c 15 01 	lsl	r12,r11,0x1
8000aee8:	b5 9c       	lsr	r12,0x15
8000aeea:	e0 2c 03 ff 	sub	r12,1023
8000aeee:	5e 3d       	retlo	0
8000aef0:	f8 0c 11 1f 	rsub	r12,r12,31
8000aef4:	16 99       	mov	r9,r11
8000aef6:	ab 7b       	lsl	r11,0xb
8000aef8:	bf bb       	sbr	r11,0x1f
8000aefa:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000aefe:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000af02:	a1 79       	lsl	r9,0x1
8000af04:	5e 2b       	reths	r11
8000af06:	5c 3b       	neg	r11
8000af08:	5e fb       	retal	r11
8000af0a:	58 17       	cp.w	r7,1
8000af0c:	58 09       	cp.w	r9,0
8000af0e:	f5 b8 00 00 	subfeq	r8,0
8000af12:	1b 07       	ld.w	r7,sp++
8000af14:	1b 0e       	ld.w	lr,sp++
8000af16:	5e fc       	retal	r12

8000af18 <__avr32_f64_cmp_eq>:
8000af18:	10 3a       	cp.w	r10,r8
8000af1a:	f2 0b 13 00 	cpc	r11,r9
8000af1e:	c0 80       	breq	8000af2e <__avr32_f64_cmp_eq+0x16>
8000af20:	a1 7b       	lsl	r11,0x1
8000af22:	a1 79       	lsl	r9,0x1
8000af24:	14 4b       	or	r11,r10
8000af26:	12 4b       	or	r11,r9
8000af28:	10 4b       	or	r11,r8
8000af2a:	5e 0f       	reteq	1
8000af2c:	5e fd       	retal	0
8000af2e:	a1 7b       	lsl	r11,0x1
8000af30:	fc 1c ff e0 	movh	r12,0xffe0
8000af34:	58 0a       	cp.w	r10,0
8000af36:	f8 0b 13 00 	cpc	r11,r12
8000af3a:	5e 8f       	retls	1
8000af3c:	5e fd       	retal	0
8000af3e:	58 17       	cp.w	r7,1
8000af40:	58 09       	cp.w	r9,0
8000af42:	f5 b8 00 00 	subfeq	r8,0
8000af46:	1b 07       	ld.w	r7,sp++
8000af48:	1b 0e       	ld.w	lr,sp++
8000af4a:	5e fc       	retal	r12

8000af4c <__avr32_f64_cmp_ge>:
8000af4c:	1a de       	st.w	--sp,lr
8000af4e:	1a d7       	st.w	--sp,r7
8000af50:	a1 7b       	lsl	r11,0x1
8000af52:	5f 3c       	srlo	r12
8000af54:	a1 79       	lsl	r9,0x1
8000af56:	5f 37       	srlo	r7
8000af58:	5c fc       	rol	r12
8000af5a:	fc 1e ff e0 	movh	lr,0xffe0
8000af5e:	58 0a       	cp.w	r10,0
8000af60:	fc 0b 13 00 	cpc	r11,lr
8000af64:	e0 8b 00 1d 	brhi	8000af9e <__avr32_f64_cmp_ge+0x52>
8000af68:	58 08       	cp.w	r8,0
8000af6a:	fc 09 13 00 	cpc	r9,lr
8000af6e:	e0 8b 00 18 	brhi	8000af9e <__avr32_f64_cmp_ge+0x52>
8000af72:	58 0b       	cp.w	r11,0
8000af74:	f5 ba 00 00 	subfeq	r10,0
8000af78:	c1 50       	breq	8000afa2 <__avr32_f64_cmp_ge+0x56>
8000af7a:	1b 07       	ld.w	r7,sp++
8000af7c:	1b 0e       	ld.w	lr,sp++
8000af7e:	58 3c       	cp.w	r12,3
8000af80:	c0 a0       	breq	8000af94 <__avr32_f64_cmp_ge+0x48>
8000af82:	58 1c       	cp.w	r12,1
8000af84:	c0 33       	brcs	8000af8a <__avr32_f64_cmp_ge+0x3e>
8000af86:	5e 0f       	reteq	1
8000af88:	5e 1d       	retne	0
8000af8a:	10 3a       	cp.w	r10,r8
8000af8c:	f2 0b 13 00 	cpc	r11,r9
8000af90:	5e 2f       	reths	1
8000af92:	5e 3d       	retlo	0
8000af94:	14 38       	cp.w	r8,r10
8000af96:	f6 09 13 00 	cpc	r9,r11
8000af9a:	5e 2f       	reths	1
8000af9c:	5e 3d       	retlo	0
8000af9e:	1b 07       	ld.w	r7,sp++
8000afa0:	d8 0a       	popm	pc,r12=0
8000afa2:	58 17       	cp.w	r7,1
8000afa4:	5f 0c       	sreq	r12
8000afa6:	58 09       	cp.w	r9,0
8000afa8:	f5 b8 00 00 	subfeq	r8,0
8000afac:	1b 07       	ld.w	r7,sp++
8000afae:	1b 0e       	ld.w	lr,sp++
8000afb0:	5e 0f       	reteq	1
8000afb2:	5e fc       	retal	r12

8000afb4 <__avr32_f64_cmp_lt>:
8000afb4:	1a de       	st.w	--sp,lr
8000afb6:	1a d7       	st.w	--sp,r7
8000afb8:	a1 7b       	lsl	r11,0x1
8000afba:	5f 3c       	srlo	r12
8000afbc:	a1 79       	lsl	r9,0x1
8000afbe:	5f 37       	srlo	r7
8000afc0:	5c fc       	rol	r12
8000afc2:	fc 1e ff e0 	movh	lr,0xffe0
8000afc6:	58 0a       	cp.w	r10,0
8000afc8:	fc 0b 13 00 	cpc	r11,lr
8000afcc:	e0 8b 00 1d 	brhi	8000b006 <__avr32_f64_cmp_lt+0x52>
8000afd0:	58 08       	cp.w	r8,0
8000afd2:	fc 09 13 00 	cpc	r9,lr
8000afd6:	e0 8b 00 18 	brhi	8000b006 <__avr32_f64_cmp_lt+0x52>
8000afda:	58 0b       	cp.w	r11,0
8000afdc:	f5 ba 00 00 	subfeq	r10,0
8000afe0:	c1 50       	breq	8000b00a <__avr32_f64_cmp_lt+0x56>
8000afe2:	1b 07       	ld.w	r7,sp++
8000afe4:	1b 0e       	ld.w	lr,sp++
8000afe6:	58 3c       	cp.w	r12,3
8000afe8:	c0 a0       	breq	8000affc <__avr32_f64_cmp_lt+0x48>
8000afea:	58 1c       	cp.w	r12,1
8000afec:	c0 33       	brcs	8000aff2 <__avr32_f64_cmp_lt+0x3e>
8000afee:	5e 0d       	reteq	0
8000aff0:	5e 1f       	retne	1
8000aff2:	10 3a       	cp.w	r10,r8
8000aff4:	f2 0b 13 00 	cpc	r11,r9
8000aff8:	5e 2d       	reths	0
8000affa:	5e 3f       	retlo	1
8000affc:	14 38       	cp.w	r8,r10
8000affe:	f6 09 13 00 	cpc	r9,r11
8000b002:	5e 2d       	reths	0
8000b004:	5e 3f       	retlo	1
8000b006:	1b 07       	ld.w	r7,sp++
8000b008:	d8 0a       	popm	pc,r12=0
8000b00a:	58 17       	cp.w	r7,1
8000b00c:	5f 1c       	srne	r12
8000b00e:	58 09       	cp.w	r9,0
8000b010:	f5 b8 00 00 	subfeq	r8,0
8000b014:	1b 07       	ld.w	r7,sp++
8000b016:	1b 0e       	ld.w	lr,sp++
8000b018:	5e 0d       	reteq	0
8000b01a:	5e fc       	retal	r12
8000b01c:	58 17       	cp.w	r7,1
8000b01e:	58 09       	cp.w	r9,0
8000b020:	f5 b8 00 00 	subfeq	r8,0
8000b024:	1b 07       	ld.w	r7,sp++
8000b026:	1b 0e       	ld.w	lr,sp++
8000b028:	5e fc       	retal	r12
	...

8000b02c <__avr32_f64_div>:
8000b02c:	eb cd 40 ff 	pushm	r0-r7,lr
8000b030:	f7 e9 20 0e 	eor	lr,r11,r9
8000b034:	f6 07 16 14 	lsr	r7,r11,0x14
8000b038:	a9 7b       	lsl	r11,0x9
8000b03a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000b03e:	a9 7a       	lsl	r10,0x9
8000b040:	bd bb       	sbr	r11,0x1d
8000b042:	e4 1b 3f ff 	andh	r11,0x3fff
8000b046:	ab d7       	cbr	r7,0xb
8000b048:	e0 80 00 cc 	breq	8000b1e0 <__avr32_f64_div_round_subnormal+0x54>
8000b04c:	e0 47 07 ff 	cp.w	r7,2047
8000b050:	e0 84 00 b5 	brge	8000b1ba <__avr32_f64_div_round_subnormal+0x2e>
8000b054:	f2 06 16 14 	lsr	r6,r9,0x14
8000b058:	a9 79       	lsl	r9,0x9
8000b05a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000b05e:	a9 78       	lsl	r8,0x9
8000b060:	bd b9       	sbr	r9,0x1d
8000b062:	e4 19 3f ff 	andh	r9,0x3fff
8000b066:	ab d6       	cbr	r6,0xb
8000b068:	e0 80 00 e2 	breq	8000b22c <__avr32_f64_div_round_subnormal+0xa0>
8000b06c:	e0 46 07 ff 	cp.w	r6,2047
8000b070:	e0 84 00 b2 	brge	8000b1d4 <__avr32_f64_div_round_subnormal+0x48>
8000b074:	0c 17       	sub	r7,r6
8000b076:	fe 37 fc 01 	sub	r7,-1023
8000b07a:	fc 1c 80 00 	movh	r12,0x8000
8000b07e:	f8 03 16 01 	lsr	r3,r12,0x1
8000b082:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000b086:	5c d4       	com	r4
8000b088:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000b08c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b090:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b094:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b098:	ea 03 15 02 	lsl	r3,r5,0x2
8000b09c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b0a0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b0a4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b0a8:	ea 03 15 02 	lsl	r3,r5,0x2
8000b0ac:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b0b0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b0b4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b0b8:	ea 03 15 02 	lsl	r3,r5,0x2
8000b0bc:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b0c0:	e4 09 07 40 	macu.d	r0,r2,r9
8000b0c4:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b0c8:	02 04       	add	r4,r1
8000b0ca:	5c 05       	acr	r5
8000b0cc:	a3 65       	lsl	r5,0x2
8000b0ce:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000b0d2:	a3 64       	lsl	r4,0x2
8000b0d4:	5c 34       	neg	r4
8000b0d6:	f8 05 01 45 	sbc	r5,r12,r5
8000b0da:	e6 04 06 40 	mulu.d	r0,r3,r4
8000b0de:	e4 05 07 40 	macu.d	r0,r2,r5
8000b0e2:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b0e6:	02 04       	add	r4,r1
8000b0e8:	5c 05       	acr	r5
8000b0ea:	ea 03 15 02 	lsl	r3,r5,0x2
8000b0ee:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000b0f2:	e8 02 15 02 	lsl	r2,r4,0x2
8000b0f6:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b0fa:	e4 09 07 40 	macu.d	r0,r2,r9
8000b0fe:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b102:	02 04       	add	r4,r1
8000b104:	5c 05       	acr	r5
8000b106:	a3 65       	lsl	r5,0x2
8000b108:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000b10c:	a3 64       	lsl	r4,0x2
8000b10e:	5c 34       	neg	r4
8000b110:	f8 05 01 45 	sbc	r5,r12,r5
8000b114:	e6 04 06 40 	mulu.d	r0,r3,r4
8000b118:	e4 05 07 40 	macu.d	r0,r2,r5
8000b11c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b120:	02 04       	add	r4,r1
8000b122:	5c 05       	acr	r5
8000b124:	ea 03 15 02 	lsl	r3,r5,0x2
8000b128:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000b12c:	e8 02 15 02 	lsl	r2,r4,0x2
8000b130:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000b134:	e4 0b 07 40 	macu.d	r0,r2,r11
8000b138:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000b13c:	02 02       	add	r2,r1
8000b13e:	5c 03       	acr	r3
8000b140:	ed b3 00 1c 	bld	r3,0x1c
8000b144:	c0 90       	breq	8000b156 <__avr32_f64_div+0x12a>
8000b146:	a1 72       	lsl	r2,0x1
8000b148:	5c f3       	rol	r3
8000b14a:	20 17       	sub	r7,1
8000b14c:	a3 9a       	lsr	r10,0x3
8000b14e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000b152:	a3 9b       	lsr	r11,0x3
8000b154:	c0 58       	rjmp	8000b15e <__avr32_f64_div+0x132>
8000b156:	a5 8a       	lsr	r10,0x4
8000b158:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000b15c:	a5 8b       	lsr	r11,0x4
8000b15e:	58 07       	cp.w	r7,0
8000b160:	e0 8a 00 8b 	brle	8000b276 <__avr32_f64_div_res_subnormal>
8000b164:	e0 12 ff 00 	andl	r2,0xff00
8000b168:	e8 12 00 80 	orl	r2,0x80
8000b16c:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b170:	e4 09 07 40 	macu.d	r0,r2,r9
8000b174:	e4 08 06 44 	mulu.d	r4,r2,r8
8000b178:	e6 09 06 48 	mulu.d	r8,r3,r9
8000b17c:	00 05       	add	r5,r0
8000b17e:	f0 01 00 48 	adc	r8,r8,r1
8000b182:	5c 09       	acr	r9
8000b184:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000b188:	58 04       	cp.w	r4,0
8000b18a:	5c 25       	cpc	r5

8000b18c <__avr32_f64_div_round_subnormal>:
8000b18c:	f4 08 13 00 	cpc	r8,r10
8000b190:	f6 09 13 00 	cpc	r9,r11
8000b194:	5f 36       	srlo	r6
8000b196:	f8 06 17 00 	moveq	r6,r12
8000b19a:	e4 0a 16 08 	lsr	r10,r2,0x8
8000b19e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000b1a2:	e6 0b 16 08 	lsr	r11,r3,0x8
8000b1a6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b1aa:	ed be 00 1f 	bld	lr,0x1f
8000b1ae:	ef bb 00 1f 	bst	r11,0x1f
8000b1b2:	0c 0a       	add	r10,r6
8000b1b4:	5c 0b       	acr	r11
8000b1b6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000b1ba:	e4 1b 00 0f 	andh	r11,0xf
8000b1be:	14 4b       	or	r11,r10
8000b1c0:	e0 81 00 a7 	brne	8000b30e <__avr32_f64_div_res_subnormal+0x98>
8000b1c4:	f2 06 16 14 	lsr	r6,r9,0x14
8000b1c8:	ab d6       	cbr	r6,0xb
8000b1ca:	e0 46 07 ff 	cp.w	r6,2047
8000b1ce:	e0 81 00 a4 	brne	8000b316 <__avr32_f64_div_res_subnormal+0xa0>
8000b1d2:	c9 e8       	rjmp	8000b30e <__avr32_f64_div_res_subnormal+0x98>
8000b1d4:	e4 19 00 0f 	andh	r9,0xf
8000b1d8:	10 49       	or	r9,r8
8000b1da:	e0 81 00 9a 	brne	8000b30e <__avr32_f64_div_res_subnormal+0x98>
8000b1de:	c9 28       	rjmp	8000b302 <__avr32_f64_div_res_subnormal+0x8c>
8000b1e0:	a3 7b       	lsl	r11,0x3
8000b1e2:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000b1e6:	a3 7a       	lsl	r10,0x3
8000b1e8:	f5 eb 10 04 	or	r4,r10,r11
8000b1ec:	e0 80 00 a0 	breq	8000b32c <__avr32_f64_div_op1_zero>
8000b1f0:	f6 04 12 00 	clz	r4,r11
8000b1f4:	c1 70       	breq	8000b222 <__avr32_f64_div_round_subnormal+0x96>
8000b1f6:	c0 c3       	brcs	8000b20e <__avr32_f64_div_round_subnormal+0x82>
8000b1f8:	e8 05 11 20 	rsub	r5,r4,32
8000b1fc:	f6 04 09 4b 	lsl	r11,r11,r4
8000b200:	f4 05 0a 45 	lsr	r5,r10,r5
8000b204:	0a 4b       	or	r11,r5
8000b206:	f4 04 09 4a 	lsl	r10,r10,r4
8000b20a:	08 17       	sub	r7,r4
8000b20c:	c0 b8       	rjmp	8000b222 <__avr32_f64_div_round_subnormal+0x96>
8000b20e:	f4 04 12 00 	clz	r4,r10
8000b212:	f9 b4 03 00 	movlo	r4,0
8000b216:	f7 b4 02 e0 	subhs	r4,-32
8000b21a:	f4 04 09 4b 	lsl	r11,r10,r4
8000b21e:	30 0a       	mov	r10,0
8000b220:	08 17       	sub	r7,r4
8000b222:	a3 8a       	lsr	r10,0x2
8000b224:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000b228:	a3 8b       	lsr	r11,0x2
8000b22a:	c1 1b       	rjmp	8000b04c <__avr32_f64_div+0x20>
8000b22c:	a3 79       	lsl	r9,0x3
8000b22e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000b232:	a3 78       	lsl	r8,0x3
8000b234:	f3 e8 10 04 	or	r4,r9,r8
8000b238:	c6 f0       	breq	8000b316 <__avr32_f64_div_res_subnormal+0xa0>
8000b23a:	f2 04 12 00 	clz	r4,r9
8000b23e:	c1 70       	breq	8000b26c <__avr32_f64_div_round_subnormal+0xe0>
8000b240:	c0 c3       	brcs	8000b258 <__avr32_f64_div_round_subnormal+0xcc>
8000b242:	e8 05 11 20 	rsub	r5,r4,32
8000b246:	f2 04 09 49 	lsl	r9,r9,r4
8000b24a:	f0 05 0a 45 	lsr	r5,r8,r5
8000b24e:	0a 49       	or	r9,r5
8000b250:	f0 04 09 48 	lsl	r8,r8,r4
8000b254:	08 16       	sub	r6,r4
8000b256:	c0 b8       	rjmp	8000b26c <__avr32_f64_div_round_subnormal+0xe0>
8000b258:	f0 04 12 00 	clz	r4,r8
8000b25c:	f9 b4 03 00 	movlo	r4,0
8000b260:	f7 b4 02 e0 	subhs	r4,-32
8000b264:	f0 04 09 49 	lsl	r9,r8,r4
8000b268:	30 08       	mov	r8,0
8000b26a:	08 16       	sub	r6,r4
8000b26c:	a3 88       	lsr	r8,0x2
8000b26e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000b272:	a3 89       	lsr	r9,0x2
8000b274:	cf ca       	rjmp	8000b06c <__avr32_f64_div+0x40>

8000b276 <__avr32_f64_div_res_subnormal>:
8000b276:	5c 37       	neg	r7
8000b278:	2f f7       	sub	r7,-1
8000b27a:	f1 b7 04 c0 	satu	r7,0x6
8000b27e:	e0 47 00 20 	cp.w	r7,32
8000b282:	c1 54       	brge	8000b2ac <__avr32_f64_div_res_subnormal+0x36>
8000b284:	ee 06 11 20 	rsub	r6,r7,32
8000b288:	e4 07 0a 42 	lsr	r2,r2,r7
8000b28c:	e6 06 09 4c 	lsl	r12,r3,r6
8000b290:	18 42       	or	r2,r12
8000b292:	e6 07 0a 43 	lsr	r3,r3,r7
8000b296:	f4 06 09 41 	lsl	r1,r10,r6
8000b29a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000b29e:	f6 06 09 4c 	lsl	r12,r11,r6
8000b2a2:	18 4a       	or	r10,r12
8000b2a4:	f6 07 0a 4b 	lsr	r11,r11,r7
8000b2a8:	30 00       	mov	r0,0
8000b2aa:	c1 58       	rjmp	8000b2d4 <__avr32_f64_div_res_subnormal+0x5e>
8000b2ac:	ee 06 11 20 	rsub	r6,r7,32
8000b2b0:	f9 b0 00 00 	moveq	r0,0
8000b2b4:	f9 bc 00 00 	moveq	r12,0
8000b2b8:	c0 50       	breq	8000b2c2 <__avr32_f64_div_res_subnormal+0x4c>
8000b2ba:	f4 06 09 40 	lsl	r0,r10,r6
8000b2be:	f6 06 09 4c 	lsl	r12,r11,r6
8000b2c2:	e6 07 0a 42 	lsr	r2,r3,r7
8000b2c6:	30 03       	mov	r3,0
8000b2c8:	f4 07 0a 41 	lsr	r1,r10,r7
8000b2cc:	18 41       	or	r1,r12
8000b2ce:	f6 07 0a 4a 	lsr	r10,r11,r7
8000b2d2:	30 0b       	mov	r11,0
8000b2d4:	e0 12 ff 00 	andl	r2,0xff00
8000b2d8:	e8 12 00 80 	orl	r2,0x80
8000b2dc:	e6 08 06 46 	mulu.d	r6,r3,r8
8000b2e0:	e4 09 07 46 	macu.d	r6,r2,r9
8000b2e4:	e4 08 06 44 	mulu.d	r4,r2,r8
8000b2e8:	e6 09 06 48 	mulu.d	r8,r3,r9
8000b2ec:	0c 05       	add	r5,r6
8000b2ee:	f0 07 00 48 	adc	r8,r8,r7
8000b2f2:	5c 09       	acr	r9
8000b2f4:	30 07       	mov	r7,0
8000b2f6:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000b2fa:	00 34       	cp.w	r4,r0
8000b2fc:	e2 05 13 00 	cpc	r5,r1
8000b300:	c4 6b       	rjmp	8000b18c <__avr32_f64_div_round_subnormal>
8000b302:	1c 9b       	mov	r11,lr
8000b304:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b308:	30 0a       	mov	r10,0
8000b30a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000b30e:	3f fb       	mov	r11,-1
8000b310:	30 0a       	mov	r10,0
8000b312:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000b316:	f5 eb 10 04 	or	r4,r10,r11
8000b31a:	c0 90       	breq	8000b32c <__avr32_f64_div_op1_zero>
8000b31c:	1c 9b       	mov	r11,lr
8000b31e:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b322:	ea 1b 7f f0 	orh	r11,0x7ff0
8000b326:	30 0a       	mov	r10,0
8000b328:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000b32c <__avr32_f64_div_op1_zero>:
8000b32c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000b330:	ce f0       	breq	8000b30e <__avr32_f64_div_res_subnormal+0x98>
8000b332:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000b336:	e0 44 07 ff 	cp.w	r4,2047
8000b33a:	ce 41       	brne	8000b302 <__avr32_f64_div_res_subnormal+0x8c>
8000b33c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000b340:	ce 10       	breq	8000b302 <__avr32_f64_div_res_subnormal+0x8c>
8000b342:	ce 6b       	rjmp	8000b30e <__avr32_f64_div_res_subnormal+0x98>

8000b344 <__avr32_umod64>:
8000b344:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000b348:	1a 97       	mov	r7,sp
8000b34a:	20 1d       	sub	sp,4
8000b34c:	10 95       	mov	r5,r8
8000b34e:	10 9c       	mov	r12,r8
8000b350:	14 92       	mov	r2,r10
8000b352:	12 9e       	mov	lr,r9
8000b354:	14 93       	mov	r3,r10
8000b356:	16 98       	mov	r8,r11
8000b358:	16 96       	mov	r6,r11
8000b35a:	58 09       	cp.w	r9,0
8000b35c:	c4 01       	brne	8000b3dc <__avr32_umod64+0x98>
8000b35e:	16 35       	cp.w	r5,r11
8000b360:	e0 8b 00 8c 	brhi	8000b478 <__avr32_umod64+0x134>
8000b364:	58 05       	cp.w	r5,0
8000b366:	c0 51       	brne	8000b370 <__avr32_umod64+0x2c>
8000b368:	30 19       	mov	r9,1
8000b36a:	f2 05 0d 08 	divu	r8,r9,r5
8000b36e:	10 9c       	mov	r12,r8
8000b370:	f8 0e 12 00 	clz	lr,r12
8000b374:	c4 b1       	brne	8000b40a <__avr32_umod64+0xc6>
8000b376:	ec 0c 01 0b 	sub	r11,r6,r12
8000b37a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000b37e:	f8 06 16 10 	lsr	r6,r12,0x10
8000b382:	e6 0a 16 10 	lsr	r10,r3,0x10
8000b386:	f6 06 0d 08 	divu	r8,r11,r6
8000b38a:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000b38e:	ea 08 02 4a 	mul	r10,r5,r8
8000b392:	16 3a       	cp.w	r10,r11
8000b394:	e0 88 00 09 	brls	8000b3a6 <__avr32_umod64+0x62>
8000b398:	18 0b       	add	r11,r12
8000b39a:	16 3c       	cp.w	r12,r11
8000b39c:	e0 8b 00 05 	brhi	8000b3a6 <__avr32_umod64+0x62>
8000b3a0:	16 3a       	cp.w	r10,r11
8000b3a2:	f7 dc eb 0b 	addhi	r11,r11,r12
8000b3a6:	f6 0a 01 09 	sub	r9,r11,r10
8000b3aa:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
8000b3ae:	f2 06 0d 08 	divu	r8,r9,r6
8000b3b2:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000b3b6:	ea 08 02 4a 	mul	r10,r5,r8
8000b3ba:	16 3a       	cp.w	r10,r11
8000b3bc:	e0 88 00 09 	brls	8000b3ce <__avr32_umod64+0x8a>
8000b3c0:	18 0b       	add	r11,r12
8000b3c2:	16 3c       	cp.w	r12,r11
8000b3c4:	e0 8b 00 05 	brhi	8000b3ce <__avr32_umod64+0x8a>
8000b3c8:	16 3a       	cp.w	r10,r11
8000b3ca:	f7 dc eb 0b 	addhi	r11,r11,r12
8000b3ce:	14 1b       	sub	r11,r10
8000b3d0:	f6 0e 0a 4a 	lsr	r10,r11,lr
8000b3d4:	30 0b       	mov	r11,0
8000b3d6:	2f fd       	sub	sp,-4
8000b3d8:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000b3dc:	16 39       	cp.w	r9,r11
8000b3de:	fe 9b ff fc 	brhi	8000b3d6 <__avr32_umod64+0x92>
8000b3e2:	f2 01 12 00 	clz	r1,r9
8000b3e6:	e0 81 00 81 	brne	8000b4e8 <__avr32_umod64+0x1a4>
8000b3ea:	16 39       	cp.w	r9,r11
8000b3ec:	5f 38       	srlo	r8
8000b3ee:	14 35       	cp.w	r5,r10
8000b3f0:	5f 89       	srls	r9
8000b3f2:	12 48       	or	r8,r9
8000b3f4:	e2 08 18 00 	cp.b	r8,r1
8000b3f8:	c0 60       	breq	8000b404 <__avr32_umod64+0xc0>
8000b3fa:	e4 05 01 0a 	sub	r10,r2,r5
8000b3fe:	f6 0e 01 46 	sbc	r6,r11,lr
8000b402:	14 93       	mov	r3,r10
8000b404:	0c 9b       	mov	r11,r6
8000b406:	06 9a       	mov	r10,r3
8000b408:	ce 7b       	rjmp	8000b3d6 <__avr32_umod64+0x92>
8000b40a:	ec 0e 09 4b 	lsl	r11,r6,lr
8000b40e:	fc 09 11 20 	rsub	r9,lr,32
8000b412:	e4 09 0a 4a 	lsr	r10,r2,r9
8000b416:	f8 0e 09 4c 	lsl	r12,r12,lr
8000b41a:	f5 eb 10 03 	or	r3,r10,r11
8000b41e:	ec 09 0a 49 	lsr	r9,r6,r9
8000b422:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000b426:	f8 06 16 10 	lsr	r6,r12,0x10
8000b42a:	e6 0a 16 10 	lsr	r10,r3,0x10
8000b42e:	f2 06 0d 08 	divu	r8,r9,r6
8000b432:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000b436:	ea 08 02 49 	mul	r9,r5,r8
8000b43a:	16 39       	cp.w	r9,r11
8000b43c:	e0 88 00 06 	brls	8000b448 <__avr32_umod64+0x104>
8000b440:	18 0b       	add	r11,r12
8000b442:	16 3c       	cp.w	r12,r11
8000b444:	e0 88 00 be 	brls	8000b5c0 <__avr32_umod64+0x27c>
8000b448:	f6 09 01 09 	sub	r9,r11,r9
8000b44c:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
8000b450:	f2 06 0d 08 	divu	r8,r9,r6
8000b454:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000b458:	ea 08 02 49 	mul	r9,r5,r8
8000b45c:	16 39       	cp.w	r9,r11
8000b45e:	e0 88 00 09 	brls	8000b470 <__avr32_umod64+0x12c>
8000b462:	18 0b       	add	r11,r12
8000b464:	16 3c       	cp.w	r12,r11
8000b466:	e0 8b 00 05 	brhi	8000b470 <__avr32_umod64+0x12c>
8000b46a:	16 39       	cp.w	r9,r11
8000b46c:	f7 dc eb 0b 	addhi	r11,r11,r12
8000b470:	12 1b       	sub	r11,r9
8000b472:	e4 0e 09 43 	lsl	r3,r2,lr
8000b476:	c8 6b       	rjmp	8000b382 <__avr32_umod64+0x3e>
8000b478:	ea 0e 12 00 	clz	lr,r5
8000b47c:	c0 d0       	breq	8000b496 <__avr32_umod64+0x152>
8000b47e:	f6 0e 09 49 	lsl	r9,r11,lr
8000b482:	fc 08 11 20 	rsub	r8,lr,32
8000b486:	ea 0e 09 4c 	lsl	r12,r5,lr
8000b48a:	f4 08 0a 48 	lsr	r8,r10,r8
8000b48e:	f4 0e 09 43 	lsl	r3,r10,lr
8000b492:	f1 e9 10 06 	or	r6,r8,r9
8000b496:	f8 05 16 10 	lsr	r5,r12,0x10
8000b49a:	e6 08 16 10 	lsr	r8,r3,0x10
8000b49e:	ec 05 0d 0a 	divu	r10,r6,r5
8000b4a2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000b4a6:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000b4aa:	ec 0a 02 49 	mul	r9,r6,r10
8000b4ae:	16 39       	cp.w	r9,r11
8000b4b0:	e0 88 00 06 	brls	8000b4bc <__avr32_umod64+0x178>
8000b4b4:	18 0b       	add	r11,r12
8000b4b6:	16 3c       	cp.w	r12,r11
8000b4b8:	e0 88 00 88 	brls	8000b5c8 <__avr32_umod64+0x284>
8000b4bc:	f6 09 01 09 	sub	r9,r11,r9
8000b4c0:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
8000b4c4:	f2 05 0d 08 	divu	r8,r9,r5
8000b4c8:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000b4cc:	ec 08 02 49 	mul	r9,r6,r8
8000b4d0:	16 39       	cp.w	r9,r11
8000b4d2:	e0 88 00 09 	brls	8000b4e4 <__avr32_umod64+0x1a0>
8000b4d6:	18 0b       	add	r11,r12
8000b4d8:	16 3c       	cp.w	r12,r11
8000b4da:	e0 8b 00 05 	brhi	8000b4e4 <__avr32_umod64+0x1a0>
8000b4de:	16 39       	cp.w	r9,r11
8000b4e0:	f7 dc eb 0b 	addhi	r11,r11,r12
8000b4e4:	12 1b       	sub	r11,r9
8000b4e6:	c7 5b       	rjmp	8000b3d0 <__avr32_umod64+0x8c>
8000b4e8:	f2 01 09 4b 	lsl	r11,r9,r1
8000b4ec:	e2 03 11 20 	rsub	r3,r1,32
8000b4f0:	f4 01 09 49 	lsl	r9,r10,r1
8000b4f4:	ea 03 0a 4a 	lsr	r10,r5,r3
8000b4f8:	f0 01 09 4c 	lsl	r12,r8,r1
8000b4fc:	f5 eb 10 06 	or	r6,r10,r11
8000b500:	ef 49 ff fc 	st.w	r7[-4],r9
8000b504:	e4 03 0a 4a 	lsr	r10,r2,r3
8000b508:	ea 01 09 40 	lsl	r0,r5,r1
8000b50c:	f5 ec 10 0b 	or	r11,r10,r12
8000b510:	f0 03 0a 49 	lsr	r9,r8,r3
8000b514:	ec 05 16 10 	lsr	r5,r6,0x10
8000b518:	e5 d6 c0 10 	bfextu	r2,r6,0x0,0x10
8000b51c:	f2 05 0d 08 	divu	r8,r9,r5
8000b520:	f6 0a 16 10 	lsr	r10,r11,0x10
8000b524:	10 9e       	mov	lr,r8
8000b526:	f5 e9 11 0c 	or	r12,r10,r9<<0x10
8000b52a:	a5 38       	mul	r8,r2
8000b52c:	18 38       	cp.w	r8,r12
8000b52e:	e0 88 00 0c 	brls	8000b546 <__avr32_umod64+0x202>
8000b532:	20 1e       	sub	lr,1
8000b534:	0c 0c       	add	r12,r6
8000b536:	18 36       	cp.w	r6,r12
8000b538:	e0 8b 00 07 	brhi	8000b546 <__avr32_umod64+0x202>
8000b53c:	18 38       	cp.w	r8,r12
8000b53e:	f7 be 0b 01 	subhi	lr,1
8000b542:	f9 d6 eb 0c 	addhi	r12,r12,r6
8000b546:	f8 08 01 09 	sub	r9,r12,r8
8000b54a:	f5 db c0 10 	bfextu	r10,r11,0x0,0x10
8000b54e:	f2 05 0d 08 	divu	r8,r9,r5
8000b552:	10 9c       	mov	r12,r8
8000b554:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000b558:	a5 38       	mul	r8,r2
8000b55a:	16 38       	cp.w	r8,r11
8000b55c:	e0 88 00 0c 	brls	8000b574 <__avr32_umod64+0x230>
8000b560:	20 1c       	sub	r12,1
8000b562:	0c 0b       	add	r11,r6
8000b564:	16 36       	cp.w	r6,r11
8000b566:	e0 8b 00 07 	brhi	8000b574 <__avr32_umod64+0x230>
8000b56a:	16 38       	cp.w	r8,r11
8000b56c:	f7 bc 0b 01 	subhi	r12,1
8000b570:	f7 d6 eb 0b 	addhi	r11,r11,r6
8000b574:	f9 ee 11 09 	or	r9,r12,lr<<0x10
8000b578:	10 1b       	sub	r11,r8
8000b57a:	f2 00 06 48 	mulu.d	r8,r9,r0
8000b57e:	10 9e       	mov	lr,r8
8000b580:	12 9c       	mov	r12,r9
8000b582:	18 3b       	cp.w	r11,r12
8000b584:	c1 52       	brcc	8000b5ae <__avr32_umod64+0x26a>
8000b586:	fc 00 01 09 	sub	r9,lr,r0
8000b58a:	f8 06 01 4c 	sbc	r12,r12,r6
8000b58e:	12 9e       	mov	lr,r9
8000b590:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b594:	f4 0e 01 09 	sub	r9,r10,lr
8000b598:	f6 0c 01 48 	sbc	r8,r11,r12
8000b59c:	f0 01 0a 4b 	lsr	r11,r8,r1
8000b5a0:	f2 01 0a 49 	lsr	r9,r9,r1
8000b5a4:	f0 03 09 48 	lsl	r8,r8,r3
8000b5a8:	f3 e8 10 0a 	or	r10,r9,r8
8000b5ac:	c1 5b       	rjmp	8000b3d6 <__avr32_umod64+0x92>
8000b5ae:	18 3b       	cp.w	r11,r12
8000b5b0:	5f 08       	sreq	r8
8000b5b2:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b5b6:	1c 3a       	cp.w	r10,lr
8000b5b8:	5f 39       	srlo	r9
8000b5ba:	12 68       	and	r8,r9
8000b5bc:	ce a0       	breq	8000b590 <__avr32_umod64+0x24c>
8000b5be:	ce 4b       	rjmp	8000b586 <__avr32_umod64+0x242>
8000b5c0:	16 39       	cp.w	r9,r11
8000b5c2:	f7 dc eb 0b 	addhi	r11,r11,r12
8000b5c6:	c4 1b       	rjmp	8000b448 <__avr32_umod64+0x104>
8000b5c8:	16 39       	cp.w	r9,r11
8000b5ca:	f7 dc eb 0b 	addhi	r11,r11,r12
8000b5ce:	c7 7b       	rjmp	8000b4bc <__avr32_umod64+0x178>

8000b5d0 <__do_global_ctors_aux>:
8000b5d0:	eb cd 40 80 	pushm	r7,lr
8000b5d4:	48 79       	lddpc	r9,8000b5f0 <__do_global_ctors_aux+0x20>
8000b5d6:	f2 f8 ff fc 	ld.w	r8,r9[-4]
8000b5da:	5b f8       	cp.w	r8,-1
8000b5dc:	c0 70       	breq	8000b5ea <__do_global_ctors_aux+0x1a>
8000b5de:	f2 c7 00 04 	sub	r7,r9,4
8000b5e2:	5d 18       	icall	r8
8000b5e4:	0f 48       	ld.w	r8,--r7
8000b5e6:	5b f8       	cp.w	r8,-1
8000b5e8:	cf d1       	brne	8000b5e2 <__do_global_ctors_aux+0x12>
8000b5ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5ee:	00 00       	add	r0,r0
8000b5f0:	00 00       	add	r0,r0
8000b5f2:	00 0c       	add	r12,r0

Disassembly of section .exception:

8000b600 <_evba>:
8000b600:	c0 08       	rjmp	8000b600 <_evba>
	...

8000b604 <_handle_TLB_Multiple_Hit>:
8000b604:	c0 08       	rjmp	8000b604 <_handle_TLB_Multiple_Hit>
	...

8000b608 <_handle_Bus_Error_Data_Fetch>:
8000b608:	c0 08       	rjmp	8000b608 <_handle_Bus_Error_Data_Fetch>
	...

8000b60c <_handle_Bus_Error_Instruction_Fetch>:
8000b60c:	c0 08       	rjmp	8000b60c <_handle_Bus_Error_Instruction_Fetch>
	...

8000b610 <_handle_NMI>:
8000b610:	c0 08       	rjmp	8000b610 <_handle_NMI>
	...

8000b614 <_handle_Instruction_Address>:
8000b614:	c0 08       	rjmp	8000b614 <_handle_Instruction_Address>
	...

8000b618 <_handle_ITLB_Protection>:
8000b618:	c0 08       	rjmp	8000b618 <_handle_ITLB_Protection>
	...

8000b61c <_handle_Breakpoint>:
8000b61c:	c0 08       	rjmp	8000b61c <_handle_Breakpoint>
	...

8000b620 <_handle_Illegal_Opcode>:
8000b620:	c0 08       	rjmp	8000b620 <_handle_Illegal_Opcode>
	...

8000b624 <_handle_Unimplemented_Instruction>:
8000b624:	c0 08       	rjmp	8000b624 <_handle_Unimplemented_Instruction>
	...

8000b628 <_handle_Privilege_Violation>:
8000b628:	c0 08       	rjmp	8000b628 <_handle_Privilege_Violation>
	...

8000b62c <_handle_Floating_Point>:
8000b62c:	c0 08       	rjmp	8000b62c <_handle_Floating_Point>
	...

8000b630 <_handle_Coprocessor_Absent>:
8000b630:	c0 08       	rjmp	8000b630 <_handle_Coprocessor_Absent>
	...

8000b634 <_handle_Data_Address_Read>:
8000b634:	c0 08       	rjmp	8000b634 <_handle_Data_Address_Read>
	...

8000b638 <_handle_Data_Address_Write>:
8000b638:	c0 08       	rjmp	8000b638 <_handle_Data_Address_Write>
	...

8000b63c <_handle_DTLB_Protection_Read>:
8000b63c:	c0 08       	rjmp	8000b63c <_handle_DTLB_Protection_Read>
	...

8000b640 <_handle_DTLB_Protection_Write>:
8000b640:	c0 08       	rjmp	8000b640 <_handle_DTLB_Protection_Write>
	...

8000b644 <_handle_DTLB_Modified>:
8000b644:	c0 08       	rjmp	8000b644 <_handle_DTLB_Modified>
	...

8000b650 <_handle_ITLB_Miss>:
8000b650:	c0 08       	rjmp	8000b650 <_handle_ITLB_Miss>
	...

8000b660 <_handle_DTLB_Miss_Read>:
8000b660:	c0 08       	rjmp	8000b660 <_handle_DTLB_Miss_Read>
	...

8000b670 <_handle_DTLB_Miss_Write>:
8000b670:	c0 08       	rjmp	8000b670 <_handle_DTLB_Miss_Write>
	...

8000b700 <_handle_Supervisor_Call>:
8000b700:	c0 08       	rjmp	8000b700 <_handle_Supervisor_Call>
	...

8000b704 <_int0>:
8000b704:	30 0c       	mov	r12,0
8000b706:	f0 1f 00 12 	mcall	8000b74c <ipr_val+0x10>
8000b70a:	58 0c       	cp.w	r12,0
8000b70c:	f8 0f 17 10 	movne	pc,r12
8000b710:	d6 03       	rete

8000b712 <_int1>:
8000b712:	30 1c       	mov	r12,1
8000b714:	f0 1f 00 0e 	mcall	8000b74c <ipr_val+0x10>
8000b718:	58 0c       	cp.w	r12,0
8000b71a:	f8 0f 17 10 	movne	pc,r12
8000b71e:	d6 03       	rete

8000b720 <_int2>:
8000b720:	30 2c       	mov	r12,2
8000b722:	f0 1f 00 0b 	mcall	8000b74c <ipr_val+0x10>
8000b726:	58 0c       	cp.w	r12,0
8000b728:	f8 0f 17 10 	movne	pc,r12
8000b72c:	d6 03       	rete

8000b72e <_int3>:
8000b72e:	30 3c       	mov	r12,3
8000b730:	f0 1f 00 07 	mcall	8000b74c <ipr_val+0x10>
8000b734:	58 0c       	cp.w	r12,0
8000b736:	f8 0f 17 10 	movne	pc,r12
8000b73a:	d6 03       	rete

8000b73c <ipr_val>:
8000b73c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000b74c:	80 00 26 74 00 00 00 00 00 00 00 00 00 00 00 00     ..&t............
	...

Disassembly of section .fini:

8000b800 <_fini>:
8000b800:	eb cd 40 40 	pushm	r6,lr
8000b804:	48 26       	lddpc	r6,8000b80c <_fini+0xc>
8000b806:	1e 26       	rsub	r6,pc
8000b808:	c0 48       	rjmp	8000b810 <_fini+0x10>
8000b80a:	00 00       	add	r0,r0
8000b80c:	80 00       	ld.sh	r0,r0[0x0]
8000b80e:	b7 ea       	*unknown*
8000b810:	f0 16 00 02 	mcall	r6[8]
8000b814:	e3 cd 80 40 	ldm	sp++,r6,pc
